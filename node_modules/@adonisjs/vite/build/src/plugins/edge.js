// src/plugins/edge.ts
import { EdgeError } from "edge-error";
var edgePluginVite = (vite) => {
  const edgeVite = (edge) => {
    edge.global("vite", vite);
    edge.global("asset", vite.assetPath.bind(vite));
    edge.registerTag({
      tagName: "viteReactRefresh",
      seekable: true,
      block: false,
      compile(parser, buffer, token) {
        let attributes = "";
        if (token.properties.jsArg.trim()) {
          const jsArg = `a,${token.properties.jsArg}`;
          const parsed = parser.utils.transformAst(
            parser.utils.generateAST(jsArg, token.loc, token.filename),
            token.filename,
            parser
          );
          attributes = parser.utils.stringify(parsed.expressions[1]);
        }
        buffer.writeExpression(
          `const __vite_hmr_script = state.vite.getReactHmrScript(${attributes})`,
          token.filename,
          token.loc.start.line
        );
        buffer.writeStatement("if(__vite_hmr_script) {", token.filename, token.loc.start.line);
        buffer.outputExpression(
          `__vite_hmr_script.toString()`,
          token.filename,
          token.loc.start.line,
          false
        );
        buffer.writeStatement("}", token.filename, token.loc.start.line);
      }
    });
    edge.registerTag({
      tagName: "vite",
      seekable: true,
      block: false,
      compile(parser, buffer, token) {
        if (!token.properties.jsArg.trim()) {
          throw new EdgeError("Missing entrypoint name", "E_RUNTIME_EXCEPTION", {
            filename: token.filename,
            line: token.loc.start.line,
            col: token.loc.start.col
          });
        }
        const parsed = parser.utils.transformAst(
          parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename),
          token.filename,
          parser
        );
        const entrypoints = parser.utils.stringify(parsed);
        const methodCall = parsed.type === "SequenceExpression" ? `generateEntryPointsTags${entrypoints}` : `generateEntryPointsTags(${entrypoints})`;
        buffer.outputExpression(
          `(await state.vite.${methodCall}).join('\\n')`,
          token.filename,
          token.loc.start.line,
          false
        );
      }
    });
  };
  return edgeVite;
};
export {
  edgePluginVite
};
//# sourceMappingURL=edge.js.map