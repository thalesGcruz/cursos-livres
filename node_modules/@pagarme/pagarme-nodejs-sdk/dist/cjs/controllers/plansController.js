"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.PlansController = void 0;
var tslib_1 = require("tslib");
var createPlanItemRequest_1 = require("../models/createPlanItemRequest");
var createPlanRequest_1 = require("../models/createPlanRequest");
var getPlanItemResponse_1 = require("../models/getPlanItemResponse");
var getPlanResponse_1 = require("../models/getPlanResponse");
var listPlansResponse_1 = require("../models/listPlansResponse");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var updatePlanItemRequest_1 = require("../models/updatePlanItemRequest");
var updatePlanRequest_1 = require("../models/updatePlanRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var PlansController = /** @class */ (function (_super) {
    tslib_1.__extends(PlansController, _super);
    function PlansController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets a plan
     *
     * @param planId  Plan id
     * @return Response from the API call
     */
    PlansController.prototype.getPlan = function (planId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ planId: [planId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/plans/", ""], ["/plans/", ""])), mapped.planId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanResponse_1.getPlanResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Deletes a plan
     *
     * @param planId          Plan id
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.deletePlan = function (planId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/plans/", ""], ["/plans/", ""])), mapped.planId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanResponse_1.getPlanResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the metadata from a plan
     *
     * @param planId          The plan id
     * @param request         Request for updating the plan metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.updatePlanMetadata = function (planId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/Plans/", "/metadata"], ["/Plans/", "/metadata"])), mapped.planId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanResponse_1.getPlanResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates a plan item
     *
     * @param planId          Plan id
     * @param planItemId      Plan item id
     * @param body            Request for updating the plan item
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.updatePlanItem = function (planId, planItemId, body, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    planItemId: [planItemId, (0, schema_1.string)()],
                    body: [body, updatePlanItemRequest_1.updatePlanItemRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/plans/", "/items/", ""], ["/plans/", "/items/", ""])), mapped.planId, mapped.planItemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanItemResponse_1.getPlanItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Adds a new item to a plan
     *
     * @param planId          Plan id
     * @param request         Request for creating a plan item
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.createPlanItem = function (planId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    request: [request, createPlanItemRequest_1.createPlanItemRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/plans/", "/items"], ["/plans/", "/items"])), mapped.planId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanItemResponse_1.getPlanItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets a plan item
     *
     * @param planId       Plan id
     * @param planItemId   Plan item id
     * @return Response from the API call
     */
    PlansController.prototype.getPlanItem = function (planId, planItemId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    planItemId: [planItemId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/plans/", "/items/", ""], ["/plans/", "/items/", ""])), mapped.planId, mapped.planItemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanItemResponse_1.getPlanItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new plan
     *
     * @param body            Request for creating a plan
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.createPlan = function (body, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/plans');
                mapped = req.prepareArgs({
                    body: [body, createPlanRequest_1.createPlanRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.body);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanResponse_1.getPlanResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Removes an item from a plan
     *
     * @param planId          Plan id
     * @param planItemId      Plan item id
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.deletePlanItem = function (planId, planItemId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    planItemId: [planItemId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/plans/", "/items/", ""], ["/plans/", "/items/", ""])), mapped.planId, mapped.planItemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanItemResponse_1.getPlanItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets all plans
     *
     * @param page          Page number
     * @param size          Page size
     * @param name          Filter for Plan's name
     * @param status        Filter for Plan's status
     * @param billingType   Filter for plan's billing type
     * @param createdSince  Filter for plan's creation date start range
     * @param createdUntil  Filter for plan's creation date end range
     * @return Response from the API call
     */
    PlansController.prototype.getPlans = function (page, size, name, status, billingType, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/plans');
                mapped = req.prepareArgs({
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    name: [name, (0, schema_1.optional)((0, schema_1.string)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    billingType: [billingType, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('name', mapped.name);
                req.query('status', mapped.status);
                req.query('billing_type', mapped.billingType);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listPlansResponse_1.listPlansResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates a plan
     *
     * @param planId          Plan id
     * @param request         Request for updating a plan
     * @param idempotencyKey
     * @return Response from the API call
     */
    PlansController.prototype.updatePlan = function (planId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    planId: [planId, (0, schema_1.string)()],
                    request: [request, updatePlanRequest_1.updatePlanRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/plans/", ""], ["/plans/", ""])), mapped.planId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPlanResponse_1.getPlanResponseSchema, requestOptions)];
            });
        });
    };
    return PlansController;
}(baseController_1.BaseController));
exports.PlansController = PlansController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8;
//# sourceMappingURL=plansController.js.map