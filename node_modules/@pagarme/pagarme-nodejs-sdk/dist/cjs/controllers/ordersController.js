"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.OrdersController = void 0;
var tslib_1 = require("tslib");
var createOrderItemRequest_1 = require("../models/createOrderItemRequest");
var createOrderRequest_1 = require("../models/createOrderRequest");
var getOrderItemResponse_1 = require("../models/getOrderItemResponse");
var getOrderResponse_1 = require("../models/getOrderResponse");
var listOrderResponse_1 = require("../models/listOrderResponse");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var updateOrderItemRequest_1 = require("../models/updateOrderItemRequest");
var updateOrderStatusRequest_1 = require("../models/updateOrderStatusRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var OrdersController = /** @class */ (function (_super) {
    tslib_1.__extends(OrdersController, _super);
    function OrdersController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets all orders
     *
     * @param page          Page number
     * @param size          Page size
     * @param code          Filter for order's code
     * @param status        Filter for order's status
     * @param createdSince  Filter for order's creation date start range
     * @param createdUntil  Filter for order's creation date end range
     * @param customerId    Filter for order's customer id
     * @return Response from the API call
     */
    OrdersController.prototype.getOrders = function (page, size, code, status, createdSince, createdUntil, customerId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/orders');
                mapped = req.prepareArgs({
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    customerId: [customerId, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('code', mapped.code);
                req.query('status', mapped.status);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.query('customer_id', mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listOrderResponse_1.listOrderResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param orderId         Order Id
     * @param itemId          Item Id
     * @param request         Item Model
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.updateOrderItem = function (orderId, itemId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    orderId: [orderId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    request: [request, updateOrderItemRequest_1.updateOrderItemRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/orders/", "/items/", ""], ["/orders/", "/items/", ""])), mapped.orderId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderItemResponse_1.getOrderItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param orderId         Order Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.deleteAllOrderItems = function (orderId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    orderId: [orderId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/orders/", "/items"], ["/orders/", "/items"])), mapped.orderId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderResponse_1.getOrderResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param orderId         Order Id
     * @param itemId          Item Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.deleteOrderItem = function (orderId, itemId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    orderId: [orderId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/orders/", "/items/", ""], ["/orders/", "/items/", ""])), mapped.orderId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderItemResponse_1.getOrderItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param id              Order Id
     * @param request         Update Order Model
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.closeOrder = function (id, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    id: [id, (0, schema_1.string)()],
                    request: [request, updateOrderStatusRequest_1.updateOrderStatusRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/orders/", "/closed"], ["/orders/", "/closed"])), mapped.id);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderResponse_1.getOrderResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new Order
     *
     * @param body            Request for creating an order
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.createOrder = function (body, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/orders');
                mapped = req.prepareArgs({
                    body: [body, createOrderRequest_1.createOrderRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.body);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderResponse_1.getOrderResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param orderId         Order Id
     * @param request         Order Item Model
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.createOrderItem = function (orderId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    orderId: [orderId, (0, schema_1.string)()],
                    request: [request, createOrderItemRequest_1.createOrderItemRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/orders/", "/items"], ["/orders/", "/items"])), mapped.orderId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderItemResponse_1.getOrderItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param orderId Order Id
     * @param itemId  Item Id
     * @return Response from the API call
     */
    OrdersController.prototype.getOrderItem = function (orderId, itemId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    orderId: [orderId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/orders/", "/items/", ""], ["/orders/", "/items/", ""])), mapped.orderId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderItemResponse_1.getOrderItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the metadata from an order
     *
     * @param orderId         The order id
     * @param request         Request for updating the order metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    OrdersController.prototype.updateOrderMetadata = function (orderId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    orderId: [orderId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/Orders/", "/metadata"], ["/Orders/", "/metadata"])), mapped.orderId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderResponse_1.getOrderResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets an order
     *
     * @param orderId  Order id
     * @return Response from the API call
     */
    OrdersController.prototype.getOrder = function (orderId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ orderId: [orderId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/orders/", ""], ["/orders/", ""])), mapped.orderId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getOrderResponse_1.getOrderResponseSchema, requestOptions)];
            });
        });
    };
    return OrdersController;
}(baseController_1.BaseController));
exports.OrdersController = OrdersController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8;
//# sourceMappingURL=ordersController.js.map