import {
  Vite
} from "./chunk-W6CJOSLQ.js";
import "./chunk-CFRBPZ4N.js";

// stubs/main.ts
import { getDirname } from "@poppinss/utils";
var stubsRoot = getDirname(import.meta.url);

// configure.ts
async function configure(command) {
  const codemods = await command.createCodemods();
  let shouldInstallPackages = command.parsedFlags.install;
  await codemods.makeUsingStub(stubsRoot, "config/vite.stub", {});
  await codemods.makeUsingStub(stubsRoot, "vite.config.stub", {});
  await codemods.makeUsingStub(stubsRoot, "js_entrypoint.stub", {});
  await codemods.updateRcFile((rcFile) => {
    rcFile.addProvider("@adonisjs/vite/vite_provider");
    rcFile.addMetaFile("public/**", false);
    rcFile.addAssemblerHook("onBuildStarting", "@adonisjs/vite/build_hook");
  });
  await codemods.registerMiddleware("server", [
    { path: "@adonisjs/vite/vite_middleware", position: "after" }
  ]);
  if (shouldInstallPackages === void 0) {
    shouldInstallPackages = await command.prompt.confirm('Do you want to install "vite"?');
  }
  if (shouldInstallPackages) {
    await codemods.installPackages([{ name: "vite", isDevDependency: true }]);
  } else {
    await codemods.listPackagesToInstall([{ name: "vite", isDevDependency: true }]);
  }
  const tsMorph = await import("ts-morph");
  const project = await codemods.getTsMorphProject();
  const adonisRcFile = project?.getSourceFile("adonisrc.ts");
  const defineConfigCall = adonisRcFile?.getDescendantsOfKind(tsMorph.SyntaxKind.CallExpression).find((statement) => statement.getExpression().getText() === "defineConfig");
  const configObject = defineConfigCall.getArguments()[0].asKindOrThrow(tsMorph.SyntaxKind.ObjectLiteralExpression);
  configObject.addPropertyAssignment({
    name: "assetsBundler",
    initializer: "false"
  });
  await adonisRcFile?.save();
}

// src/define_config.ts
import { join } from "node:path";
function defineConfig(config) {
  return {
    buildDirectory: "public/assets",
    assetsUrl: "/assets",
    manifestFile: config.buildDirectory ? join(config.buildDirectory, ".vite/manifest.json") : "public/assets/.vite/manifest.json",
    ...config
  };
}
export {
  Vite,
  configure,
  defineConfig,
  stubsRoot
};
//# sourceMappingURL=index.js.map