/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { CreateCancelSubscriptionRequest } from '../models/createCancelSubscriptionRequest';
import { CreateDiscountRequest } from '../models/createDiscountRequest';
import { CreateIncrementRequest } from '../models/createIncrementRequest';
import { CreateSubscriptionItemRequest } from '../models/createSubscriptionItemRequest';
import { CreateSubscriptionRequest } from '../models/createSubscriptionRequest';
import { CreateUsageRequest } from '../models/createUsageRequest';
import { GetDiscountResponse } from '../models/getDiscountResponse';
import { GetIncrementResponse } from '../models/getIncrementResponse';
import { GetPeriodResponse } from '../models/getPeriodResponse';
import { GetSubscriptionItemResponse } from '../models/getSubscriptionItemResponse';
import { GetSubscriptionResponse } from '../models/getSubscriptionResponse';
import { GetUsageReportResponse } from '../models/getUsageReportResponse';
import { GetUsageResponse } from '../models/getUsageResponse';
import { ListCyclesResponse } from '../models/listCyclesResponse';
import { ListDiscountsResponse } from '../models/listDiscountsResponse';
import { ListIncrementsResponse } from '../models/listIncrementsResponse';
import { ListSubscriptionItemsResponse } from '../models/listSubscriptionItemsResponse';
import { ListSubscriptionsResponse } from '../models/listSubscriptionsResponse';
import { ListUsagesResponse } from '../models/listUsagesResponse';
import { UpdateCurrentCycleEndDateRequest } from '../models/updateCurrentCycleEndDateRequest';
import { UpdateCurrentCycleStatusRequest } from '../models/updateCurrentCycleStatusRequest';
import { UpdateMetadataRequest } from '../models/updateMetadataRequest';
import { UpdateSubscriptionAffiliationIdRequest } from '../models/updateSubscriptionAffiliationIdRequest';
import { UpdateSubscriptionBillingDateRequest } from '../models/updateSubscriptionBillingDateRequest';
import { UpdateSubscriptionCardRequest } from '../models/updateSubscriptionCardRequest';
import { UpdateSubscriptionDueDaysRequest } from '../models/updateSubscriptionDueDaysRequest';
import { UpdateSubscriptionItemRequest } from '../models/updateSubscriptionItemRequest';
import { UpdateSubscriptionMinimumPriceRequest } from '../models/updateSubscriptionMinimumPriceRequest';
import { UpdateSubscriptionPaymentMethodRequest } from '../models/updateSubscriptionPaymentMethodRequest';
import { UpdateSubscriptionSplitRequest } from '../models/updateSubscriptionSplitRequest';
import { UpdateSubscriptionStartAtRequest } from '../models/updateSubscriptionStartAtRequest';
import { BaseController } from './baseController';
export declare class SubscriptionsController extends BaseController {
    /**
     * @param subscriptionId
     * @param idempotencyKey
     * @return Response from the API call
     */
    renewSubscription(subscriptionId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPeriodResponse>>;
    /**
     * Updates the credit card from a subscription
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for updating a card
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionCard(subscriptionId: string, request: UpdateSubscriptionCardRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Deletes a usage
     *
     * @param subscriptionId  The subscription id
     * @param itemId          The subscription item id
     * @param usageId         The usage id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteUsage(subscriptionId: string, itemId: string, usageId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetUsageResponse>>;
    /**
     * Creates a discount
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for creating a discount
     * @param idempotencyKey
     * @return Response from the API call
     */
    createDiscount(subscriptionId: string, request: CreateDiscountRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetDiscountResponse>>;
    /**
     * Create Usage
     *
     * @param subscriptionId  Subscription id
     * @param itemId          Item id
     * @param idempotencyKey
     * @return Response from the API call
     */
    createAnUsage(subscriptionId: string, itemId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetUsageResponse>>;
    /**
     * @param subscriptionId  Subscription Id
     * @param request         Request for updating the end date of the
     *                                                                  subscription current status
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateCurrentCycleStatus(subscriptionId: string, request: UpdateCurrentCycleStatusRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Deletes a discount
     *
     * @param subscriptionId  Subscription id
     * @param discountId      Discount Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteDiscount(subscriptionId: string, discountId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetDiscountResponse>>;
    /**
     * Get Subscription Items
     *
     * @param subscriptionId  The subscription id
     * @param page            Page number
     * @param size            Page size
     * @param name            The item name
     * @param code            Identification code in the client system
     * @param status          The item statis
     * @param description     The item description
     * @param createdSince    Filter for item's creation date start range
     * @param createdUntil    Filter for item's creation date end range
     * @return Response from the API call
     */
    getSubscriptionItems(subscriptionId: string, page?: number, size?: number, name?: string, code?: string, status?: string, description?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListSubscriptionItemsResponse>>;
    /**
     * Updates the payment method from a subscription
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for updating the paymentmethod
     *                                                                         from a subscription
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionPaymentMethod(subscriptionId: string, request: UpdateSubscriptionPaymentMethodRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Get Subscription Item
     *
     * @param subscriptionId  Subscription Id
     * @param itemId          Item id
     * @return Response from the API call
     */
    getSubscriptionItem(subscriptionId: string, itemId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionItemResponse>>;
    /**
     * Gets all subscriptions
     *
     * @param page               Page number
     * @param size               Page size
     * @param code               Filter for subscription's code
     * @param billingType        Filter for subscription's billing type
     * @param customerId         Filter for subscription's customer id
     * @param planId             Filter for subscription's plan id
     * @param cardId             Filter for subscription's card id
     * @param status             Filter for subscription's status
     * @param nextBillingSince   Filter for subscription's next billing date start range
     * @param nextBillingUntil   Filter for subscription's next billing date end range
     * @param createdSince       Filter for subscription's creation date start range
     * @param createdUntil       Filter for subscriptions creation date end range
     * @return Response from the API call
     */
    getSubscriptions(page?: number, size?: number, code?: string, billingType?: string, customerId?: string, planId?: string, cardId?: string, status?: string, nextBillingSince?: string, nextBillingUntil?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListSubscriptionsResponse>>;
    /**
     * Cancels a subscription
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for cancelling a subscription
     * @param idempotencyKey
     * @return Response from the API call
     */
    cancelSubscription(subscriptionId: string, request?: CreateCancelSubscriptionRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Creates a increment
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for creating a increment
     * @param idempotencyKey
     * @return Response from the API call
     */
    createIncrement(subscriptionId: string, request: CreateIncrementRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetIncrementResponse>>;
    /**
     * Creates a usage
     *
     * @param subscriptionId  Subscription Id
     * @param itemId          Item id
     * @param body            Request for creating a usage
     * @param idempotencyKey
     * @return Response from the API call
     */
    createUsage(subscriptionId: string, itemId: string, body: CreateUsageRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetUsageResponse>>;
    /**
     * @param subscriptionId  The subscription id
     * @param discountId
     * @return Response from the API call
     */
    getDiscountById(subscriptionId: string, discountId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetDiscountResponse>>;
    /**
     * Creates a new subscription
     *
     * @param body            Request for creating a subscription
     * @param idempotencyKey
     * @return Response from the API call
     */
    createSubscription(body: CreateSubscriptionRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * @param subscriptionId  The subscription Id
     * @param incrementId     The increment Id
     * @return Response from the API call
     */
    getIncrementById(subscriptionId: string, incrementId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetIncrementResponse>>;
    /**
     * @param subscriptionId
     * @param request         Request for updating a subscription
     *                                                                         affiliation id
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionAffiliationId(subscriptionId: string, request: UpdateSubscriptionAffiliationIdRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Updates the metadata from a subscription
     *
     * @param subscriptionId  The subscription id
     * @param request         Request for updating the subscrption metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionMetadata(subscriptionId: string, request: UpdateMetadataRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Deletes a increment
     *
     * @param subscriptionId  Subscription id
     * @param incrementId     Increment id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteIncrement(subscriptionId: string, incrementId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetIncrementResponse>>;
    /**
     * @param subscriptionId  Subscription Id
     * @param page            Page number
     * @param size            Page size
     * @return Response from the API call
     */
    getSubscriptionCycles(subscriptionId: string, page: string, size: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListCyclesResponse>>;
    /**
     * @param subscriptionId  The subscription id
     * @param page            Page number
     * @param size            Page size
     * @return Response from the API call
     */
    getDiscounts(subscriptionId: string, page: number, size: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListDiscountsResponse>>;
    /**
     * Updates the billing date from a subscription
     *
     * @param subscriptionId  The subscription id
     * @param request         Request for updating the subscription
     *                                                                       billing date
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionBillingDate(subscriptionId: string, request: UpdateSubscriptionBillingDateRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Deletes a subscription item
     *
     * @param subscriptionId       Subscription id
     * @param subscriptionItemId   Subscription item id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteSubscriptionItem(subscriptionId: string, subscriptionItemId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionItemResponse>>;
    /**
     * @param subscriptionId  The subscription id
     * @param page            Page number
     * @param size            Page size
     * @return Response from the API call
     */
    getIncrements(subscriptionId: string, page?: number, size?: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListIncrementsResponse>>;
    /**
     * Updates the boleto due days from a subscription
     *
     * @param subscriptionId  Subscription Id
     * @param request
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionDueDays(subscriptionId: string, request: UpdateSubscriptionDueDaysRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Updates the start at date from a subscription
     *
     * @param subscriptionId  The subscription id
     * @param request         Request for updating the subscription start
     *                                                                   date
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionStartAt(subscriptionId: string, request: UpdateSubscriptionStartAtRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Updates a subscription item
     *
     * @param subscriptionId  Subscription Id
     * @param itemId          Item id
     * @param body            Request for updating a subscription item
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionItem(subscriptionId: string, itemId: string, body: UpdateSubscriptionItemRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionItemResponse>>;
    /**
     * Creates a new Subscription item
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for creating a subscription item
     * @param idempotencyKey
     * @return Response from the API call
     */
    createSubscriptionItem(subscriptionId: string, request: CreateSubscriptionItemRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionItemResponse>>;
    /**
     * Gets a subscription
     *
     * @param subscriptionId  Subscription id
     * @return Response from the API call
     */
    getSubscription(subscriptionId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Lists all usages from a subscription item
     *
     * @param subscriptionId  The subscription id
     * @param itemId          The subscription item id
     * @param page            Page number
     * @param size            Page size
     * @param code            Identification code in the client system
     * @param group           Identification group in the client system
     * @param usedSince
     * @param usedUntil
     * @return Response from the API call
     */
    getUsages(subscriptionId: string, itemId: string, page?: number, size?: number, code?: string, group?: string, usedSince?: string, usedUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListUsagesResponse>>;
    /**
     * @param subscriptionId
     * @param request         Request for updating the end date of the
     *                                                                   current signature cycle
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateLatestPeriodEndAt(subscriptionId: string, request: UpdateCurrentCycleEndDateRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * Atualização do valor mínimo da assinatura
     *
     * @param subscriptionId  Subscription Id
     * @param request         Request da requisição com o valor mínimo
     *                                                                        que será configurado
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateSubscriptionMiniumPrice(subscriptionId: string, request: UpdateSubscriptionMinimumPriceRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
    /**
     * @param subscriptionId  The subscription id
     * @param cycleId
     * @return Response from the API call
     */
    getSubscriptionCycleById(subscriptionId: string, cycleId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPeriodResponse>>;
    /**
     * @param subscriptionId  The subscription Id
     * @param periodId        The period Id
     * @return Response from the API call
     */
    getUsageReport(subscriptionId: string, periodId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetUsageReportResponse>>;
    /**
     * @param id      Subscription's id
     * @param request
     * @return Response from the API call
     */
    updateSplitSubscription(id: string, request: UpdateSubscriptionSplitRequest, requestOptions?: RequestOptions): Promise<ApiResponse<GetSubscriptionResponse>>;
}
