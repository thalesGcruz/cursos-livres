"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.TokensController = void 0;
var tslib_1 = require("tslib");
var createTokenRequest_1 = require("../models/createTokenRequest");
var getTokenResponse_1 = require("../models/getTokenResponse");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var TokensController = /** @class */ (function (_super) {
    tslib_1.__extends(TokensController, _super);
    function TokensController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param publicKey       Public key
     * @param request         Request for creating a token
     * @param idempotencyKey
     * @return Response from the API call
     */
    TokensController.prototype.createToken = function (publicKey, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    publicKey: [publicKey, (0, schema_1.string)()],
                    request: [request, createTokenRequest_1.createTokenRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/tokens?appId=", ""], ["/tokens?appId=", ""])), mapped.publicKey);
                req.authenticate(false);
                return [2 /*return*/, req.callAsJson(getTokenResponse_1.getTokenResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets a token from its id
     *
     * @param id         Token id
     * @param publicKey  Public key
     * @return Response from the API call
     */
    TokensController.prototype.getToken = function (id, publicKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    id: [id, (0, schema_1.string)()],
                    publicKey: [publicKey, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/tokens/", "?appId=", ""], ["/tokens/", "?appId=", ""])), mapped.id, mapped.publicKey);
                req.authenticate(false);
                return [2 /*return*/, req.callAsJson(getTokenResponse_1.getTokenResponseSchema, requestOptions)];
            });
        });
    };
    return TokensController;
}(baseController_1.BaseController));
exports.TokensController = TokensController;
var templateObject_1, templateObject_2;
//# sourceMappingURL=tokensController.js.map