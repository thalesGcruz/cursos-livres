"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.RecipientsController = void 0;
var tslib_1 = require("tslib");
var createAnticipationRequest_1 = require("../models/createAnticipationRequest");
var createKYCLinkResponse_1 = require("../models/createKYCLinkResponse");
var createRecipientRequest_1 = require("../models/createRecipientRequest");
var createTransferRequest_1 = require("../models/createTransferRequest");
var createWithdrawRequest_1 = require("../models/createWithdrawRequest");
var getAnticipationLimitResponse_1 = require("../models/getAnticipationLimitResponse");
var getAnticipationResponse_1 = require("../models/getAnticipationResponse");
var getBalanceResponse_1 = require("../models/getBalanceResponse");
var getRecipientResponse_1 = require("../models/getRecipientResponse");
var getTransferResponse_1 = require("../models/getTransferResponse");
var getWithdrawResponse_1 = require("../models/getWithdrawResponse");
var listAnticipationResponse_1 = require("../models/listAnticipationResponse");
var listRecipientResponse_1 = require("../models/listRecipientResponse");
var listTransferResponse_1 = require("../models/listTransferResponse");
var listWithdrawals_1 = require("../models/listWithdrawals");
var updateAutomaticAnticipationSettingsRequest_1 = require("../models/updateAutomaticAnticipationSettingsRequest");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var updateRecipientBankAccountRequest_1 = require("../models/updateRecipientBankAccountRequest");
var updateRecipientRequest_1 = require("../models/updateRecipientRequest");
var updateTransferSettingsRequest_1 = require("../models/updateTransferSettingsRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var RecipientsController = /** @class */ (function (_super) {
    tslib_1.__extends(RecipientsController, _super);
    function RecipientsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Updates a recipient
     *
     * @param recipientId     Recipient id
     * @param request         Recipient data
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.updateRecipient = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, updateRecipientRequest_1.updateRecipientRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/recipients/", ""], ["/recipients/", ""])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates an anticipation
     *
     * @param recipientId     Recipient id
     * @param request         Anticipation data
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.createAnticipation = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, createAnticipationRequest_1.createAnticipationRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/recipients/", "/anticipations"], ["/recipients/", "/anticipations"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAnticipationResponse_1.getAnticipationResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets the anticipation limits for a recipient
     *
     * @param recipientId  Recipient id
     * @param timeframe    Timeframe
     * @param paymentDate  Anticipation payment date
     * @return Response from the API call
     */
    RecipientsController.prototype.getAnticipationLimits = function (recipientId, timeframe, paymentDate, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    timeframe: [timeframe, (0, schema_1.string)()],
                    paymentDate: [paymentDate, (0, schema_1.string)()]
                });
                req.query('timeframe', mapped.timeframe);
                req.query('payment_date', mapped.paymentDate);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/recipients/", "/anticipation_limits"], ["/recipients/", "/anticipation_limits"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAnticipationLimitResponse_1.getAnticipationLimitResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Retrieves paginated recipients information
     *
     * @param page Page number
     * @param size Page size
     * @return Response from the API call
     */
    RecipientsController.prototype.getRecipients = function (page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/recipients');
                mapped = req.prepareArgs({
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listRecipientResponse_1.listRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param recipientId
     * @param withdrawalId
     * @return Response from the API call
     */
    RecipientsController.prototype.getWithdrawById = function (recipientId, withdrawalId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    withdrawalId: [withdrawalId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/recipients/", "/withdrawals/", ""], ["/recipients/", "/withdrawals/", ""])), mapped.recipientId, mapped.withdrawalId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getWithdrawResponse_1.getWithdrawResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the default bank account from a recipient
     *
     * @param recipientId     Recipient id
     * @param request         Bank account data
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.updateRecipientDefaultBankAccount = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, updateRecipientBankAccountRequest_1.updateRecipientBankAccountRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/recipients/", "/default-bank-account"], ["/recipients/", "/default-bank-account"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates recipient metadata
     *
     * @param recipientId     Recipient id
     * @param request         Metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.updateRecipientMetadata = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/recipients/", "/metadata"], ["/recipients/", "/metadata"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets a paginated list of transfers for the recipient
     *
     * @param recipientId   Recipient id
     * @param page          Page number
     * @param size          Page size
     * @param status        Filter for transfer status
     * @param createdSince  Filter for start range of transfer creation date
     * @param createdUntil  Filter for end range of transfer creation date
     * @return Response from the API call
     */
    RecipientsController.prototype.getTransfers = function (recipientId, page, size, status, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('status', mapped.status);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/recipients/", "/transfers"], ["/recipients/", "/transfers"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listTransferResponse_1.listTransferResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets a transfer
     *
     * @param recipientId  Recipient id
     * @param transferId   Transfer id
     * @return Response from the API call
     */
    RecipientsController.prototype.getTransfer = function (recipientId, transferId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    transferId: [transferId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/recipients/", "/transfers/", ""], ["/recipients/", "/transfers/", ""])), mapped.recipientId, mapped.transferId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getTransferResponse_1.getTransferResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param recipientId
     * @param request
     * @return Response from the API call
     */
    RecipientsController.prototype.createWithdraw = function (recipientId, request, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, createWithdrawRequest_1.createWithdrawRequestSchema]
                });
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject(["/recipients/", "/withdrawals"], ["/recipients/", "/withdrawals"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getWithdrawResponse_1.getWithdrawResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates recipient metadata
     *
     * @param recipientId     Recipient id
     * @param request         Metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.updateAutomaticAnticipationSettings = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, updateAutomaticAnticipationSettingsRequest_1.updateAutomaticAnticipationSettingsRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_10 || (templateObject_10 = tslib_1.__makeTemplateObject(["/recipients/", "/automatic-anticipation-settings"], ["/recipients/", "/automatic-anticipation-settings"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets an anticipation
     *
     * @param recipientId     Recipient id
     * @param anticipationId  Anticipation id
     * @return Response from the API call
     */
    RecipientsController.prototype.getAnticipation = function (recipientId, anticipationId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    anticipationId: [anticipationId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_11 || (templateObject_11 = tslib_1.__makeTemplateObject(["/recipients/", "/anticipations/", ""], ["/recipients/", "/anticipations/", ""])), mapped.recipientId, mapped.anticipationId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAnticipationResponse_1.getAnticipationResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param recipientId     Recipient Identificator
     * @param request
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.updateRecipientTransferSettings = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, updateTransferSettingsRequest_1.updateTransferSettingsRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_12 || (templateObject_12 = tslib_1.__makeTemplateObject(["/recipients/", "/transfer-settings"], ["/recipients/", "/transfer-settings"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Retrieves a paginated list of anticipations from a recipient
     *
     * @param recipientId        Recipient id
     * @param page               Page number
     * @param size               Page size
     * @param status             Filter for anticipation status
     * @param timeframe          Filter for anticipation timeframe
     * @param paymentDateSince   Filter for start range for anticipation payment date
     * @param paymentDateUntil   Filter for end range for anticipation payment date
     * @param createdSince       Filter for start range for anticipation creation date
     * @param createdUntil       Filter for end range for anticipation creation date
     * @return Response from the API call
     */
    RecipientsController.prototype.getAnticipations = function (recipientId, page, size, status, timeframe, paymentDateSince, paymentDateUntil, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    timeframe: [timeframe, (0, schema_1.optional)((0, schema_1.string)())],
                    paymentDateSince: [paymentDateSince, (0, schema_1.optional)((0, schema_1.string)())],
                    paymentDateUntil: [paymentDateUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('status', mapped.status);
                req.query('timeframe', mapped.timeframe);
                req.query('payment_date_since', mapped.paymentDateSince);
                req.query('payment_date_until', mapped.paymentDateUntil);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.appendTemplatePath(templateObject_13 || (templateObject_13 = tslib_1.__makeTemplateObject(["/recipients/", "/anticipations"], ["/recipients/", "/anticipations"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listAnticipationResponse_1.listAnticipationResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Retrieves recipient information
     *
     * @param recipientId  Recipiend id
     * @return Response from the API call
     */
    RecipientsController.prototype.getRecipient = function (recipientId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ recipientId: [recipientId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_14 || (templateObject_14 = tslib_1.__makeTemplateObject(["/recipients/", ""], ["/recipients/", ""])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get balance information for a recipient
     *
     * @param recipientId  Recipient id
     * @return Response from the API call
     */
    RecipientsController.prototype.getBalance = function (recipientId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ recipientId: [recipientId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_15 || (templateObject_15 = tslib_1.__makeTemplateObject(["/recipients/", "/balance"], ["/recipients/", "/balance"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getBalanceResponse_1.getBalanceResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets a paginated list of transfers for the recipient
     *
     * @param recipientId
     * @param page
     * @param size
     * @param status
     * @param createdSince
     * @param createdUntil
     * @return Response from the API call
     */
    RecipientsController.prototype.getWithdrawals = function (recipientId, page, size, status, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('status', mapped.status);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.appendTemplatePath(templateObject_16 || (templateObject_16 = tslib_1.__makeTemplateObject(["/recipients/", "/withdrawals"], ["/recipients/", "/withdrawals"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listWithdrawals_1.listWithdrawalsSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a transfer for a recipient
     *
     * @param recipientId     Recipient Id
     * @param request         Transfer data
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.createTransfer = function (recipientId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    recipientId: [recipientId, (0, schema_1.string)()],
                    request: [request, createTransferRequest_1.createTransferRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_17 || (templateObject_17 = tslib_1.__makeTemplateObject(["/recipients/", "/transfers"], ["/recipients/", "/transfers"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getTransferResponse_1.getTransferResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new recipient
     *
     * @param request         Recipient data
     * @param idempotencyKey
     * @return Response from the API call
     */
    RecipientsController.prototype.createRecipient = function (request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/recipients');
                mapped = req.prepareArgs({
                    request: [request, createRecipientRequest_1.createRecipientRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Retrieves recipient information
     *
     * @param code Recipient code
     * @return Response from the API call
     */
    RecipientsController.prototype.getRecipientByCode = function (code, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ code: [code, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_18 || (templateObject_18 = tslib_1.__makeTemplateObject(["/recipients/", ""], ["/recipients/", ""])), mapped.code);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @return Response from the API call
     */
    RecipientsController.prototype.getDefaultRecipient = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/recipients/default');
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getRecipientResponse_1.getRecipientResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Create a KYC link
     *
     * @param recipientId  Recipient id
     * @return Response from the API call
     */
    RecipientsController.prototype.createKYCLink = function (recipientId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({ recipientId: [recipientId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_19 || (templateObject_19 = tslib_1.__makeTemplateObject(["/recipients/", "/kyc_link"], ["/recipients/", "/kyc_link"])), mapped.recipientId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(createKYCLinkResponse_1.createKYCLinkResponseSchema, requestOptions)];
            });
        });
    };
    return RecipientsController;
}(baseController_1.BaseController));
exports.RecipientsController = RecipientsController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19;
//# sourceMappingURL=recipientsController.js.map