/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { CreateAnticipationRequest } from '../models/createAnticipationRequest';
import { CreateKYCLinkResponse } from '../models/createKYCLinkResponse';
import { CreateRecipientRequest } from '../models/createRecipientRequest';
import { CreateTransferRequest } from '../models/createTransferRequest';
import { CreateWithdrawRequest } from '../models/createWithdrawRequest';
import { GetAnticipationLimitResponse } from '../models/getAnticipationLimitResponse';
import { GetAnticipationResponse } from '../models/getAnticipationResponse';
import { GetBalanceResponse } from '../models/getBalanceResponse';
import { GetRecipientResponse } from '../models/getRecipientResponse';
import { GetTransferResponse } from '../models/getTransferResponse';
import { GetWithdrawResponse } from '../models/getWithdrawResponse';
import { ListAnticipationResponse } from '../models/listAnticipationResponse';
import { ListRecipientResponse } from '../models/listRecipientResponse';
import { ListTransferResponse } from '../models/listTransferResponse';
import { ListWithdrawals } from '../models/listWithdrawals';
import { UpdateAutomaticAnticipationSettingsRequest } from '../models/updateAutomaticAnticipationSettingsRequest';
import { UpdateMetadataRequest } from '../models/updateMetadataRequest';
import { UpdateRecipientBankAccountRequest } from '../models/updateRecipientBankAccountRequest';
import { UpdateRecipientRequest } from '../models/updateRecipientRequest';
import { UpdateTransferSettingsRequest } from '../models/updateTransferSettingsRequest';
import { BaseController } from './baseController';
export declare class RecipientsController extends BaseController {
    /**
     * Updates a recipient
     *
     * @param recipientId     Recipient id
     * @param request         Recipient data
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateRecipient(recipientId: string, request: UpdateRecipientRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Creates an anticipation
     *
     * @param recipientId     Recipient id
     * @param request         Anticipation data
     * @param idempotencyKey
     * @return Response from the API call
     */
    createAnticipation(recipientId: string, request: CreateAnticipationRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAnticipationResponse>>;
    /**
     * Gets the anticipation limits for a recipient
     *
     * @param recipientId  Recipient id
     * @param timeframe    Timeframe
     * @param paymentDate  Anticipation payment date
     * @return Response from the API call
     */
    getAnticipationLimits(recipientId: string, timeframe: string, paymentDate: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAnticipationLimitResponse>>;
    /**
     * Retrieves paginated recipients information
     *
     * @param page Page number
     * @param size Page size
     * @return Response from the API call
     */
    getRecipients(page?: number, size?: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListRecipientResponse>>;
    /**
     * @param recipientId
     * @param withdrawalId
     * @return Response from the API call
     */
    getWithdrawById(recipientId: string, withdrawalId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetWithdrawResponse>>;
    /**
     * Updates the default bank account from a recipient
     *
     * @param recipientId     Recipient id
     * @param request         Bank account data
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateRecipientDefaultBankAccount(recipientId: string, request: UpdateRecipientBankAccountRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Updates recipient metadata
     *
     * @param recipientId     Recipient id
     * @param request         Metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateRecipientMetadata(recipientId: string, request: UpdateMetadataRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Gets a paginated list of transfers for the recipient
     *
     * @param recipientId   Recipient id
     * @param page          Page number
     * @param size          Page size
     * @param status        Filter for transfer status
     * @param createdSince  Filter for start range of transfer creation date
     * @param createdUntil  Filter for end range of transfer creation date
     * @return Response from the API call
     */
    getTransfers(recipientId: string, page?: number, size?: number, status?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListTransferResponse>>;
    /**
     * Gets a transfer
     *
     * @param recipientId  Recipient id
     * @param transferId   Transfer id
     * @return Response from the API call
     */
    getTransfer(recipientId: string, transferId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetTransferResponse>>;
    /**
     * @param recipientId
     * @param request
     * @return Response from the API call
     */
    createWithdraw(recipientId: string, request: CreateWithdrawRequest, requestOptions?: RequestOptions): Promise<ApiResponse<GetWithdrawResponse>>;
    /**
     * Updates recipient metadata
     *
     * @param recipientId     Recipient id
     * @param request         Metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateAutomaticAnticipationSettings(recipientId: string, request: UpdateAutomaticAnticipationSettingsRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Gets an anticipation
     *
     * @param recipientId     Recipient id
     * @param anticipationId  Anticipation id
     * @return Response from the API call
     */
    getAnticipation(recipientId: string, anticipationId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAnticipationResponse>>;
    /**
     * @param recipientId     Recipient Identificator
     * @param request
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateRecipientTransferSettings(recipientId: string, request: UpdateTransferSettingsRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Retrieves a paginated list of anticipations from a recipient
     *
     * @param recipientId        Recipient id
     * @param page               Page number
     * @param size               Page size
     * @param status             Filter for anticipation status
     * @param timeframe          Filter for anticipation timeframe
     * @param paymentDateSince   Filter for start range for anticipation payment date
     * @param paymentDateUntil   Filter for end range for anticipation payment date
     * @param createdSince       Filter for start range for anticipation creation date
     * @param createdUntil       Filter for end range for anticipation creation date
     * @return Response from the API call
     */
    getAnticipations(recipientId: string, page?: number, size?: number, status?: string, timeframe?: string, paymentDateSince?: string, paymentDateUntil?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListAnticipationResponse>>;
    /**
     * Retrieves recipient information
     *
     * @param recipientId  Recipiend id
     * @return Response from the API call
     */
    getRecipient(recipientId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Get balance information for a recipient
     *
     * @param recipientId  Recipient id
     * @return Response from the API call
     */
    getBalance(recipientId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetBalanceResponse>>;
    /**
     * Gets a paginated list of transfers for the recipient
     *
     * @param recipientId
     * @param page
     * @param size
     * @param status
     * @param createdSince
     * @param createdUntil
     * @return Response from the API call
     */
    getWithdrawals(recipientId: string, page?: number, size?: number, status?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListWithdrawals>>;
    /**
     * Creates a transfer for a recipient
     *
     * @param recipientId     Recipient Id
     * @param request         Transfer data
     * @param idempotencyKey
     * @return Response from the API call
     */
    createTransfer(recipientId: string, request: CreateTransferRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetTransferResponse>>;
    /**
     * Creates a new recipient
     *
     * @param request         Recipient data
     * @param idempotencyKey
     * @return Response from the API call
     */
    createRecipient(request: CreateRecipientRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Retrieves recipient information
     *
     * @param code Recipient code
     * @return Response from the API call
     */
    getRecipientByCode(code: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * @return Response from the API call
     */
    getDefaultRecipient(requestOptions?: RequestOptions): Promise<ApiResponse<GetRecipientResponse>>;
    /**
     * Create a KYC link
     *
     * @param recipientId  Recipient id
     * @return Response from the API call
     */
    createKYCLink(recipientId: string, requestOptions?: RequestOptions): Promise<ApiResponse<CreateKYCLinkResponse>>;
}
