{"version":3,"sources":["../index.ts"],"sourcesContent":["/*\n * @poppinss/macroable\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Adds capabilities for extending the class from outside-in, in the form\n * of macros and getters.\n */\nexport default abstract class Macroable {\n  /**\n   *\n   * Macros are standard properties that gets added to the class prototype.\n   *\n   * ```ts\n   * MyClass.macro('foo', 'bar')\n   * ```\n   */\n  static macro<T extends { new (...args: any[]): any }, K extends keyof InstanceType<T>>(\n    this: T,\n    name: K,\n    value: InstanceType<T>[K]\n  ): void {\n    this.prototype[name] = value\n  }\n\n  /**\n   *\n   * Getters are added to the class prototype using the Object.defineProperty.\n   *\n   * ```ts\n   * MyClass.getter('foo', function foo () {\n   *   return 'bar'\n   * })\n   * ```\n   *\n   * You can add a singleton getter by enabling the `singleton` flag.\n   *\n   * ```ts\n   * const singleton = true\n   *\n   * MyClass.getter('foo', function foo () {\n   *   return 'bar'\n   * }, singleton)\n   * ```\n   */\n  static getter<T extends { new (...args: any[]): any }, K extends keyof InstanceType<T>>(\n    this: T,\n    name: K,\n    accumulator: () => InstanceType<T>[K],\n    singleton: boolean = false\n  ): void {\n    Object.defineProperty(this.prototype, name, {\n      get() {\n        const value = accumulator.call(this)\n\n        if (singleton) {\n          Object.defineProperty(this, name, {\n            configurable: false,\n            enumerable: false,\n            value: value,\n            writable: false,\n          })\n        }\n\n        return value\n      },\n      configurable: true,\n      enumerable: false,\n    })\n  }\n}\n"],"mappings":";AAaA,IAA8B,YAA9B,MAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAStC,OAAO,MAEL,MACA,OACM;AACN,SAAK,UAAU,IAAI,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAO,OAEL,MACA,aACA,YAAqB,OACf;AACN,WAAO,eAAe,KAAK,WAAW,MAAM;AAAA,MAC1C,MAAM;AACJ,cAAM,QAAQ,YAAY,KAAK,IAAI;AAEnC,YAAI,WAAW;AACb,iBAAO,eAAe,MAAM,MAAM;AAAA,YAChC,cAAc;AAAA,YACd,YAAY;AAAA,YACZ;AAAA,YACA,UAAU;AAAA,UACZ,CAAC;AAAA,QACH;AAEA,eAAO;AAAA,MACT;AAAA,MACA,cAAc;AAAA,MACd,YAAY;AAAA,IACd,CAAC;AAAA,EACH;AACF;","names":[]}