/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { array, boolean, dict, lazy, nullable, object, optional, string, } from '../schema';
import { createAntifraudRequestSchema, } from './createAntifraudRequest';
import { createCustomerRequestSchema, } from './createCustomerRequest';
import { createDeviceRequestSchema, } from './createDeviceRequest';
import { createLocationRequestSchema, } from './createLocationRequest';
import { createOrderItemRequestSchema, } from './createOrderItemRequest';
import { createPaymentRequestSchema, } from './createPaymentRequest';
import { createShippingRequestSchema, } from './createShippingRequest';
import { createSubMerchantRequestSchema, } from './createSubMerchantRequest';
export const createOrderRequestSchema = object({
    items: ['items', array(lazy(() => createOrderItemRequestSchema))],
    customer: ['customer', lazy(() => createCustomerRequestSchema)],
    payments: ['payments', array(lazy(() => createPaymentRequestSchema))],
    code: ['code', string()],
    customerId: ['customer_id', optional(nullable(string()))],
    shipping: ['shipping', optional(lazy(() => createShippingRequestSchema))],
    metadata: ['metadata', optional(nullable(dict(string())))],
    antifraudEnabled: ['antifraud_enabled', optional(boolean())],
    ip: ['ip', optional(string())],
    sessionId: ['session_id', optional(string())],
    location: ['location', optional(lazy(() => createLocationRequestSchema))],
    device: ['device', optional(lazy(() => createDeviceRequestSchema))],
    closed: ['closed', boolean()],
    currency: ['currency', optional(string())],
    antifraud: ['antifraud', optional(lazy(() => createAntifraudRequestSchema))],
    submerchant: [
        'submerchant',
        optional(lazy(() => createSubMerchantRequestSchema)),
    ],
});
//# sourceMappingURL=createOrderRequest.js.map