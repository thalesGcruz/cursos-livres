import {
  ViteMiddleware
} from "../chunk-G4LGE4JY.js";
import {
  Vite
} from "../chunk-W6CJOSLQ.js";
import "../chunk-CFRBPZ4N.js";

// providers/vite_provider.ts
var ViteProvider = class {
  constructor(app) {
    this.app = app;
    const env = this.app.getEnvironment();
    this.#shouldRunVite = (this.app.inDev || this.app.inTest) && (env === "web" || env === "test");
  }
  #shouldRunVite;
  /**
   * Registers edge plugin when edge is installed
   */
  async registerEdgePlugin() {
    if (this.app.usingEdgeJS) {
      const edge = await import("edge.js");
      const vite = await this.app.container.make("vite");
      const { edgePluginVite } = await import("../src/plugins/edge.js");
      edge.default.use(edgePluginVite(vite));
    }
  }
  /**
   * Registers CSP keywords when @adonisjs/shield is installed
   */
  async registerShieldKeywords() {
    let cspKeywords = null;
    try {
      const shieldExports = await import("@adonisjs/shield");
      cspKeywords = shieldExports.cspKeywords;
    } catch {
    }
    if (!cspKeywords)
      return;
    const vite = await this.app.container.make("vite");
    cspKeywords.register("@viteUrl", function() {
      const assetsURL = vite.assetsUrl();
      if (!assetsURL || !assetsURL.startsWith("http://") || assetsURL.startsWith("https://")) {
        return "";
      }
      return assetsURL;
    });
  }
  /**
   * Register Vite bindings
   */
  register() {
    const config = this.app.config.get("vite");
    const vite = new Vite(this.#shouldRunVite, config);
    this.app.container.bind("vite", () => vite);
    this.app.container.singleton(ViteMiddleware, () => new ViteMiddleware(vite));
  }
  /**
   * - Register edge tags
   * - Start Vite server when running in development or test
   */
  async boot() {
    await this.registerEdgePlugin();
    if (!this.#shouldRunVite)
      return;
    const vite = await this.app.container.make("vite");
    await vite.createDevServer();
  }
  /**
   * Stop Vite server when running in development or test
   */
  async shutdown() {
    if (!this.#shouldRunVite)
      return;
    const vite = await this.app.container.make("vite");
    await vite.stopDevServer();
  }
};
export {
  ViteProvider as default
};
//# sourceMappingURL=vite_provider.js.map