/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { CreateAccessTokenRequest } from '../models/createAccessTokenRequest';
import { CreateAddressRequest } from '../models/createAddressRequest';
import { CreateCardRequest } from '../models/createCardRequest';
import { CreateCustomerRequest } from '../models/createCustomerRequest';
import { GetAccessTokenResponse } from '../models/getAccessTokenResponse';
import { GetAddressResponse } from '../models/getAddressResponse';
import { GetCardResponse } from '../models/getCardResponse';
import { GetCustomerResponse } from '../models/getCustomerResponse';
import { ListAccessTokensResponse } from '../models/listAccessTokensResponse';
import { ListAddressesResponse } from '../models/listAddressesResponse';
import { ListCardsResponse } from '../models/listCardsResponse';
import { ListCustomersResponse } from '../models/listCustomersResponse';
import { UpdateAddressRequest } from '../models/updateAddressRequest';
import { UpdateCardRequest } from '../models/updateCardRequest';
import { UpdateCustomerRequest } from '../models/updateCustomerRequest';
import { UpdateMetadataRequest } from '../models/updateMetadataRequest';
import { BaseController } from './baseController';
export declare class CustomersController extends BaseController {
    /**
     * Updates a card
     *
     * @param customerId      Customer Id
     * @param cardId          Card id
     * @param request         Request for updating a card
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateCard(customerId: string, cardId: string, request: UpdateCardRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCardResponse>>;
    /**
     * Updates an address
     *
     * @param customerId      Customer Id
     * @param addressId       Address Id
     * @param request         Request for updating an address
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateAddress(customerId: string, addressId: string, request: UpdateAddressRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAddressResponse>>;
    /**
     * Delete a customer's access token
     *
     * @param customerId      Customer Id
     * @param tokenId         Token Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteAccessToken(customerId: string, tokenId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAccessTokenResponse>>;
    /**
     * Creates a new customer
     *
     * @param request         Request for creating a customer
     * @param idempotencyKey
     * @return Response from the API call
     */
    createCustomer(request: CreateCustomerRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCustomerResponse>>;
    /**
     * Creates a new address for a customer
     *
     * @param customerId      Customer Id
     * @param request         Request for creating an address
     * @param idempotencyKey
     * @return Response from the API call
     */
    createAddress(customerId: string, request: CreateAddressRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAddressResponse>>;
    /**
     * Delete a Customer's access tokens
     *
     * @param customerId  Customer Id
     * @return Response from the API call
     */
    deleteAccessTokens(customerId: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListAccessTokensResponse>>;
    /**
     * Get a customer's address
     *
     * @param customerId  Customer id
     * @param addressId   Address Id
     * @return Response from the API call
     */
    getAddress(customerId: string, addressId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAddressResponse>>;
    /**
     * Delete a Customer's address
     *
     * @param customerId      Customer Id
     * @param addressId       Address Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteAddress(customerId: string, addressId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAddressResponse>>;
    /**
     * Creates a new card for a customer
     *
     * @param customerId      Customer id
     * @param request         Request for creating a card
     * @param idempotencyKey
     * @return Response from the API call
     */
    createCard(customerId: string, request: CreateCardRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCardResponse>>;
    /**
     * Get all Customers
     *
     * @param name     Name of the Customer
     * @param document Document of the Customer
     * @param page     Current page the the search
     * @param size     Quantity pages of the search
     * @param email    Customer's email
     * @param code     Customer's code
     * @return Response from the API call
     */
    getCustomers(name?: string, document?: string, page?: number, size?: number, email?: string, code?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListCustomersResponse>>;
    /**
     * Updates a customer
     *
     * @param customerId      Customer id
     * @param request         Request for updating a customer
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateCustomer(customerId: string, request: UpdateCustomerRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCustomerResponse>>;
    /**
     * Creates a access token for a customer
     *
     * @param customerId      Customer Id
     * @param request         Request for creating a access token
     * @param idempotencyKey
     * @return Response from the API call
     */
    createAccessToken(customerId: string, request: CreateAccessTokenRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAccessTokenResponse>>;
    /**
     * Get all access tokens from a customer
     *
     * @param customerId  Customer Id
     * @param page        Page number
     * @param size        Page size
     * @return Response from the API call
     */
    getAccessTokens(customerId: string, page?: number, size?: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListAccessTokensResponse>>;
    /**
     * Get all cards from a customer
     *
     * @param customerId  Customer Id
     * @param page        Page number
     * @param size        Page size
     * @return Response from the API call
     */
    getCards(customerId: string, page?: number, size?: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListCardsResponse>>;
    /**
     * Renew a card
     *
     * @param customerId      Customer id
     * @param cardId          Card Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    renewCard(customerId: string, cardId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCardResponse>>;
    /**
     * Get a Customer's access token
     *
     * @param customerId  Customer Id
     * @param tokenId     Token Id
     * @return Response from the API call
     */
    getAccessToken(customerId: string, tokenId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetAccessTokenResponse>>;
    /**
     * Updates the metadata a customer
     *
     * @param customerId      The customer id
     * @param request         Request for updating the customer metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateCustomerMetadata(customerId: string, request: UpdateMetadataRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCustomerResponse>>;
    /**
     * Delete a customer's card
     *
     * @param customerId      Customer Id
     * @param cardId          Card Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deleteCard(customerId: string, cardId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCardResponse>>;
    /**
     * Gets all adressess from a customer
     *
     * @param customerId  Customer id
     * @param page        Page number
     * @param size        Page size
     * @return Response from the API call
     */
    getAddresses(customerId: string, page?: number, size?: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListAddressesResponse>>;
    /**
     * Get a customer
     *
     * @param customerId  Customer Id
     * @return Response from the API call
     */
    getCustomer(customerId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCustomerResponse>>;
    /**
     * Get a customer's card
     *
     * @param customerId  Customer id
     * @param cardId      Card id
     * @return Response from the API call
     */
    getCard(customerId: string, cardId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetCardResponse>>;
}
