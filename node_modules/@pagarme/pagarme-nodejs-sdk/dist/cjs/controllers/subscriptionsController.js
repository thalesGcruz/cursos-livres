"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.SubscriptionsController = void 0;
var tslib_1 = require("tslib");
var createCancelSubscriptionRequest_1 = require("../models/createCancelSubscriptionRequest");
var createDiscountRequest_1 = require("../models/createDiscountRequest");
var createIncrementRequest_1 = require("../models/createIncrementRequest");
var createSubscriptionItemRequest_1 = require("../models/createSubscriptionItemRequest");
var createSubscriptionRequest_1 = require("../models/createSubscriptionRequest");
var createUsageRequest_1 = require("../models/createUsageRequest");
var getDiscountResponse_1 = require("../models/getDiscountResponse");
var getIncrementResponse_1 = require("../models/getIncrementResponse");
var getPeriodResponse_1 = require("../models/getPeriodResponse");
var getSubscriptionItemResponse_1 = require("../models/getSubscriptionItemResponse");
var getSubscriptionResponse_1 = require("../models/getSubscriptionResponse");
var getUsageReportResponse_1 = require("../models/getUsageReportResponse");
var getUsageResponse_1 = require("../models/getUsageResponse");
var listCyclesResponse_1 = require("../models/listCyclesResponse");
var listDiscountsResponse_1 = require("../models/listDiscountsResponse");
var listIncrementsResponse_1 = require("../models/listIncrementsResponse");
var listSubscriptionItemsResponse_1 = require("../models/listSubscriptionItemsResponse");
var listSubscriptionsResponse_1 = require("../models/listSubscriptionsResponse");
var listUsagesResponse_1 = require("../models/listUsagesResponse");
var updateCurrentCycleEndDateRequest_1 = require("../models/updateCurrentCycleEndDateRequest");
var updateCurrentCycleStatusRequest_1 = require("../models/updateCurrentCycleStatusRequest");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var updateSubscriptionAffiliationIdRequest_1 = require("../models/updateSubscriptionAffiliationIdRequest");
var updateSubscriptionBillingDateRequest_1 = require("../models/updateSubscriptionBillingDateRequest");
var updateSubscriptionCardRequest_1 = require("../models/updateSubscriptionCardRequest");
var updateSubscriptionDueDaysRequest_1 = require("../models/updateSubscriptionDueDaysRequest");
var updateSubscriptionItemRequest_1 = require("../models/updateSubscriptionItemRequest");
var updateSubscriptionMinimumPriceRequest_1 = require("../models/updateSubscriptionMinimumPriceRequest");
var updateSubscriptionPaymentMethodRequest_1 = require("../models/updateSubscriptionPaymentMethodRequest");
var updateSubscriptionSplitRequest_1 = require("../models/updateSubscriptionSplitRequest");
var updateSubscriptionStartAtRequest_1 = require("../models/updateSubscriptionStartAtRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var SubscriptionsController = /** @class */ (function (_super) {
    tslib_1.__extends(SubscriptionsController, _super);
    function SubscriptionsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param subscriptionId
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.renewSubscription = function (subscriptionId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/subscriptions/", "/cycles"], ["/subscriptions/", "/cycles"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPeriodResponse_1.getPeriodResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the credit card from a subscription
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for updating a card
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionCard = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionCardRequest_1.updateSubscriptionCardRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/subscriptions/", "/card"], ["/subscriptions/", "/card"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Deletes a usage
     *
     * @param subscriptionId  The subscription id
     * @param itemId          The subscription item id
     * @param usageId         The usage id
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.deleteUsage = function (subscriptionId, itemId, usageId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    usageId: [usageId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", "/usages/", ""], ["/subscriptions/", "/items/", "/usages/", ""])), mapped.subscriptionId, mapped.itemId, mapped.usageId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getUsageResponse_1.getUsageResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a discount
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for creating a discount
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.createDiscount = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, createDiscountRequest_1.createDiscountRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/subscriptions/", "/discounts"], ["/subscriptions/", "/discounts"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getDiscountResponse_1.getDiscountResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Create Usage
     *
     * @param subscriptionId  Subscription id
     * @param itemId          Item id
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.createAnUsage = function (subscriptionId, itemId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", "/usages"], ["/subscriptions/", "/items/", "/usages"])), mapped.subscriptionId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getUsageResponse_1.getUsageResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  Subscription Id
     * @param request         Request for updating the end date of the
     *                                                                  subscription current status
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateCurrentCycleStatus = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateCurrentCycleStatusRequest_1.updateCurrentCycleStatusRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/subscriptions/", "/cycle-status"], ["/subscriptions/", "/cycle-status"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Deletes a discount
     *
     * @param subscriptionId  Subscription id
     * @param discountId      Discount Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.deleteDiscount = function (subscriptionId, discountId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    discountId: [discountId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/subscriptions/", "/discounts/", ""], ["/subscriptions/", "/discounts/", ""])), mapped.subscriptionId, mapped.discountId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getDiscountResponse_1.getDiscountResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get Subscription Items
     *
     * @param subscriptionId  The subscription id
     * @param page            Page number
     * @param size            Page size
     * @param name            The item name
     * @param code            Identification code in the client system
     * @param status          The item statis
     * @param description     The item description
     * @param createdSince    Filter for item's creation date start range
     * @param createdUntil    Filter for item's creation date end range
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getSubscriptionItems = function (subscriptionId, page, size, name, code, status, description, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    name: [name, (0, schema_1.optional)((0, schema_1.string)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    description: [description, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('name', mapped.name);
                req.query('code', mapped.code);
                req.query('status', mapped.status);
                req.query('description', mapped.description);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items"], ["/subscriptions/", "/items"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listSubscriptionItemsResponse_1.listSubscriptionItemsResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the payment method from a subscription
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for updating the paymentmethod
     *                                                                         from a subscription
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionPaymentMethod = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionPaymentMethodRequest_1.updateSubscriptionPaymentMethodRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject(["/subscriptions/", "/payment-method"], ["/subscriptions/", "/payment-method"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get Subscription Item
     *
     * @param subscriptionId  Subscription Id
     * @param itemId          Item id
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getSubscriptionItem = function (subscriptionId, itemId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_10 || (templateObject_10 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", ""], ["/subscriptions/", "/items/", ""])), mapped.subscriptionId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionItemResponse_1.getSubscriptionItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets all subscriptions
     *
     * @param page               Page number
     * @param size               Page size
     * @param code               Filter for subscription's code
     * @param billingType        Filter for subscription's billing type
     * @param customerId         Filter for subscription's customer id
     * @param planId             Filter for subscription's plan id
     * @param cardId             Filter for subscription's card id
     * @param status             Filter for subscription's status
     * @param nextBillingSince   Filter for subscription's next billing date start range
     * @param nextBillingUntil   Filter for subscription's next billing date end range
     * @param createdSince       Filter for subscription's creation date start range
     * @param createdUntil       Filter for subscriptions creation date end range
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getSubscriptions = function (page, size, code, billingType, customerId, planId, cardId, status, nextBillingSince, nextBillingUntil, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/subscriptions');
                mapped = req.prepareArgs({
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())],
                    billingType: [billingType, (0, schema_1.optional)((0, schema_1.string)())],
                    customerId: [customerId, (0, schema_1.optional)((0, schema_1.string)())],
                    planId: [planId, (0, schema_1.optional)((0, schema_1.string)())],
                    cardId: [cardId, (0, schema_1.optional)((0, schema_1.string)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    nextBillingSince: [nextBillingSince, (0, schema_1.optional)((0, schema_1.string)())],
                    nextBillingUntil: [nextBillingUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('code', mapped.code);
                req.query('billing_type', mapped.billingType);
                req.query('customer_id', mapped.customerId);
                req.query('plan_id', mapped.planId);
                req.query('card_id', mapped.cardId);
                req.query('status', mapped.status);
                req.query('next_billing_since', mapped.nextBillingSince);
                req.query('next_billing_until', mapped.nextBillingUntil);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listSubscriptionsResponse_1.listSubscriptionsResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Cancels a subscription
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for cancelling a subscription
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.cancelSubscription = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, (0, schema_1.optional)(createCancelSubscriptionRequest_1.createCancelSubscriptionRequestSchema)],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_11 || (templateObject_11 = tslib_1.__makeTemplateObject(["/subscriptions/", ""], ["/subscriptions/", ""])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a increment
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for creating a increment
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.createIncrement = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, createIncrementRequest_1.createIncrementRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_12 || (templateObject_12 = tslib_1.__makeTemplateObject(["/subscriptions/", "/increments"], ["/subscriptions/", "/increments"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getIncrementResponse_1.getIncrementResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a usage
     *
     * @param subscriptionId  Subscription Id
     * @param itemId          Item id
     * @param body            Request for creating a usage
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.createUsage = function (subscriptionId, itemId, body, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    body: [body, createUsageRequest_1.createUsageRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_13 || (templateObject_13 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", "/usages"], ["/subscriptions/", "/items/", "/usages"])), mapped.subscriptionId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getUsageResponse_1.getUsageResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  The subscription id
     * @param discountId
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getDiscountById = function (subscriptionId, discountId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    discountId: [discountId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_14 || (templateObject_14 = tslib_1.__makeTemplateObject(["/subscriptions/", "/discounts/", ""], ["/subscriptions/", "/discounts/", ""])), mapped.subscriptionId, mapped.discountId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getDiscountResponse_1.getDiscountResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new subscription
     *
     * @param body            Request for creating a subscription
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.createSubscription = function (body, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/subscriptions');
                mapped = req.prepareArgs({
                    body: [body, createSubscriptionRequest_1.createSubscriptionRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.body);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  The subscription Id
     * @param incrementId     The increment Id
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getIncrementById = function (subscriptionId, incrementId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    incrementId: [incrementId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_15 || (templateObject_15 = tslib_1.__makeTemplateObject(["/subscriptions/", "/increments/", ""], ["/subscriptions/", "/increments/", ""])), mapped.subscriptionId, mapped.incrementId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getIncrementResponse_1.getIncrementResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId
     * @param request         Request for updating a subscription
     *                                                                         affiliation id
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionAffiliationId = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionAffiliationIdRequest_1.updateSubscriptionAffiliationIdRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_16 || (templateObject_16 = tslib_1.__makeTemplateObject(["/subscriptions/", "/gateway-affiliation-id"], ["/subscriptions/", "/gateway-affiliation-id"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the metadata from a subscription
     *
     * @param subscriptionId  The subscription id
     * @param request         Request for updating the subscrption metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionMetadata = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_17 || (templateObject_17 = tslib_1.__makeTemplateObject(["/Subscriptions/", "/metadata"], ["/Subscriptions/", "/metadata"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Deletes a increment
     *
     * @param subscriptionId  Subscription id
     * @param incrementId     Increment id
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.deleteIncrement = function (subscriptionId, incrementId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    incrementId: [incrementId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_18 || (templateObject_18 = tslib_1.__makeTemplateObject(["/subscriptions/", "/increments/", ""], ["/subscriptions/", "/increments/", ""])), mapped.subscriptionId, mapped.incrementId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getIncrementResponse_1.getIncrementResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  Subscription Id
     * @param page            Page number
     * @param size            Page size
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getSubscriptionCycles = function (subscriptionId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.string)()],
                    size: [size, (0, schema_1.string)()]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_19 || (templateObject_19 = tslib_1.__makeTemplateObject(["/subscriptions/", "/cycles"], ["/subscriptions/", "/cycles"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listCyclesResponse_1.listCyclesResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  The subscription id
     * @param page            Page number
     * @param size            Page size
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getDiscounts = function (subscriptionId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.number)()],
                    size: [size, (0, schema_1.number)()]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_20 || (templateObject_20 = tslib_1.__makeTemplateObject(["/subscriptions/", "/discounts/"], ["/subscriptions/", "/discounts/"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listDiscountsResponse_1.listDiscountsResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the billing date from a subscription
     *
     * @param subscriptionId  The subscription id
     * @param request         Request for updating the subscription
     *                                                                       billing date
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionBillingDate = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionBillingDateRequest_1.updateSubscriptionBillingDateRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_21 || (templateObject_21 = tslib_1.__makeTemplateObject(["/subscriptions/", "/billing-date"], ["/subscriptions/", "/billing-date"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Deletes a subscription item
     *
     * @param subscriptionId       Subscription id
     * @param subscriptionItemId   Subscription item id
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.deleteSubscriptionItem = function (subscriptionId, subscriptionItemId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    subscriptionItemId: [subscriptionItemId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_22 || (templateObject_22 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", ""], ["/subscriptions/", "/items/", ""])), mapped.subscriptionId, mapped.subscriptionItemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionItemResponse_1.getSubscriptionItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  The subscription id
     * @param page            Page number
     * @param size            Page size
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getIncrements = function (subscriptionId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_23 || (templateObject_23 = tslib_1.__makeTemplateObject(["/subscriptions/", "/increments/"], ["/subscriptions/", "/increments/"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listIncrementsResponse_1.listIncrementsResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the boleto due days from a subscription
     *
     * @param subscriptionId  Subscription Id
     * @param request
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionDueDays = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionDueDaysRequest_1.updateSubscriptionDueDaysRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_24 || (templateObject_24 = tslib_1.__makeTemplateObject(["/subscriptions/", "/boleto-due-days"], ["/subscriptions/", "/boleto-due-days"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the start at date from a subscription
     *
     * @param subscriptionId  The subscription id
     * @param request         Request for updating the subscription start
     *                                                                   date
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionStartAt = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionStartAtRequest_1.updateSubscriptionStartAtRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_25 || (templateObject_25 = tslib_1.__makeTemplateObject(["/subscriptions/", "/start-at"], ["/subscriptions/", "/start-at"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates a subscription item
     *
     * @param subscriptionId  Subscription Id
     * @param itemId          Item id
     * @param body            Request for updating a subscription item
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionItem = function (subscriptionId, itemId, body, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    body: [body, updateSubscriptionItemRequest_1.updateSubscriptionItemRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.body);
                req.appendTemplatePath(templateObject_26 || (templateObject_26 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", ""], ["/subscriptions/", "/items/", ""])), mapped.subscriptionId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionItemResponse_1.getSubscriptionItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new Subscription item
     *
     * @param subscriptionId  Subscription id
     * @param request         Request for creating a subscription item
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.createSubscriptionItem = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, createSubscriptionItemRequest_1.createSubscriptionItemRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_27 || (templateObject_27 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items"], ["/subscriptions/", "/items"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionItemResponse_1.getSubscriptionItemResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets a subscription
     *
     * @param subscriptionId  Subscription id
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getSubscription = function (subscriptionId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_28 || (templateObject_28 = tslib_1.__makeTemplateObject(["/subscriptions/", ""], ["/subscriptions/", ""])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Lists all usages from a subscription item
     *
     * @param subscriptionId  The subscription id
     * @param itemId          The subscription item id
     * @param page            Page number
     * @param size            Page size
     * @param code            Identification code in the client system
     * @param group           Identification group in the client system
     * @param usedSince
     * @param usedUntil
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getUsages = function (subscriptionId, itemId, page, size, code, group, usedSince, usedUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    itemId: [itemId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())],
                    group: [group, (0, schema_1.optional)((0, schema_1.string)())],
                    usedSince: [usedSince, (0, schema_1.optional)((0, schema_1.string)())],
                    usedUntil: [usedUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('code', mapped.code);
                req.query('group', mapped.group);
                req.query('used_since', mapped.usedSince);
                req.query('used_until', mapped.usedUntil);
                req.appendTemplatePath(templateObject_29 || (templateObject_29 = tslib_1.__makeTemplateObject(["/subscriptions/", "/items/", "/usages"], ["/subscriptions/", "/items/", "/usages"])), mapped.subscriptionId, mapped.itemId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listUsagesResponse_1.listUsagesResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId
     * @param request         Request for updating the end date of the
     *                                                                   current signature cycle
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateLatestPeriodEndAt = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateCurrentCycleEndDateRequest_1.updateCurrentCycleEndDateRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_30 || (templateObject_30 = tslib_1.__makeTemplateObject(["/subscriptions/", "/periods/latest/end-at"], ["/subscriptions/", "/periods/latest/end-at"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Atualização do valor mínimo da assinatura
     *
     * @param subscriptionId  Subscription Id
     * @param request         Request da requisição com o valor mínimo
     *                                                                        que será configurado
     * @param idempotencyKey
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSubscriptionMiniumPrice = function (subscriptionId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    request: [request, updateSubscriptionMinimumPriceRequest_1.updateSubscriptionMinimumPriceRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_31 || (templateObject_31 = tslib_1.__makeTemplateObject(["/subscriptions/", "/minimum_price"], ["/subscriptions/", "/minimum_price"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  The subscription id
     * @param cycleId
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getSubscriptionCycleById = function (subscriptionId, cycleId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    cycleId: [cycleId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_32 || (templateObject_32 = tslib_1.__makeTemplateObject(["/subscriptions/", "/cycles/", ""], ["/subscriptions/", "/cycles/", ""])), mapped.subscriptionId, mapped.cycleId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPeriodResponse_1.getPeriodResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  The subscription Id
     * @param periodId        The period Id
     * @return Response from the API call
     */
    SubscriptionsController.prototype.getUsageReport = function (subscriptionId, periodId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    periodId: [periodId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_33 || (templateObject_33 = tslib_1.__makeTemplateObject(["/subscriptions/", "/periods/", "/usages/report"], ["/subscriptions/", "/periods/", "/usages/report"])), mapped.subscriptionId, mapped.periodId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getUsageReportResponse_1.getUsageReportResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param id      Subscription's id
     * @param request
     * @return Response from the API call
     */
    SubscriptionsController.prototype.updateSplitSubscription = function (id, request, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    id: [id, (0, schema_1.string)()],
                    request: [request, updateSubscriptionSplitRequest_1.updateSubscriptionSplitRequestSchema]
                });
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_34 || (templateObject_34 = tslib_1.__makeTemplateObject(["/subscriptions/", "/split"], ["/subscriptions/", "/split"])), mapped.id);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getSubscriptionResponse_1.getSubscriptionResponseSchema, requestOptions)];
            });
        });
    };
    return SubscriptionsController;
}(baseController_1.BaseController));
exports.SubscriptionsController = SubscriptionsController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31, templateObject_32, templateObject_33, templateObject_34;
//# sourceMappingURL=subscriptionsController.js.map