/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { createTokenRequestSchema, } from '../models/createTokenRequest';
import { getTokenResponseSchema, } from '../models/getTokenResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';
export class TokensController extends BaseController {
    /**
     * @param publicKey       Public key
     * @param request         Request for creating a token
     * @param idempotencyKey
     * @return Response from the API call
     */
    async createToken(publicKey, request, idempotencyKey, requestOptions) {
        const req = this.createRequest('POST');
        const mapped = req.prepareArgs({
            publicKey: [publicKey, string()],
            request: [request, createTokenRequestSchema],
            idempotencyKey: [idempotencyKey, optional(string())],
        });
        req.header('idempotency-key', mapped.idempotencyKey);
        req.json(mapped.request);
        req.appendTemplatePath `/tokens?appId=${mapped.publicKey}`;
        req.authenticate(false);
        return req.callAsJson(getTokenResponseSchema, requestOptions);
    }
    /**
     * Gets a token from its id
     *
     * @param id         Token id
     * @param publicKey  Public key
     * @return Response from the API call
     */
    async getToken(id, publicKey, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({
            id: [id, string()],
            publicKey: [publicKey, string()],
        });
        req.appendTemplatePath `/tokens/${mapped.id}?appId=${mapped.publicKey}`;
        req.authenticate(false);
        return req.callAsJson(getTokenResponseSchema, requestOptions);
    }
}
//# sourceMappingURL=tokensController.js.map