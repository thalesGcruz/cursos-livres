"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.PayablesController = void 0;
var tslib_1 = require("tslib");
var getPayableResponse_1 = require("../models/getPayableResponse");
var listPayablesResponse_1 = require("../models/listPayablesResponse");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var PayablesController = /** @class */ (function (_super) {
    tslib_1.__extends(PayablesController, _super);
    function PayablesController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param type
     * @param splitId
     * @param bulkAnticipationId
     * @param installment
     * @param status
     * @param recipientId
     * @param amount
     * @param chargeId
     * @param paymentDateUntil
     * @param paymentDateSince
     * @param updatedUntil
     * @param updatedSince
     * @param createdUntil
     * @param createdSince
     * @param liquidationArrangementId
     * @param page
     * @param size
     * @param gatewayId
     * @return Response from the API call
     */
    PayablesController.prototype.getPayables = function (type, splitId, bulkAnticipationId, installment, status, recipientId, amount, chargeId, paymentDateUntil, paymentDateSince, updatedUntil, updatedSince, createdUntil, createdSince, liquidationArrangementId, page, size, gatewayId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/payables');
                mapped = req.prepareArgs({
                    type: [type, (0, schema_1.optional)((0, schema_1.string)())],
                    splitId: [splitId, (0, schema_1.optional)((0, schema_1.string)())],
                    bulkAnticipationId: [bulkAnticipationId, (0, schema_1.optional)((0, schema_1.string)())],
                    installment: [installment, (0, schema_1.optional)((0, schema_1.number)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    recipientId: [recipientId, (0, schema_1.optional)((0, schema_1.string)())],
                    amount: [amount, (0, schema_1.optional)((0, schema_1.number)())],
                    chargeId: [chargeId, (0, schema_1.optional)((0, schema_1.string)())],
                    paymentDateUntil: [paymentDateUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    paymentDateSince: [paymentDateSince, (0, schema_1.optional)((0, schema_1.string)())],
                    updatedUntil: [updatedUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    updatedSince: [updatedSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    liquidationArrangementId: [liquidationArrangementId, (0, schema_1.optional)((0, schema_1.string)())],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    gatewayId: [gatewayId, (0, schema_1.optional)((0, schema_1.bigint)())]
                });
                req.query('type', mapped.type);
                req.query('split_id', mapped.splitId);
                req.query('bulk_anticipation_id', mapped.bulkAnticipationId);
                req.query('installment', mapped.installment);
                req.query('status', mapped.status);
                req.query('recipient_id', mapped.recipientId);
                req.query('amount', mapped.amount);
                req.query('charge_id', mapped.chargeId);
                req.query('payment_date_until', mapped.paymentDateUntil);
                req.query('payment_date_since', mapped.paymentDateSince);
                req.query('updated_until', mapped.updatedUntil);
                req.query('updated_since', mapped.updatedSince);
                req.query('created_until', mapped.createdUntil);
                req.query('created_since', mapped.createdSince);
                req.query('liquidation_arrangement_id', mapped.liquidationArrangementId);
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('gateway_id', mapped.gatewayId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listPayablesResponse_1.listPayablesResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param id
     * @return Response from the API call
     */
    PayablesController.prototype.getPayableById = function (id, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ id: [id, (0, schema_1.bigint)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/payables/", ""], ["/payables/", ""])), mapped.id);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getPayableResponse_1.getPayableResponseSchema, requestOptions)];
            });
        });
    };
    return PayablesController;
}(baseController_1.BaseController));
exports.PayablesController = PayablesController;
var templateObject_1;
//# sourceMappingURL=payablesController.js.map