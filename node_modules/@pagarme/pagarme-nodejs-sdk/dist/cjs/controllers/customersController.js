"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.CustomersController = void 0;
var tslib_1 = require("tslib");
var createAccessTokenRequest_1 = require("../models/createAccessTokenRequest");
var createAddressRequest_1 = require("../models/createAddressRequest");
var createCardRequest_1 = require("../models/createCardRequest");
var createCustomerRequest_1 = require("../models/createCustomerRequest");
var getAccessTokenResponse_1 = require("../models/getAccessTokenResponse");
var getAddressResponse_1 = require("../models/getAddressResponse");
var getCardResponse_1 = require("../models/getCardResponse");
var getCustomerResponse_1 = require("../models/getCustomerResponse");
var listAccessTokensResponse_1 = require("../models/listAccessTokensResponse");
var listAddressesResponse_1 = require("../models/listAddressesResponse");
var listCardsResponse_1 = require("../models/listCardsResponse");
var listCustomersResponse_1 = require("../models/listCustomersResponse");
var updateAddressRequest_1 = require("../models/updateAddressRequest");
var updateCardRequest_1 = require("../models/updateCardRequest");
var updateCustomerRequest_1 = require("../models/updateCustomerRequest");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var CustomersController = /** @class */ (function (_super) {
    tslib_1.__extends(CustomersController, _super);
    function CustomersController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Updates a card
     *
     * @param customerId      Customer Id
     * @param cardId          Card id
     * @param request         Request for updating a card
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.updateCard = function (customerId, cardId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    cardId: [cardId, (0, schema_1.string)()],
                    request: [request, updateCardRequest_1.updateCardRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/customers/", "/cards/", ""], ["/customers/", "/cards/", ""])), mapped.customerId, mapped.cardId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCardResponse_1.getCardResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates an address
     *
     * @param customerId      Customer Id
     * @param addressId       Address Id
     * @param request         Request for updating an address
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.updateAddress = function (customerId, addressId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    addressId: [addressId, (0, schema_1.string)()],
                    request: [request, updateAddressRequest_1.updateAddressRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/customers/", "/addresses/", ""], ["/customers/", "/addresses/", ""])), mapped.customerId, mapped.addressId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAddressResponse_1.getAddressResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Delete a customer's access token
     *
     * @param customerId      Customer Id
     * @param tokenId         Token Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.deleteAccessToken = function (customerId, tokenId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    tokenId: [tokenId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/customers/", "/access-tokens/", ""], ["/customers/", "/access-tokens/", ""])), mapped.customerId, mapped.tokenId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAccessTokenResponse_1.getAccessTokenResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new customer
     *
     * @param request         Request for creating a customer
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.createCustomer = function (request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/customers');
                mapped = req.prepareArgs({
                    request: [request, createCustomerRequest_1.createCustomerRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCustomerResponse_1.getCustomerResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new address for a customer
     *
     * @param customerId      Customer Id
     * @param request         Request for creating an address
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.createAddress = function (customerId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    request: [request, createAddressRequest_1.createAddressRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/customers/", "/addresses"], ["/customers/", "/addresses"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAddressResponse_1.getAddressResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Delete a Customer's access tokens
     *
     * @param customerId  Customer Id
     * @return Response from the API call
     */
    CustomersController.prototype.deleteAccessTokens = function (customerId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ customerId: [customerId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/customers/", "/access-tokens/"], ["/customers/", "/access-tokens/"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listAccessTokensResponse_1.listAccessTokensResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get a customer's address
     *
     * @param customerId  Customer id
     * @param addressId   Address Id
     * @return Response from the API call
     */
    CustomersController.prototype.getAddress = function (customerId, addressId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    addressId: [addressId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/customers/", "/addresses/", ""], ["/customers/", "/addresses/", ""])), mapped.customerId, mapped.addressId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAddressResponse_1.getAddressResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Delete a Customer's address
     *
     * @param customerId      Customer Id
     * @param addressId       Address Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.deleteAddress = function (customerId, addressId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    addressId: [addressId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/customers/", "/addresses/", ""], ["/customers/", "/addresses/", ""])), mapped.customerId, mapped.addressId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAddressResponse_1.getAddressResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new card for a customer
     *
     * @param customerId      Customer id
     * @param request         Request for creating a card
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.createCard = function (customerId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    request: [request, createCardRequest_1.createCardRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/customers/", "/cards"], ["/customers/", "/cards"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCardResponse_1.getCardResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get all Customers
     *
     * @param name     Name of the Customer
     * @param document Document of the Customer
     * @param page     Current page the the search
     * @param size     Quantity pages of the search
     * @param email    Customer's email
     * @param code     Customer's code
     * @return Response from the API call
     */
    CustomersController.prototype.getCustomers = function (name, document, page, size, email, code, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/customers');
                mapped = req.prepareArgs({
                    name: [name, (0, schema_1.optional)((0, schema_1.string)())],
                    document: [document, (0, schema_1.optional)((0, schema_1.string)())],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    email: [email, (0, schema_1.optional)((0, schema_1.string)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('name', mapped.name);
                req.query('document', mapped.document);
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('email', mapped.email);
                req.query('Code', mapped.code);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listCustomersResponse_1.listCustomersResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates a customer
     *
     * @param customerId      Customer id
     * @param request         Request for updating a customer
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.updateCustomer = function (customerId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PUT');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    request: [request, updateCustomerRequest_1.updateCustomerRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject(["/customers/", ""], ["/customers/", ""])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCustomerResponse_1.getCustomerResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a access token for a customer
     *
     * @param customerId      Customer Id
     * @param request         Request for creating a access token
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.createAccessToken = function (customerId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    request: [request, createAccessTokenRequest_1.createAccessTokenRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_10 || (templateObject_10 = tslib_1.__makeTemplateObject(["/customers/", "/access-tokens"], ["/customers/", "/access-tokens"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAccessTokenResponse_1.getAccessTokenResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get all access tokens from a customer
     *
     * @param customerId  Customer Id
     * @param page        Page number
     * @param size        Page size
     * @return Response from the API call
     */
    CustomersController.prototype.getAccessTokens = function (customerId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_11 || (templateObject_11 = tslib_1.__makeTemplateObject(["/customers/", "/access-tokens"], ["/customers/", "/access-tokens"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listAccessTokensResponse_1.listAccessTokensResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get all cards from a customer
     *
     * @param customerId  Customer Id
     * @param page        Page number
     * @param size        Page size
     * @return Response from the API call
     */
    CustomersController.prototype.getCards = function (customerId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_12 || (templateObject_12 = tslib_1.__makeTemplateObject(["/customers/", "/cards"], ["/customers/", "/cards"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listCardsResponse_1.listCardsResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Renew a card
     *
     * @param customerId      Customer id
     * @param cardId          Card Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.renewCard = function (customerId, cardId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    cardId: [cardId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_13 || (templateObject_13 = tslib_1.__makeTemplateObject(["/customers/", "/cards/", "/renew"], ["/customers/", "/cards/", "/renew"])), mapped.customerId, mapped.cardId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCardResponse_1.getCardResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get a Customer's access token
     *
     * @param customerId  Customer Id
     * @param tokenId     Token Id
     * @return Response from the API call
     */
    CustomersController.prototype.getAccessToken = function (customerId, tokenId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    tokenId: [tokenId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_14 || (templateObject_14 = tslib_1.__makeTemplateObject(["/customers/", "/access-tokens/", ""], ["/customers/", "/access-tokens/", ""])), mapped.customerId, mapped.tokenId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getAccessTokenResponse_1.getAccessTokenResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the metadata a customer
     *
     * @param customerId      The customer id
     * @param request         Request for updating the customer metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.updateCustomerMetadata = function (customerId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_15 || (templateObject_15 = tslib_1.__makeTemplateObject(["/Customers/", "/metadata"], ["/Customers/", "/metadata"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCustomerResponse_1.getCustomerResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Delete a customer's card
     *
     * @param customerId      Customer Id
     * @param cardId          Card Id
     * @param idempotencyKey
     * @return Response from the API call
     */
    CustomersController.prototype.deleteCard = function (customerId, cardId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    cardId: [cardId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_16 || (templateObject_16 = tslib_1.__makeTemplateObject(["/customers/", "/cards/", ""], ["/customers/", "/cards/", ""])), mapped.customerId, mapped.cardId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCardResponse_1.getCardResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets all adressess from a customer
     *
     * @param customerId  Customer id
     * @param page        Page number
     * @param size        Page size
     * @return Response from the API call
     */
    CustomersController.prototype.getAddresses = function (customerId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_17 || (templateObject_17 = tslib_1.__makeTemplateObject(["/customers/", "/addresses"], ["/customers/", "/addresses"])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listAddressesResponse_1.listAddressesResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get a customer
     *
     * @param customerId  Customer Id
     * @return Response from the API call
     */
    CustomersController.prototype.getCustomer = function (customerId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ customerId: [customerId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_18 || (templateObject_18 = tslib_1.__makeTemplateObject(["/customers/", ""], ["/customers/", ""])), mapped.customerId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCustomerResponse_1.getCustomerResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get a customer's card
     *
     * @param customerId  Customer id
     * @param cardId      Card id
     * @return Response from the API call
     */
    CustomersController.prototype.getCard = function (customerId, cardId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    customerId: [customerId, (0, schema_1.string)()],
                    cardId: [cardId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_19 || (templateObject_19 = tslib_1.__makeTemplateObject(["/customers/", "/cards/", ""], ["/customers/", "/cards/", ""])), mapped.customerId, mapped.cardId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getCardResponse_1.getCardResponseSchema, requestOptions)];
            });
        });
    };
    return CustomersController;
}(baseController_1.BaseController));
exports.CustomersController = CustomersController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19;
//# sourceMappingURL=customersController.js.map