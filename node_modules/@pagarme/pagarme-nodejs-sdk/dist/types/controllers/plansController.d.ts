/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { CreatePlanItemRequest } from '../models/createPlanItemRequest';
import { CreatePlanRequest } from '../models/createPlanRequest';
import { GetPlanItemResponse } from '../models/getPlanItemResponse';
import { GetPlanResponse } from '../models/getPlanResponse';
import { ListPlansResponse } from '../models/listPlansResponse';
import { UpdateMetadataRequest } from '../models/updateMetadataRequest';
import { UpdatePlanItemRequest } from '../models/updatePlanItemRequest';
import { UpdatePlanRequest } from '../models/updatePlanRequest';
import { BaseController } from './baseController';
export declare class PlansController extends BaseController {
    /**
     * Gets a plan
     *
     * @param planId  Plan id
     * @return Response from the API call
     */
    getPlan(planId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanResponse>>;
    /**
     * Deletes a plan
     *
     * @param planId          Plan id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deletePlan(planId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanResponse>>;
    /**
     * Updates the metadata from a plan
     *
     * @param planId          The plan id
     * @param request         Request for updating the plan metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updatePlanMetadata(planId: string, request: UpdateMetadataRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanResponse>>;
    /**
     * Updates a plan item
     *
     * @param planId          Plan id
     * @param planItemId      Plan item id
     * @param body            Request for updating the plan item
     * @param idempotencyKey
     * @return Response from the API call
     */
    updatePlanItem(planId: string, planItemId: string, body: UpdatePlanItemRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanItemResponse>>;
    /**
     * Adds a new item to a plan
     *
     * @param planId          Plan id
     * @param request         Request for creating a plan item
     * @param idempotencyKey
     * @return Response from the API call
     */
    createPlanItem(planId: string, request: CreatePlanItemRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanItemResponse>>;
    /**
     * Gets a plan item
     *
     * @param planId       Plan id
     * @param planItemId   Plan item id
     * @return Response from the API call
     */
    getPlanItem(planId: string, planItemId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanItemResponse>>;
    /**
     * Creates a new plan
     *
     * @param body            Request for creating a plan
     * @param idempotencyKey
     * @return Response from the API call
     */
    createPlan(body: CreatePlanRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanResponse>>;
    /**
     * Removes an item from a plan
     *
     * @param planId          Plan id
     * @param planItemId      Plan item id
     * @param idempotencyKey
     * @return Response from the API call
     */
    deletePlanItem(planId: string, planItemId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanItemResponse>>;
    /**
     * Gets all plans
     *
     * @param page          Page number
     * @param size          Page size
     * @param name          Filter for Plan's name
     * @param status        Filter for Plan's status
     * @param billingType   Filter for plan's billing type
     * @param createdSince  Filter for plan's creation date start range
     * @param createdUntil  Filter for plan's creation date end range
     * @return Response from the API call
     */
    getPlans(page?: number, size?: number, name?: string, status?: string, billingType?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListPlansResponse>>;
    /**
     * Updates a plan
     *
     * @param planId          Plan id
     * @param request         Request for updating a plan
     * @param idempotencyKey
     * @return Response from the API call
     */
    updatePlan(planId: string, request: UpdatePlanRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetPlanResponse>>;
}
