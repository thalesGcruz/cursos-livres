"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.createCreditCardPaymentRequestSchema = void 0;
var schema_1 = require("../schema");
var createCardPayloadRequest_1 = require("./createCardPayloadRequest");
var createCardPaymentContactlessRequest_1 = require("./createCardPaymentContactlessRequest");
var createCardRequest_1 = require("./createCardRequest");
var createPaymentAuthenticationRequest_1 = require("./createPaymentAuthenticationRequest");
var createPaymentOriginRequest_1 = require("./createPaymentOriginRequest");
exports.createCreditCardPaymentRequestSchema = (0, schema_1.object)({
    installments: ['installments', (0, schema_1.optional)((0, schema_1.number)())],
    statementDescriptor: ['statement_descriptor', (0, schema_1.optional)((0, schema_1.string)())],
    card: ['card', (0, schema_1.optional)((0, schema_1.lazy)(function () { return createCardRequest_1.createCardRequestSchema; }))],
    cardId: ['card_id', (0, schema_1.optional)((0, schema_1.string)())],
    cardToken: ['card_token', (0, schema_1.optional)((0, schema_1.string)())],
    recurrence: ['recurrence', (0, schema_1.optional)((0, schema_1.boolean)())],
    capture: ['capture', (0, schema_1.optional)((0, schema_1.boolean)())],
    extendedLimitEnabled: ['extended_limit_enabled', (0, schema_1.optional)((0, schema_1.boolean)())],
    extendedLimitCode: ['extended_limit_code', (0, schema_1.optional)((0, schema_1.string)())],
    merchantCategoryCode: ['merchant_category_code', (0, schema_1.optional)((0, schema_1.bigint)())],
    authentication: [
        'authentication',
        (0, schema_1.optional)((0, schema_1.lazy)(function () { return createPaymentAuthenticationRequest_1.createPaymentAuthenticationRequestSchema; })),
    ],
    contactless: [
        'contactless',
        (0, schema_1.optional)((0, schema_1.lazy)(function () { return createCardPaymentContactlessRequest_1.createCardPaymentContactlessRequestSchema; })),
    ],
    autoRecovery: ['auto_recovery', (0, schema_1.optional)((0, schema_1.boolean)())],
    operationType: ['operation_type', (0, schema_1.optional)((0, schema_1.string)())],
    recurrencyCycle: ['recurrency_cycle', (0, schema_1.optional)((0, schema_1.string)())],
    payload: ['payload', (0, schema_1.optional)((0, schema_1.lazy)(function () { return createCardPayloadRequest_1.createCardPayloadRequestSchema; }))],
    initiatedType: ['initiated_type', (0, schema_1.optional)((0, schema_1.string)())],
    recurrenceModel: ['recurrence_model', (0, schema_1.optional)((0, schema_1.string)())],
    paymentOrigin: [
        'payment_origin',
        (0, schema_1.optional)((0, schema_1.lazy)(function () { return createPaymentOriginRequest_1.createPaymentOriginRequestSchema; })),
    ]
});
//# sourceMappingURL=createCreditCardPaymentRequest.js.map