"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.InvoicesController = void 0;
var tslib_1 = require("tslib");
var createInvoiceRequest_1 = require("../models/createInvoiceRequest");
var getInvoiceResponse_1 = require("../models/getInvoiceResponse");
var listInvoicesResponse_1 = require("../models/listInvoicesResponse");
var updateInvoiceStatusRequest_1 = require("../models/updateInvoiceStatusRequest");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var InvoicesController = /** @class */ (function (_super) {
    tslib_1.__extends(InvoicesController, _super);
    function InvoicesController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Updates the metadata from an invoice
     *
     * @param invoiceId       The invoice id
     * @param request         Request for updating the invoice metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    InvoicesController.prototype.updateInvoiceMetadata = function (invoiceId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    invoiceId: [invoiceId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/invoices/", "/metadata"], ["/invoices/", "/metadata"])), mapped.invoiceId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getInvoiceResponse_1.getInvoiceResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param subscriptionId  Subscription Id
     * @return Response from the API call
     */
    InvoicesController.prototype.getPartialInvoice = function (subscriptionId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/subscriptions/", "/partial-invoice"], ["/subscriptions/", "/partial-invoice"])), mapped.subscriptionId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getInvoiceResponse_1.getInvoiceResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Cancels an invoice
     *
     * @param invoiceId       Invoice id
     * @param idempotencyKey
     * @return Response from the API call
     */
    InvoicesController.prototype.cancelInvoice = function (invoiceId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    invoiceId: [invoiceId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/invoices/", ""], ["/invoices/", ""])), mapped.invoiceId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getInvoiceResponse_1.getInvoiceResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Create an Invoice
     *
     * @param subscriptionId  Subscription Id
     * @param cycleId         Cycle Id
     * @param request
     * @param idempotencyKey
     * @return Response from the API call
     */
    InvoicesController.prototype.createInvoice = function (subscriptionId, cycleId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    subscriptionId: [subscriptionId, (0, schema_1.string)()],
                    cycleId: [cycleId, (0, schema_1.string)()],
                    request: [request, (0, schema_1.optional)(createInvoiceRequest_1.createInvoiceRequestSchema)],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/subscriptions/", "/cycles/", "/pay"], ["/subscriptions/", "/cycles/", "/pay"])), mapped.subscriptionId, mapped.cycleId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getInvoiceResponse_1.getInvoiceResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets all invoices
     *
     * @param page              Page number
     * @param size              Page size
     * @param code              Filter for Invoice's code
     * @param customerId        Filter for Invoice's customer id
     * @param subscriptionId    Filter for Invoice's subscription id
     * @param createdSince      Filter for Invoice's creation date start range
     * @param createdUntil      Filter for Invoices creation date end range
     * @param status            Filter for Invoice's status
     * @param dueSince          Filter for Invoice's due date start range
     * @param dueUntil          Filter for Invoice's due date end range
     * @param customerDocument
     * @return Response from the API call
     */
    InvoicesController.prototype.getInvoices = function (page, size, code, customerId, subscriptionId, createdSince, createdUntil, status, dueSince, dueUntil, customerDocument, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/invoices');
                mapped = req.prepareArgs({
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())],
                    customerId: [customerId, (0, schema_1.optional)((0, schema_1.string)())],
                    subscriptionId: [subscriptionId, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    dueSince: [dueSince, (0, schema_1.optional)((0, schema_1.string)())],
                    dueUntil: [dueUntil, (0, schema_1.optional)((0, schema_1.string)())],
                    customerDocument: [customerDocument, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('code', mapped.code);
                req.query('customer_id', mapped.customerId);
                req.query('subscription_id', mapped.subscriptionId);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.query('status', mapped.status);
                req.query('due_since', mapped.dueSince);
                req.query('due_until', mapped.dueUntil);
                req.query('customer_document', mapped.customerDocument);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listInvoicesResponse_1.listInvoicesResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Gets an invoice
     *
     * @param invoiceId  Invoice Id
     * @return Response from the API call
     */
    InvoicesController.prototype.getInvoice = function (invoiceId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ invoiceId: [invoiceId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/invoices/", ""], ["/invoices/", ""])), mapped.invoiceId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getInvoiceResponse_1.getInvoiceResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the status from an invoice
     *
     * @param invoiceId       Invoice Id
     * @param request         Request for updating an invoice's status
     * @param idempotencyKey
     * @return Response from the API call
     */
    InvoicesController.prototype.updateInvoiceStatus = function (invoiceId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    invoiceId: [invoiceId, (0, schema_1.string)()],
                    request: [request, updateInvoiceStatusRequest_1.updateInvoiceStatusRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/invoices/", "/status"], ["/invoices/", "/status"])), mapped.invoiceId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getInvoiceResponse_1.getInvoiceResponseSchema, requestOptions)];
            });
        });
    };
    return InvoicesController;
}(baseController_1.BaseController));
exports.InvoicesController = InvoicesController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=invoicesController.js.map