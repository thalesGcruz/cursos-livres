"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  multibuild: () => multibuild
});
module.exports = __toCommonJS(src_exports);
var import_vite = require("vite");
var import_picocolors = __toESM(require("picocolors"));
async function multibuild(config = {}, options = {}) {
  let initialConfig = await (0, import_vite.resolveConfig)(
    {
      ...config,
      mode: "multibuild"
    },
    "build"
  ).catch((error) => {
    console.error(import_picocolors.default.red(`error resolving config:
${error.stack}`), {
      error
    });
    process.exit(1);
  });
  if (!initialConfig.configFile && options.onMissingConfigFile) {
    const maybeInlineConfig = await options.onMissingConfigFile(initialConfig);
    if (maybeInlineConfig) {
      initialConfig = await (0, import_vite.resolveConfig)(
        {
          ...maybeInlineConfig,
          mode: "multibuild"
        },
        "build"
      ).catch((error) => {
        console.error(import_picocolors.default.red(`error resolving config:
${error.stack}`), {
          error
        });
        process.exit(1);
      });
    }
  }
  await options?.onInitialConfigResolved?.(initialConfig);
  const steps = initialConfig.buildSteps || [{ name: "default" }];
  const forwarded = {};
  for (const [i, step] of steps.entries()) {
    let resolvedStepConfig;
    const info = {
      buildSteps: steps,
      currentStepIndex: i,
      currentStep: step
    };
    await options.onStartBuildStep?.(info);
    if (step.vite === false) {
      const result = await step.run(info, forwarded);
      if (result !== void 0) {
        forwarded[step.name] = result;
      }
      continue;
    }
    const multibuildPlugin = {
      name: "@vavite/multibuild",
      enforce: "pre",
      async config(config2) {
        function enforceToNumber(enforce) {
          return enforce ? enforce === "pre" ? -1 : 1 : 0;
        }
        const plugins = (config2.plugins || []).flat().filter(Boolean).sort(
          (a, b) => enforceToNumber(a.enforce) - enforceToNumber(b.enforce)
        );
        for (const plugin of plugins) {
          await plugin.buildStepStart?.(info, forwarded[plugin.name]);
        }
      },
      configResolved(resolvedConfig) {
        resolvedStepConfig = resolvedConfig;
      }
    };
    const mergedConfig = (0, import_vite.mergeConfig)((0, import_vite.mergeConfig)(config, step.config ?? {}), {
      plugins: [multibuildPlugin]
    });
    await (0, import_vite.build)(mergedConfig).catch((error) => {
      initialConfig.logger.error(
        import_picocolors.default.red(`error during build:
${error.stack}`),
        { error }
      );
      process.exit(1);
    });
    for (const plugin of resolvedStepConfig.plugins || []) {
      const data = await plugin.buildStepEnd?.();
      if (data !== void 0) {
        forwarded[plugin.name] = data;
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  multibuild
});
