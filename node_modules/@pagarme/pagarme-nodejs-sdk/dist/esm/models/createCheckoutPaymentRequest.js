/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { array, boolean, lazy, number, object, optional, string, unknown, } from '../schema';
import { createAddressRequestSchema, } from './createAddressRequest';
import { createCheckoutBankTransferRequestSchema, } from './createCheckoutBankTransferRequest';
import { createCheckoutBoletoPaymentRequestSchema, } from './createCheckoutBoletoPaymentRequest';
import { createCheckoutCreditCardPaymentRequestSchema, } from './createCheckoutCreditCardPaymentRequest';
import { createCheckoutDebitCardPaymentRequestSchema, } from './createCheckoutDebitCardPaymentRequest';
import { createCheckoutPixPaymentRequestSchema, } from './createCheckoutPixPaymentRequest';
export const createCheckoutPaymentRequestSchema = object({
    acceptedPaymentMethods: ['accepted_payment_methods', array(string())],
    acceptedMultiPaymentMethods: [
        'accepted_multi_payment_methods',
        array(unknown()),
    ],
    successUrl: ['success_url', string()],
    defaultPaymentMethod: ['default_payment_method', optional(string())],
    gatewayAffiliationId: ['gateway_affiliation_id', optional(string())],
    creditCard: [
        'credit_card',
        optional(lazy(() => createCheckoutCreditCardPaymentRequestSchema)),
    ],
    debitCard: [
        'debit_card',
        optional(lazy(() => createCheckoutDebitCardPaymentRequestSchema)),
    ],
    boleto: [
        'boleto',
        optional(lazy(() => createCheckoutBoletoPaymentRequestSchema)),
    ],
    customerEditable: ['customer_editable', optional(boolean())],
    expiresIn: ['expires_in', optional(number())],
    skipCheckoutSuccessPage: ['skip_checkout_success_page', boolean()],
    billingAddressEditable: ['billing_address_editable', boolean()],
    billingAddress: ['billing_address', lazy(() => createAddressRequestSchema)],
    bankTransfer: [
        'bank_transfer',
        optional(lazy(() => createCheckoutBankTransferRequestSchema)),
    ],
    acceptedBrands: ['accepted_brands', array(string())],
    pix: ['pix', optional(lazy(() => createCheckoutPixPaymentRequestSchema))],
});
//# sourceMappingURL=createCheckoutPaymentRequest.js.map