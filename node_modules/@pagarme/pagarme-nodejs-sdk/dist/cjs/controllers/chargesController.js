"use strict";
/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.ChargesController = void 0;
var tslib_1 = require("tslib");
var createCancelChargeRequest_1 = require("../models/createCancelChargeRequest");
var createCaptureChargeRequest_1 = require("../models/createCaptureChargeRequest");
var createChargeRequest_1 = require("../models/createChargeRequest");
var createConfirmPaymentRequest_1 = require("../models/createConfirmPaymentRequest");
var getChargeResponse_1 = require("../models/getChargeResponse");
var getChargesSummaryResponse_1 = require("../models/getChargesSummaryResponse");
var listChargesResponse_1 = require("../models/listChargesResponse");
var listChargeTransactionsResponse_1 = require("../models/listChargeTransactionsResponse");
var updateChargeCardRequest_1 = require("../models/updateChargeCardRequest");
var updateChargeDueDateRequest_1 = require("../models/updateChargeDueDateRequest");
var updateChargePaymentMethodRequest_1 = require("../models/updateChargePaymentMethodRequest");
var updateMetadataRequest_1 = require("../models/updateMetadataRequest");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var ChargesController = /** @class */ (function (_super) {
    tslib_1.__extends(ChargesController, _super);
    function ChargesController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Updates the metadata from a charge
     *
     * @param chargeId        The charge id
     * @param request         Request for updating the charge metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.updateChargeMetadata = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, updateMetadataRequest_1.updateMetadataRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/Charges/", "/metadata"], ["/Charges/", "/metadata"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates a charge's payment method
     *
     * @param chargeId        Charge id
     * @param request         Request for updating the payment method from a
     *                                                                   charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.updateChargePaymentMethod = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, updateChargePaymentMethodRequest_1.updateChargePaymentMethodRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/charges/", "/payment-method"], ["/charges/", "/payment-method"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param chargeId  Charge Id
     * @param page      Page number
     * @param size      Page size
     * @return Response from the API call
     */
    ChargesController.prototype.getChargeTransactions = function (chargeId, page, size, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/charges/", "/transactions"], ["/charges/", "/transactions"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listChargeTransactionsResponse_1.listChargeTransactionsResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the due date from a charge
     *
     * @param chargeId        Charge Id
     * @param request         Request for updating the due date
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.updateChargeDueDate = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, updateChargeDueDateRequest_1.updateChargeDueDateRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/Charges/", "/due-date"], ["/Charges/", "/due-date"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Lists all charges
     *
     * @param page           Page number
     * @param size           Page size
     * @param code           Filter for charge's code
     * @param status         Filter for charge's status
     * @param paymentMethod  Filter for charge's payment method
     * @param customerId     Filter for charge's customer id
     * @param orderId        Filter for charge's order id
     * @param createdSince   Filter for the beginning of the range for charge's creation
     * @param createdUntil   Filter for the end of the range for charge's creation
     * @return Response from the API call
     */
    ChargesController.prototype.getCharges = function (page, size, code, status, paymentMethod, customerId, orderId, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/charges');
                mapped = req.prepareArgs({
                    page: [page, (0, schema_1.optional)((0, schema_1.number)())],
                    size: [size, (0, schema_1.optional)((0, schema_1.number)())],
                    code: [code, (0, schema_1.optional)((0, schema_1.string)())],
                    status: [status, (0, schema_1.optional)((0, schema_1.string)())],
                    paymentMethod: [paymentMethod, (0, schema_1.optional)((0, schema_1.string)())],
                    customerId: [customerId, (0, schema_1.optional)((0, schema_1.string)())],
                    orderId: [orderId, (0, schema_1.optional)((0, schema_1.string)())],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('page', mapped.page);
                req.query('size', mapped.size);
                req.query('code', mapped.code);
                req.query('status', mapped.status);
                req.query('payment_method', mapped.paymentMethod);
                req.query('customer_id', mapped.customerId);
                req.query('order_id', mapped.orderId);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(listChargesResponse_1.listChargesResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Captures a charge
     *
     * @param chargeId        Charge id
     * @param request         Request for capturing a charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.captureCharge = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, (0, schema_1.optional)(createCaptureChargeRequest_1.createCaptureChargeRequestSchema)],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/charges/", "/capture"], ["/charges/", "/capture"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Updates the card from a charge
     *
     * @param chargeId        Charge id
     * @param request         Request for updating a charge's card
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.updateChargeCard = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('PATCH');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, updateChargeCardRequest_1.updateChargeCardRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/charges/", "/card"], ["/charges/", "/card"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Get a charge from its id
     *
     * @param chargeId  Charge id
     * @return Response from the API call
     */
    ChargesController.prototype.getCharge = function (chargeId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ chargeId: [chargeId, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject(["/charges/", ""], ["/charges/", ""])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param status
     * @param createdSince
     * @param createdUntil
     * @return Response from the API call
     */
    ChargesController.prototype.getChargesSummary = function (status, createdSince, createdUntil, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/charges/summary');
                mapped = req.prepareArgs({
                    status: [status, (0, schema_1.string)()],
                    createdSince: [createdSince, (0, schema_1.optional)((0, schema_1.string)())],
                    createdUntil: [createdUntil, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('status', mapped.status);
                req.query('created_since', mapped.createdSince);
                req.query('created_until', mapped.createdUntil);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargesSummaryResponse_1.getChargesSummaryResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Retries a charge
     *
     * @param chargeId        Charge id
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.retryCharge = function (chargeId, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.appendTemplatePath(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject(["/charges/", "/retry"], ["/charges/", "/retry"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Cancel a charge
     *
     * @param chargeId        Charge id
     * @param request         Request for cancelling a charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.cancelCharge = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, (0, schema_1.optional)(createCancelChargeRequest_1.createCancelChargeRequestSchema)],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject(["/charges/", ""], ["/charges/", ""])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * Creates a new charge
     *
     * @param request         Request for creating a charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.createCharge = function (request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/Charges');
                mapped = req.prepareArgs({
                    request: [request, createChargeRequest_1.createChargeRequestSchema],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    /**
     * @param chargeId
     * @param request         Request for confirm payment
     * @param idempotencyKey
     * @return Response from the API call
     */
    ChargesController.prototype.confirmPayment = function (chargeId, request, idempotencyKey, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({
                    chargeId: [chargeId, (0, schema_1.string)()],
                    request: [request, (0, schema_1.optional)(createConfirmPaymentRequest_1.createConfirmPaymentRequestSchema)],
                    idempotencyKey: [idempotencyKey, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.header('idempotency-key', mapped.idempotencyKey);
                req.json(mapped.request);
                req.appendTemplatePath(templateObject_10 || (templateObject_10 = tslib_1.__makeTemplateObject(["/charges/", "/confirm-payment"], ["/charges/", "/confirm-payment"])), mapped.chargeId);
                req.authenticate([{ httpBasic: true }]);
                return [2 /*return*/, req.callAsJson(getChargeResponse_1.getChargeResponseSchema, requestOptions)];
            });
        });
    };
    return ChargesController;
}(baseController_1.BaseController));
exports.ChargesController = ChargesController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10;
//# sourceMappingURL=chargesController.js.map