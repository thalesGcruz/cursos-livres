var sa = Object.defineProperty;
var oa = (t, e, r) => e in t ? sa(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r;
var et = (t, e, r) => oa(t, typeof e != "symbol" ? e + "" : e, r);
import aa from "uglify-js";
var ys = (t) => {
  throw TypeError(t);
}, _s = (t, e, r) => e.has(t) || ys("Cannot " + r), ca = (t, e, r) => (_s(t, e, "read from private field"), r ? r.call(t) : e.get(t)), Jn = (t, e, r) => e.has(t) ? ys("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, r), Zn = (t, e, r) => (_s(t, e, "access private method"), r), As = typeof global == "object" && global && global.Object === Object && global, ua = typeof self == "object" && self && self.Object === Object && self, Pe = As || ua || Function("return this")(), ye = Pe.Symbol, Ss = Object.prototype, la = Ss.hasOwnProperty, ha = Ss.toString, vt = ye ? ye.toStringTag : void 0;
function fa(t) {
  var e = la.call(t, vt), r = t[vt];
  try {
    t[vt] = void 0;
    var n = !0;
  } catch {
  }
  var i = ha.call(t);
  return n && (e ? t[vt] = r : delete t[vt]), i;
}
var pa = Object.prototype, da = pa.toString;
function ma(t) {
  return da.call(t);
}
var ga = "[object Null]", va = "[object Undefined]", ei = ye ? ye.toStringTag : void 0;
function Qe(t) {
  return t == null ? t === void 0 ? va : ga : ei && ei in Object(t) ? fa(t) : ma(t);
}
function Le(t) {
  return t != null && typeof t == "object";
}
var Ea = "[object Symbol]";
function gr(t) {
  return typeof t == "symbol" || Le(t) && Qe(t) == Ea;
}
function vr(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length, i = Array(n); ++r < n; )
    i[r] = e(t[r], r, t);
  return i;
}
var j = Array.isArray, Ta = 1 / 0, ti = ye ? ye.prototype : void 0, ri = ti ? ti.toString : void 0;
function Rs(t) {
  if (typeof t == "string")
    return t;
  if (j(t))
    return vr(t, Rs) + "";
  if (gr(t))
    return ri ? ri.call(t) : "";
  var e = t + "";
  return e == "0" && 1 / t == -Ta ? "-0" : e;
}
var ya = /\s/;
function _a(t) {
  for (var e = t.length; e-- && ya.test(t.charAt(e)); )
    ;
  return e;
}
var Aa = /^\s+/;
function Sa(t) {
  return t && t.slice(0, _a(t) + 1).replace(Aa, "");
}
function _e(t) {
  var e = typeof t;
  return t != null && (e == "object" || e == "function");
}
var ni = NaN, Ra = /^[-+]0x[0-9a-f]+$/i, Oa = /^0b[01]+$/i, La = /^0o[0-7]+$/i, Ia = parseInt;
function Ca(t) {
  if (typeof t == "number")
    return t;
  if (gr(t))
    return ni;
  if (_e(t)) {
    var e = typeof t.valueOf == "function" ? t.valueOf() : t;
    t = _e(e) ? e + "" : e;
  }
  if (typeof t != "string")
    return t === 0 ? t : +t;
  t = Sa(t);
  var r = Oa.test(t);
  return r || La.test(t) ? Ia(t.slice(2), r ? 2 : 8) : Ra.test(t) ? ni : +t;
}
var ii = 1 / 0, Ma = 17976931348623157e292;
function ba(t) {
  if (!t)
    return t === 0 ? t : 0;
  if (t = Ca(t), t === ii || t === -ii) {
    var e = t < 0 ? -1 : 1;
    return e * Ma;
  }
  return t === t ? t : 0;
}
function Er(t) {
  var e = ba(t), r = e % 1;
  return e === e ? r ? e - r : e : 0;
}
function ht(t) {
  return t;
}
var Na = "[object AsyncFunction]", ka = "[object Function]", Pa = "[object GeneratorFunction]", wa = "[object Proxy]";
function Ke(t) {
  if (!_e(t))
    return !1;
  var e = Qe(t);
  return e == ka || e == Pa || e == Na || e == wa;
}
var xr = Pe["__core-js_shared__"], si = function() {
  var t = /[^.]+$/.exec(xr && xr.keys && xr.keys.IE_PROTO || "");
  return t ? "Symbol(src)_1." + t : "";
}();
function xa(t) {
  return !!si && si in t;
}
var Ua = Function.prototype, Da = Ua.toString;
function st(t) {
  if (t != null) {
    try {
      return Da.call(t);
    } catch {
    }
    try {
      return t + "";
    } catch {
    }
  }
  return "";
}
var Fa = /[\\^$.*+?()[\]{}|]/g, ja = /^\[object .+?Constructor\]$/, $a = Function.prototype, Ga = Object.prototype, Ba = $a.toString, Va = Ga.hasOwnProperty, Wa = RegExp(
  "^" + Ba.call(Va).replace(Fa, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function Ka(t) {
  if (!_e(t) || xa(t))
    return !1;
  var e = Ke(t) ? Wa : ja;
  return e.test(st(t));
}
function Ha(t, e) {
  return t == null ? void 0 : t[e];
}
function ot(t, e) {
  var r = Ha(t, e);
  return Ka(r) ? r : void 0;
}
var rn = ot(Pe, "WeakMap"), oi = Object.create, za = /* @__PURE__ */ function() {
  function t() {
  }
  return function(e) {
    if (!_e(e))
      return {};
    if (oi)
      return oi(e);
    t.prototype = e;
    var r = new t();
    return t.prototype = void 0, r;
  };
}();
function Ya(t, e, r) {
  switch (r.length) {
    case 0:
      return t.call(e);
    case 1:
      return t.call(e, r[0]);
    case 2:
      return t.call(e, r[0], r[1]);
    case 3:
      return t.call(e, r[0], r[1], r[2]);
  }
  return t.apply(e, r);
}
function J() {
}
function qa(t, e) {
  var r = -1, n = t.length;
  for (e || (e = Array(n)); ++r < n; )
    e[r] = t[r];
  return e;
}
var Xa = 800, Qa = 16, Ja = Date.now;
function Za(t) {
  var e = 0, r = 0;
  return function() {
    var n = Ja(), i = Qa - (n - r);
    if (r = n, i > 0) {
      if (++e >= Xa)
        return arguments[0];
    } else
      e = 0;
    return t.apply(void 0, arguments);
  };
}
function ec(t) {
  return function() {
    return t;
  };
}
var nr = function() {
  try {
    var t = ot(Object, "defineProperty");
    return t({}, "", {}), t;
  } catch {
  }
}(), tc = nr ? function(t, e) {
  return nr(t, "toString", {
    configurable: !0,
    enumerable: !1,
    value: ec(e),
    writable: !0
  });
} : ht, rc = Za(tc);
function Os(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n && e(t[r], r, t) !== !1; )
    ;
  return t;
}
function Ls(t, e, r, n) {
  for (var i = t.length, s = r + -1; ++s < i; )
    if (e(t[s], s, t))
      return s;
  return -1;
}
function nc(t) {
  return t !== t;
}
function ic(t, e, r) {
  for (var n = r - 1, i = t.length; ++n < i; )
    if (t[n] === e)
      return n;
  return -1;
}
function Ln(t, e, r) {
  return e === e ? ic(t, e, r) : Ls(t, nc, r);
}
function Is(t, e) {
  var r = t == null ? 0 : t.length;
  return !!r && Ln(t, e, 0) > -1;
}
var sc = 9007199254740991, oc = /^(?:0|[1-9]\d*)$/;
function Tr(t, e) {
  var r = typeof t;
  return e = e ?? sc, !!e && (r == "number" || r != "symbol" && oc.test(t)) && t > -1 && t % 1 == 0 && t < e;
}
function In(t, e, r) {
  e == "__proto__" && nr ? nr(t, e, {
    configurable: !0,
    enumerable: !0,
    value: r,
    writable: !0
  }) : t[e] = r;
}
function Nt(t, e) {
  return t === e || t !== t && e !== e;
}
var ac = Object.prototype, cc = ac.hasOwnProperty;
function yr(t, e, r) {
  var n = t[e];
  (!(cc.call(t, e) && Nt(n, r)) || r === void 0 && !(e in t)) && In(t, e, r);
}
function Cn(t, e, r, n) {
  var i = !r;
  r || (r = {});
  for (var s = -1, o = e.length; ++s < o; ) {
    var c = e[s], a = void 0;
    a === void 0 && (a = t[c]), i ? In(r, c, a) : yr(r, c, a);
  }
  return r;
}
var ai = Math.max;
function uc(t, e, r) {
  return e = ai(e === void 0 ? t.length - 1 : e, 0), function() {
    for (var n = arguments, i = -1, s = ai(n.length - e, 0), o = Array(s); ++i < s; )
      o[i] = n[e + i];
    i = -1;
    for (var c = Array(e + 1); ++i < e; )
      c[i] = n[i];
    return c[e] = r(o), Ya(t, this, c);
  };
}
function Mn(t, e) {
  return rc(uc(t, e, ht), t + "");
}
var lc = 9007199254740991;
function bn(t) {
  return typeof t == "number" && t > -1 && t % 1 == 0 && t <= lc;
}
function we(t) {
  return t != null && bn(t.length) && !Ke(t);
}
function Cs(t, e, r) {
  if (!_e(r))
    return !1;
  var n = typeof e;
  return (n == "number" ? we(r) && Tr(e, r.length) : n == "string" && e in r) ? Nt(r[e], t) : !1;
}
function hc(t) {
  return Mn(function(e, r) {
    var n = -1, i = r.length, s = i > 1 ? r[i - 1] : void 0, o = i > 2 ? r[2] : void 0;
    for (s = t.length > 3 && typeof s == "function" ? (i--, s) : void 0, o && Cs(r[0], r[1], o) && (s = i < 3 ? void 0 : s, i = 1), e = Object(e); ++n < i; ) {
      var c = r[n];
      c && t(e, c, n, s);
    }
    return e;
  });
}
var fc = Object.prototype;
function kt(t) {
  var e = t && t.constructor, r = typeof e == "function" && e.prototype || fc;
  return t === r;
}
function pc(t, e) {
  for (var r = -1, n = Array(t); ++r < t; )
    n[r] = e(r);
  return n;
}
var dc = "[object Arguments]";
function ci(t) {
  return Le(t) && Qe(t) == dc;
}
var Ms = Object.prototype, mc = Ms.hasOwnProperty, gc = Ms.propertyIsEnumerable, _r = ci(/* @__PURE__ */ function() {
  return arguments;
}()) ? ci : function(t) {
  return Le(t) && mc.call(t, "callee") && !gc.call(t, "callee");
};
function vc() {
  return !1;
}
var bs = typeof exports == "object" && exports && !exports.nodeType && exports, ui = bs && typeof module == "object" && module && !module.nodeType && module, Ec = ui && ui.exports === bs, li = Ec ? Pe.Buffer : void 0, Tc = li ? li.isBuffer : void 0, It = Tc || vc, yc = "[object Arguments]", _c = "[object Array]", Ac = "[object Boolean]", Sc = "[object Date]", Rc = "[object Error]", Oc = "[object Function]", Lc = "[object Map]", Ic = "[object Number]", Cc = "[object Object]", Mc = "[object RegExp]", bc = "[object Set]", Nc = "[object String]", kc = "[object WeakMap]", Pc = "[object ArrayBuffer]", wc = "[object DataView]", xc = "[object Float32Array]", Uc = "[object Float64Array]", Dc = "[object Int8Array]", Fc = "[object Int16Array]", jc = "[object Int32Array]", $c = "[object Uint8Array]", Gc = "[object Uint8ClampedArray]", Bc = "[object Uint16Array]", Vc = "[object Uint32Array]", H = {};
H[xc] = H[Uc] = H[Dc] = H[Fc] = H[jc] = H[$c] = H[Gc] = H[Bc] = H[Vc] = !0;
H[yc] = H[_c] = H[Pc] = H[Ac] = H[wc] = H[Sc] = H[Rc] = H[Oc] = H[Lc] = H[Ic] = H[Cc] = H[Mc] = H[bc] = H[Nc] = H[kc] = !1;
function Wc(t) {
  return Le(t) && bn(t.length) && !!H[Qe(t)];
}
function Ar(t) {
  return function(e) {
    return t(e);
  };
}
var Ns = typeof exports == "object" && exports && !exports.nodeType && exports, Ot = Ns && typeof module == "object" && module && !module.nodeType && module, Kc = Ot && Ot.exports === Ns, Ur = Kc && As.process, qe = function() {
  try {
    var t = Ot && Ot.require && Ot.require("util").types;
    return t || Ur && Ur.binding && Ur.binding("util");
  } catch {
  }
}(), hi = qe && qe.isTypedArray, Nn = hi ? Ar(hi) : Wc, Hc = Object.prototype, zc = Hc.hasOwnProperty;
function ks(t, e) {
  var r = j(t), n = !r && _r(t), i = !r && !n && It(t), s = !r && !n && !i && Nn(t), o = r || n || i || s, c = o ? pc(t.length, String) : [], a = c.length;
  for (var u in t)
    (e || zc.call(t, u)) && !(o && // Safari 9 has enumerable `arguments.length` in strict mode.
    (u == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    i && (u == "offset" || u == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    s && (u == "buffer" || u == "byteLength" || u == "byteOffset") || // Skip index properties.
    Tr(u, a))) && c.push(u);
  return c;
}
function Ps(t, e) {
  return function(r) {
    return t(e(r));
  };
}
var Yc = Ps(Object.keys, Object), qc = Object.prototype, Xc = qc.hasOwnProperty;
function ws(t) {
  if (!kt(t))
    return Yc(t);
  var e = [];
  for (var r in Object(t))
    Xc.call(t, r) && r != "constructor" && e.push(r);
  return e;
}
function Ae(t) {
  return we(t) ? ks(t) : ws(t);
}
var Qc = Object.prototype, Jc = Qc.hasOwnProperty, de = hc(function(t, e) {
  if (kt(e) || we(e)) {
    Cn(e, Ae(e), t);
    return;
  }
  for (var r in e)
    Jc.call(e, r) && yr(t, r, e[r]);
});
function Zc(t) {
  var e = [];
  if (t != null)
    for (var r in Object(t))
      e.push(r);
  return e;
}
var eu = Object.prototype, tu = eu.hasOwnProperty;
function ru(t) {
  if (!_e(t))
    return Zc(t);
  var e = kt(t), r = [];
  for (var n in t)
    n == "constructor" && (e || !tu.call(t, n)) || r.push(n);
  return r;
}
function xs(t) {
  return we(t) ? ks(t, !0) : ru(t);
}
var nu = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, iu = /^\w*$/;
function kn(t, e) {
  if (j(t))
    return !1;
  var r = typeof t;
  return r == "number" || r == "symbol" || r == "boolean" || t == null || gr(t) ? !0 : iu.test(t) || !nu.test(t) || e != null && t in Object(e);
}
var Ct = ot(Object, "create");
function su() {
  this.__data__ = Ct ? Ct(null) : {}, this.size = 0;
}
function ou(t) {
  var e = this.has(t) && delete this.__data__[t];
  return this.size -= e ? 1 : 0, e;
}
var au = "__lodash_hash_undefined__", cu = Object.prototype, uu = cu.hasOwnProperty;
function lu(t) {
  var e = this.__data__;
  if (Ct) {
    var r = e[t];
    return r === au ? void 0 : r;
  }
  return uu.call(e, t) ? e[t] : void 0;
}
var hu = Object.prototype, fu = hu.hasOwnProperty;
function pu(t) {
  var e = this.__data__;
  return Ct ? e[t] !== void 0 : fu.call(e, t);
}
var du = "__lodash_hash_undefined__";
function mu(t, e) {
  var r = this.__data__;
  return this.size += this.has(t) ? 0 : 1, r[t] = Ct && e === void 0 ? du : e, this;
}
function rt(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
rt.prototype.clear = su;
rt.prototype.delete = ou;
rt.prototype.get = lu;
rt.prototype.has = pu;
rt.prototype.set = mu;
function gu() {
  this.__data__ = [], this.size = 0;
}
function Sr(t, e) {
  for (var r = t.length; r--; )
    if (Nt(t[r][0], e))
      return r;
  return -1;
}
var vu = Array.prototype, Eu = vu.splice;
function Tu(t) {
  var e = this.__data__, r = Sr(e, t);
  if (r < 0)
    return !1;
  var n = e.length - 1;
  return r == n ? e.pop() : Eu.call(e, r, 1), --this.size, !0;
}
function yu(t) {
  var e = this.__data__, r = Sr(e, t);
  return r < 0 ? void 0 : e[r][1];
}
function _u(t) {
  return Sr(this.__data__, t) > -1;
}
function Au(t, e) {
  var r = this.__data__, n = Sr(r, t);
  return n < 0 ? (++this.size, r.push([t, e])) : r[n][1] = e, this;
}
function He(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
He.prototype.clear = gu;
He.prototype.delete = Tu;
He.prototype.get = yu;
He.prototype.has = _u;
He.prototype.set = Au;
var Mt = ot(Pe, "Map");
function Su() {
  this.size = 0, this.__data__ = {
    hash: new rt(),
    map: new (Mt || He)(),
    string: new rt()
  };
}
function Ru(t) {
  var e = typeof t;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null;
}
function Rr(t, e) {
  var r = t.__data__;
  return Ru(e) ? r[typeof e == "string" ? "string" : "hash"] : r.map;
}
function Ou(t) {
  var e = Rr(this, t).delete(t);
  return this.size -= e ? 1 : 0, e;
}
function Lu(t) {
  return Rr(this, t).get(t);
}
function Iu(t) {
  return Rr(this, t).has(t);
}
function Cu(t, e) {
  var r = Rr(this, t), n = r.size;
  return r.set(t, e), this.size += r.size == n ? 0 : 1, this;
}
function ze(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.clear(); ++e < r; ) {
    var n = t[e];
    this.set(n[0], n[1]);
  }
}
ze.prototype.clear = Su;
ze.prototype.delete = Ou;
ze.prototype.get = Lu;
ze.prototype.has = Iu;
ze.prototype.set = Cu;
var Mu = "Expected a function";
function Pn(t, e) {
  if (typeof t != "function" || e != null && typeof e != "function")
    throw new TypeError(Mu);
  var r = function() {
    var n = arguments, i = e ? e.apply(this, n) : n[0], s = r.cache;
    if (s.has(i))
      return s.get(i);
    var o = t.apply(this, n);
    return r.cache = s.set(i, o) || s, o;
  };
  return r.cache = new (Pn.Cache || ze)(), r;
}
Pn.Cache = ze;
var bu = 500;
function Nu(t) {
  var e = Pn(t, function(n) {
    return r.size === bu && r.clear(), n;
  }), r = e.cache;
  return e;
}
var ku = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Pu = /\\(\\)?/g, wu = Nu(function(t) {
  var e = [];
  return t.charCodeAt(0) === 46 && e.push(""), t.replace(ku, function(r, n, i, s) {
    e.push(i ? s.replace(Pu, "$1") : n || r);
  }), e;
});
function xu(t) {
  return t == null ? "" : Rs(t);
}
function Or(t, e) {
  return j(t) ? t : kn(t, e) ? [t] : wu(xu(t));
}
var Uu = 1 / 0;
function Pt(t) {
  if (typeof t == "string" || gr(t))
    return t;
  var e = t + "";
  return e == "0" && 1 / t == -Uu ? "-0" : e;
}
function wn(t, e) {
  e = Or(e, t);
  for (var r = 0, n = e.length; t != null && r < n; )
    t = t[Pt(e[r++])];
  return r && r == n ? t : void 0;
}
function Du(t, e, r) {
  var n = t == null ? void 0 : wn(t, e);
  return n === void 0 ? r : n;
}
function xn(t, e) {
  for (var r = -1, n = e.length, i = t.length; ++r < n; )
    t[i + r] = e[r];
  return t;
}
var fi = ye ? ye.isConcatSpreadable : void 0;
function Fu(t) {
  return j(t) || _r(t) || !!(fi && t && t[fi]);
}
function Un(t, e, r, n, i) {
  var s = -1, o = t.length;
  for (r || (r = Fu), i || (i = []); ++s < o; ) {
    var c = t[s];
    r(c) ? xn(i, c) : n || (i[i.length] = c);
  }
  return i;
}
function Re(t) {
  var e = t == null ? 0 : t.length;
  return e ? Un(t) : [];
}
var Us = Ps(Object.getPrototypeOf, Object);
function Ds(t, e, r) {
  var n = -1, i = t.length;
  e < 0 && (e = -e > i ? 0 : i + e), r = r > i ? i : r, r < 0 && (r += i), i = e > r ? 0 : r - e >>> 0, e >>>= 0;
  for (var s = Array(i); ++n < i; )
    s[n] = t[n + e];
  return s;
}
function ju(t, e, r, n) {
  var i = -1, s = t == null ? 0 : t.length;
  for (n && s && (r = t[++i]); ++i < s; )
    r = e(r, t[i], i, t);
  return r;
}
function $u() {
  this.__data__ = new He(), this.size = 0;
}
function Gu(t) {
  var e = this.__data__, r = e.delete(t);
  return this.size = e.size, r;
}
function Bu(t) {
  return this.__data__.get(t);
}
function Vu(t) {
  return this.__data__.has(t);
}
var Wu = 200;
function Ku(t, e) {
  var r = this.__data__;
  if (r instanceof He) {
    var n = r.__data__;
    if (!Mt || n.length < Wu - 1)
      return n.push([t, e]), this.size = ++r.size, this;
    r = this.__data__ = new ze(n);
  }
  return r.set(t, e), this.size = r.size, this;
}
function ke(t) {
  var e = this.__data__ = new He(t);
  this.size = e.size;
}
ke.prototype.clear = $u;
ke.prototype.delete = Gu;
ke.prototype.get = Bu;
ke.prototype.has = Vu;
ke.prototype.set = Ku;
function Hu(t, e) {
  return t && Cn(e, Ae(e), t);
}
var Fs = typeof exports == "object" && exports && !exports.nodeType && exports, pi = Fs && typeof module == "object" && module && !module.nodeType && module, zu = pi && pi.exports === Fs, di = zu ? Pe.Buffer : void 0, mi = di ? di.allocUnsafe : void 0;
function Yu(t, e) {
  var r = t.length, n = mi ? mi(r) : new t.constructor(r);
  return t.copy(n), n;
}
function Dn(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length, i = 0, s = []; ++r < n; ) {
    var o = t[r];
    e(o, r, t) && (s[i++] = o);
  }
  return s;
}
function js() {
  return [];
}
var qu = Object.prototype, Xu = qu.propertyIsEnumerable, gi = Object.getOwnPropertySymbols, Fn = gi ? function(t) {
  return t == null ? [] : (t = Object(t), Dn(gi(t), function(e) {
    return Xu.call(t, e);
  }));
} : js;
function Qu(t, e) {
  return Cn(t, Fn(t), e);
}
var Ju = Object.getOwnPropertySymbols, Zu = Ju ? function(t) {
  for (var e = []; t; )
    xn(e, Fn(t)), t = Us(t);
  return e;
} : js;
function $s(t, e, r) {
  var n = e(t);
  return j(t) ? n : xn(n, r(t));
}
function nn(t) {
  return $s(t, Ae, Fn);
}
function el(t) {
  return $s(t, xs, Zu);
}
var sn = ot(Pe, "DataView"), on = ot(Pe, "Promise"), lt = ot(Pe, "Set"), vi = "[object Map]", tl = "[object Object]", Ei = "[object Promise]", Ti = "[object Set]", yi = "[object WeakMap]", _i = "[object DataView]", rl = st(sn), nl = st(Mt), il = st(on), sl = st(lt), ol = st(rn), Ee = Qe;
(sn && Ee(new sn(new ArrayBuffer(1))) != _i || Mt && Ee(new Mt()) != vi || on && Ee(on.resolve()) != Ei || lt && Ee(new lt()) != Ti || rn && Ee(new rn()) != yi) && (Ee = function(t) {
  var e = Qe(t), r = e == tl ? t.constructor : void 0, n = r ? st(r) : "";
  if (n)
    switch (n) {
      case rl:
        return _i;
      case nl:
        return vi;
      case il:
        return Ei;
      case sl:
        return Ti;
      case ol:
        return yi;
    }
  return e;
});
var al = Object.prototype, cl = al.hasOwnProperty;
function ul(t) {
  var e = t.length, r = new t.constructor(e);
  return e && typeof t[0] == "string" && cl.call(t, "index") && (r.index = t.index, r.input = t.input), r;
}
var ir = Pe.Uint8Array;
function ll(t) {
  var e = new t.constructor(t.byteLength);
  return new ir(e).set(new ir(t)), e;
}
function hl(t, e) {
  var r = t.buffer;
  return new t.constructor(r, t.byteOffset, t.byteLength);
}
var fl = /\w*$/;
function pl(t) {
  var e = new t.constructor(t.source, fl.exec(t));
  return e.lastIndex = t.lastIndex, e;
}
var Ai = ye ? ye.prototype : void 0, Si = Ai ? Ai.valueOf : void 0;
function dl(t) {
  return Si ? Object(Si.call(t)) : {};
}
function ml(t, e) {
  var r = t.buffer;
  return new t.constructor(r, t.byteOffset, t.length);
}
var gl = "[object Boolean]", vl = "[object Date]", El = "[object Map]", Tl = "[object Number]", yl = "[object RegExp]", _l = "[object Set]", Al = "[object String]", Sl = "[object Symbol]", Rl = "[object ArrayBuffer]", Ol = "[object DataView]", Ll = "[object Float32Array]", Il = "[object Float64Array]", Cl = "[object Int8Array]", Ml = "[object Int16Array]", bl = "[object Int32Array]", Nl = "[object Uint8Array]", kl = "[object Uint8ClampedArray]", Pl = "[object Uint16Array]", wl = "[object Uint32Array]";
function xl(t, e, r) {
  var n = t.constructor;
  switch (e) {
    case Rl:
      return ll(t);
    case gl:
    case vl:
      return new n(+t);
    case Ol:
      return hl(t);
    case Ll:
    case Il:
    case Cl:
    case Ml:
    case bl:
    case Nl:
    case kl:
    case Pl:
    case wl:
      return ml(t);
    case El:
      return new n();
    case Tl:
    case Al:
      return new n(t);
    case yl:
      return pl(t);
    case _l:
      return new n();
    case Sl:
      return dl(t);
  }
}
function Ul(t) {
  return typeof t.constructor == "function" && !kt(t) ? za(Us(t)) : {};
}
var Dl = "[object Map]";
function Fl(t) {
  return Le(t) && Ee(t) == Dl;
}
var Ri = qe && qe.isMap, jl = Ri ? Ar(Ri) : Fl, $l = "[object Set]";
function Gl(t) {
  return Le(t) && Ee(t) == $l;
}
var Oi = qe && qe.isSet, Bl = Oi ? Ar(Oi) : Gl, Gs = "[object Arguments]", Vl = "[object Array]", Wl = "[object Boolean]", Kl = "[object Date]", Hl = "[object Error]", Bs = "[object Function]", zl = "[object GeneratorFunction]", Yl = "[object Map]", ql = "[object Number]", Vs = "[object Object]", Xl = "[object RegExp]", Ql = "[object Set]", Jl = "[object String]", Zl = "[object Symbol]", eh = "[object WeakMap]", th = "[object ArrayBuffer]", rh = "[object DataView]", nh = "[object Float32Array]", ih = "[object Float64Array]", sh = "[object Int8Array]", oh = "[object Int16Array]", ah = "[object Int32Array]", ch = "[object Uint8Array]", uh = "[object Uint8ClampedArray]", lh = "[object Uint16Array]", hh = "[object Uint32Array]", W = {};
W[Gs] = W[Vl] = W[th] = W[rh] = W[Wl] = W[Kl] = W[nh] = W[ih] = W[sh] = W[oh] = W[ah] = W[Yl] = W[ql] = W[Vs] = W[Xl] = W[Ql] = W[Jl] = W[Zl] = W[ch] = W[uh] = W[lh] = W[hh] = !0;
W[Hl] = W[Bs] = W[eh] = !1;
function qt(t, e, r, n, i, s) {
  var o;
  if (o !== void 0)
    return o;
  if (!_e(t))
    return t;
  var c = j(t);
  if (c)
    return o = ul(t), qa(t, o);
  var a = Ee(t), u = a == Bs || a == zl;
  if (It(t))
    return Yu(t);
  if (a == Vs || a == Gs || u && !i)
    return o = u ? {} : Ul(t), Qu(t, Hu(o, t));
  if (!W[a])
    return i ? t : {};
  o = xl(t, a), s || (s = new ke());
  var l = s.get(t);
  if (l)
    return l;
  s.set(t, o), Bl(t) ? t.forEach(function(f) {
    o.add(qt(f, e, r, f, t, s));
  }) : jl(t) && t.forEach(function(f, g) {
    o.set(g, qt(f, e, r, g, t, s));
  });
  var h = nn, p = c ? void 0 : h(t);
  return Os(p || t, function(f, g) {
    p && (g = f, f = t[g]), yr(o, g, qt(f, e, r, g, t, s));
  }), o;
}
var fh = 4;
function ie(t) {
  return qt(t, fh);
}
function wt(t) {
  for (var e = -1, r = t == null ? 0 : t.length, n = 0, i = []; ++e < r; ) {
    var s = t[e];
    s && (i[n++] = s);
  }
  return i;
}
var ph = "__lodash_hash_undefined__";
function dh(t) {
  return this.__data__.set(t, ph), this;
}
function mh(t) {
  return this.__data__.has(t);
}
function ft(t) {
  var e = -1, r = t == null ? 0 : t.length;
  for (this.__data__ = new ze(); ++e < r; )
    this.add(t[e]);
}
ft.prototype.add = ft.prototype.push = dh;
ft.prototype.has = mh;
function Ws(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n; )
    if (e(t[r], r, t))
      return !0;
  return !1;
}
function jn(t, e) {
  return t.has(e);
}
var gh = 1, vh = 2;
function Ks(t, e, r, n, i, s) {
  var o = r & gh, c = t.length, a = e.length;
  if (c != a && !(o && a > c))
    return !1;
  var u = s.get(t), l = s.get(e);
  if (u && l)
    return u == e && l == t;
  var h = -1, p = !0, f = r & vh ? new ft() : void 0;
  for (s.set(t, e), s.set(e, t); ++h < c; ) {
    var g = t[h], m = e[h];
    if (n)
      var v = o ? n(m, g, h, e, t, s) : n(g, m, h, t, e, s);
    if (v !== void 0) {
      if (v)
        continue;
      p = !1;
      break;
    }
    if (f) {
      if (!Ws(e, function(_, T) {
        if (!jn(f, T) && (g === _ || i(g, _, r, n, s)))
          return f.push(T);
      })) {
        p = !1;
        break;
      }
    } else if (!(g === m || i(g, m, r, n, s))) {
      p = !1;
      break;
    }
  }
  return s.delete(t), s.delete(e), p;
}
function Eh(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n, i) {
    r[++e] = [i, n];
  }), r;
}
function $n(t) {
  var e = -1, r = Array(t.size);
  return t.forEach(function(n) {
    r[++e] = n;
  }), r;
}
var Th = 1, yh = 2, _h = "[object Boolean]", Ah = "[object Date]", Sh = "[object Error]", Rh = "[object Map]", Oh = "[object Number]", Lh = "[object RegExp]", Ih = "[object Set]", Ch = "[object String]", Mh = "[object Symbol]", bh = "[object ArrayBuffer]", Nh = "[object DataView]", Li = ye ? ye.prototype : void 0, Dr = Li ? Li.valueOf : void 0;
function kh(t, e, r, n, i, s, o) {
  switch (r) {
    case Nh:
      if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset)
        return !1;
      t = t.buffer, e = e.buffer;
    case bh:
      return !(t.byteLength != e.byteLength || !s(new ir(t), new ir(e)));
    case _h:
    case Ah:
    case Oh:
      return Nt(+t, +e);
    case Sh:
      return t.name == e.name && t.message == e.message;
    case Lh:
    case Ch:
      return t == e + "";
    case Rh:
      var c = Eh;
    case Ih:
      var a = n & Th;
      if (c || (c = $n), t.size != e.size && !a)
        return !1;
      var u = o.get(t);
      if (u)
        return u == e;
      n |= yh, o.set(t, e);
      var l = Ks(c(t), c(e), n, i, s, o);
      return o.delete(t), l;
    case Mh:
      if (Dr)
        return Dr.call(t) == Dr.call(e);
  }
  return !1;
}
var Ph = 1, wh = Object.prototype, xh = wh.hasOwnProperty;
function Uh(t, e, r, n, i, s) {
  var o = r & Ph, c = nn(t), a = c.length, u = nn(e), l = u.length;
  if (a != l && !o)
    return !1;
  for (var h = a; h--; ) {
    var p = c[h];
    if (!(o ? p in e : xh.call(e, p)))
      return !1;
  }
  var f = s.get(t), g = s.get(e);
  if (f && g)
    return f == e && g == t;
  var m = !0;
  s.set(t, e), s.set(e, t);
  for (var v = o; ++h < a; ) {
    p = c[h];
    var _ = t[p], T = e[p];
    if (n)
      var y = o ? n(T, _, p, e, t, s) : n(_, T, p, t, e, s);
    if (!(y === void 0 ? _ === T || i(_, T, r, n, s) : y)) {
      m = !1;
      break;
    }
    v || (v = p == "constructor");
  }
  if (m && !v) {
    var d = t.constructor, E = e.constructor;
    d != E && "constructor" in t && "constructor" in e && !(typeof d == "function" && d instanceof d && typeof E == "function" && E instanceof E) && (m = !1);
  }
  return s.delete(t), s.delete(e), m;
}
var Dh = 1, Ii = "[object Arguments]", Ci = "[object Array]", $t = "[object Object]", Fh = Object.prototype, Mi = Fh.hasOwnProperty;
function jh(t, e, r, n, i, s) {
  var o = j(t), c = j(e), a = o ? Ci : Ee(t), u = c ? Ci : Ee(e);
  a = a == Ii ? $t : a, u = u == Ii ? $t : u;
  var l = a == $t, h = u == $t, p = a == u;
  if (p && It(t)) {
    if (!It(e))
      return !1;
    o = !0, l = !1;
  }
  if (p && !l)
    return s || (s = new ke()), o || Nn(t) ? Ks(t, e, r, n, i, s) : kh(t, e, a, r, n, i, s);
  if (!(r & Dh)) {
    var f = l && Mi.call(t, "__wrapped__"), g = h && Mi.call(e, "__wrapped__");
    if (f || g) {
      var m = f ? t.value() : t, v = g ? e.value() : e;
      return s || (s = new ke()), i(m, v, r, n, s);
    }
  }
  return p ? (s || (s = new ke()), Uh(t, e, r, n, i, s)) : !1;
}
function Gn(t, e, r, n, i) {
  return t === e ? !0 : t == null || e == null || !Le(t) && !Le(e) ? t !== t && e !== e : jh(t, e, r, n, Gn, i);
}
var $h = 1, Gh = 2;
function Bh(t, e, r, n) {
  var i = r.length, s = i;
  if (t == null)
    return !s;
  for (t = Object(t); i--; ) {
    var o = r[i];
    if (o[2] ? o[1] !== t[o[0]] : !(o[0] in t))
      return !1;
  }
  for (; ++i < s; ) {
    o = r[i];
    var c = o[0], a = t[c], u = o[1];
    if (o[2]) {
      if (a === void 0 && !(c in t))
        return !1;
    } else {
      var l = new ke(), h;
      if (!(h === void 0 ? Gn(u, a, $h | Gh, n, l) : h))
        return !1;
    }
  }
  return !0;
}
function Hs(t) {
  return t === t && !_e(t);
}
function Vh(t) {
  for (var e = Ae(t), r = e.length; r--; ) {
    var n = e[r], i = t[n];
    e[r] = [n, i, Hs(i)];
  }
  return e;
}
function zs(t, e) {
  return function(r) {
    return r == null ? !1 : r[t] === e && (e !== void 0 || t in Object(r));
  };
}
function Wh(t) {
  var e = Vh(t);
  return e.length == 1 && e[0][2] ? zs(e[0][0], e[0][1]) : function(r) {
    return r === t || Bh(r, t, e);
  };
}
function Kh(t, e) {
  return t != null && e in Object(t);
}
function Ys(t, e, r) {
  e = Or(e, t);
  for (var n = -1, i = e.length, s = !1; ++n < i; ) {
    var o = Pt(e[n]);
    if (!(s = t != null && r(t, o)))
      break;
    t = t[o];
  }
  return s || ++n != i ? s : (i = t == null ? 0 : t.length, !!i && bn(i) && Tr(o, i) && (j(t) || _r(t)));
}
function Hh(t, e) {
  return t != null && Ys(t, e, Kh);
}
var zh = 1, Yh = 2;
function qh(t, e) {
  return kn(t) && Hs(e) ? zs(Pt(t), e) : function(r) {
    var n = Du(r, t);
    return n === void 0 && n === e ? Hh(r, t) : Gn(e, n, zh | Yh);
  };
}
function Xh(t) {
  return function(e) {
    return e == null ? void 0 : e[t];
  };
}
function Qh(t) {
  return function(e) {
    return wn(e, t);
  };
}
function Jh(t) {
  return kn(t) ? Xh(Pt(t)) : Qh(t);
}
function xe(t) {
  return typeof t == "function" ? t : t == null ? ht : typeof t == "object" ? j(t) ? qh(t[0], t[1]) : Wh(t) : Jh(t);
}
function Zh(t, e, r, n) {
  for (var i = -1, s = t == null ? 0 : t.length; ++i < s; ) {
    var o = t[i];
    e(n, o, r(o), t);
  }
  return n;
}
function ef(t) {
  return function(e, r, n) {
    for (var i = -1, s = Object(e), o = n(e), c = o.length; c--; ) {
      var a = o[++i];
      if (r(s[a], a, s) === !1)
        break;
    }
    return e;
  };
}
var tf = ef();
function rf(t, e) {
  return t && tf(t, e, Ae);
}
function nf(t, e) {
  return function(r, n) {
    if (r == null)
      return r;
    if (!we(r))
      return t(r, n);
    for (var i = r.length, s = -1, o = Object(r); ++s < i && n(o[s], s, o) !== !1; )
      ;
    return r;
  };
}
var at = nf(rf);
function sf(t, e, r, n) {
  return at(t, function(i, s, o) {
    e(n, i, r(i), o);
  }), n;
}
function of(t, e) {
  return function(r, n) {
    var i = j(r) ? Zh : sf, s = {};
    return i(r, t, xe(n), s);
  };
}
var qs = Object.prototype, af = qs.hasOwnProperty, Bn = Mn(function(t, e) {
  t = Object(t);
  var r = -1, n = e.length, i = n > 2 ? e[2] : void 0;
  for (i && Cs(e[0], e[1], i) && (n = 1); ++r < n; )
    for (var s = e[r], o = xs(s), c = -1, a = o.length; ++c < a; ) {
      var u = o[c], l = t[u];
      (l === void 0 || Nt(l, qs[u]) && !af.call(t, u)) && (t[u] = s[u]);
    }
  return t;
});
function bi(t) {
  return Le(t) && we(t);
}
var cf = 200;
function uf(t, e, r, n) {
  var i = -1, s = Is, o = !0, c = t.length, a = [], u = e.length;
  if (!c)
    return a;
  e.length >= cf && (s = jn, o = !1, e = new ft(e));
  e:
    for (; ++i < c; ) {
      var l = t[i], h = l;
      if (l = l !== 0 ? l : 0, o && h === h) {
        for (var p = u; p--; )
          if (e[p] === h)
            continue e;
        a.push(l);
      } else s(e, h, n) || a.push(l);
    }
  return a;
}
var Lr = Mn(function(t, e) {
  return bi(t) ? uf(t, Un(e, 1, bi, !0)) : [];
});
function pt(t) {
  var e = t == null ? 0 : t.length;
  return e ? t[e - 1] : void 0;
}
function ne(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = e === void 0 ? 1 : Er(e), Ds(t, e < 0 ? 0 : e, n)) : [];
}
function bt(t, e, r) {
  var n = t == null ? 0 : t.length;
  return n ? (e = e === void 0 ? 1 : Er(e), e = n - e, Ds(t, 0, e < 0 ? 0 : e)) : [];
}
function lf(t) {
  return typeof t == "function" ? t : ht;
}
function k(t, e) {
  var r = j(t) ? Os : at;
  return r(t, lf(e));
}
function hf(t, e) {
  for (var r = -1, n = t == null ? 0 : t.length; ++r < n; )
    if (!e(t[r], r, t))
      return !1;
  return !0;
}
function ff(t, e) {
  var r = !0;
  return at(t, function(n, i, s) {
    return r = !!e(n, i, s), r;
  }), r;
}
function Oe(t, e, r) {
  var n = j(t) ? hf : ff;
  return n(t, xe(e));
}
function Xs(t, e) {
  var r = [];
  return at(t, function(n, i, s) {
    e(n, i, s) && r.push(n);
  }), r;
}
function Se(t, e) {
  var r = j(t) ? Dn : Xs;
  return r(t, xe(e));
}
function pf(t) {
  return function(e, r, n) {
    var i = Object(e);
    if (!we(e)) {
      var s = xe(r);
      e = Ae(e), r = function(c) {
        return s(i[c], c, i);
      };
    }
    var o = t(e, r, n);
    return o > -1 ? i[s ? e[o] : o] : void 0;
  };
}
var df = Math.max;
function mf(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = r == null ? 0 : Er(r);
  return i < 0 && (i = df(n + i, 0)), Ls(t, xe(e), i);
}
var dt = pf(mf);
function Ie(t) {
  return t && t.length ? t[0] : void 0;
}
function gf(t, e) {
  var r = -1, n = we(t) ? Array(t.length) : [];
  return at(t, function(i, s, o) {
    n[++r] = e(i, s, o);
  }), n;
}
function C(t, e) {
  var r = j(t) ? vr : gf;
  return r(t, xe(e));
}
function Te(t, e) {
  return Un(C(t, e));
}
var vf = Object.prototype, Ef = vf.hasOwnProperty, Tf = of(function(t, e, r) {
  Ef.call(t, r) ? t[r].push(e) : In(t, r, [e]);
}), yf = Object.prototype, _f = yf.hasOwnProperty;
function Af(t, e) {
  return t != null && _f.call(t, e);
}
function b(t, e) {
  return t != null && Ys(t, e, Af);
}
var Sf = "[object String]";
function he(t) {
  return typeof t == "string" || !j(t) && Le(t) && Qe(t) == Sf;
}
function Rf(t, e) {
  return vr(e, function(r) {
    return t[r];
  });
}
function Z(t) {
  return t == null ? [] : Rf(t, Ae(t));
}
var Of = Math.max;
function ue(t, e, r, n) {
  t = we(t) ? t : Z(t), r = r && !n ? Er(r) : 0;
  var i = t.length;
  return r < 0 && (r = Of(i + r, 0)), he(t) ? r <= i && t.indexOf(e, r) > -1 : !!i && Ln(t, e, r) > -1;
}
function Ni(t, e, r) {
  var n = t == null ? 0 : t.length;
  if (!n)
    return -1;
  var i = 0;
  return Ln(t, e, i);
}
var Lf = "[object Map]", If = "[object Set]", Cf = Object.prototype, Mf = Cf.hasOwnProperty;
function K(t) {
  if (t == null)
    return !0;
  if (we(t) && (j(t) || typeof t == "string" || typeof t.splice == "function" || It(t) || Nn(t) || _r(t)))
    return !t.length;
  var e = Ee(t);
  if (e == Lf || e == If)
    return !t.size;
  if (kt(t))
    return !ws(t).length;
  for (var r in t)
    if (Mf.call(t, r))
      return !1;
  return !0;
}
var bf = "[object RegExp]";
function Nf(t) {
  return Le(t) && Qe(t) == bf;
}
var ki = qe && qe.isRegExp, Be = ki ? Ar(ki) : Nf;
function Ve(t) {
  return t === void 0;
}
var kf = "Expected a function";
function Pf(t) {
  if (typeof t != "function")
    throw new TypeError(kf);
  return function() {
    var e = arguments;
    switch (e.length) {
      case 0:
        return !t.call(this);
      case 1:
        return !t.call(this, e[0]);
      case 2:
        return !t.call(this, e[0], e[1]);
      case 3:
        return !t.call(this, e[0], e[1], e[2]);
    }
    return !t.apply(this, e);
  };
}
function wf(t, e, r, n) {
  if (!_e(t))
    return t;
  e = Or(e, t);
  for (var i = -1, s = e.length, o = s - 1, c = t; c != null && ++i < s; ) {
    var a = Pt(e[i]), u = r;
    if (a === "__proto__" || a === "constructor" || a === "prototype")
      return t;
    if (i != o) {
      var l = c[a];
      u = void 0, u === void 0 && (u = _e(l) ? l : Tr(e[i + 1]) ? [] : {});
    }
    yr(c, a, u), c = c[a];
  }
  return t;
}
function xf(t, e, r) {
  for (var n = -1, i = e.length, s = {}; ++n < i; ) {
    var o = e[n], c = wn(t, o);
    r(c, o) && wf(s, Or(o, t), c);
  }
  return s;
}
function Ce(t, e) {
  if (t == null)
    return {};
  var r = vr(el(t), function(n) {
    return [n];
  });
  return e = xe(e), xf(t, r, function(n, i) {
    return e(n, i[0]);
  });
}
function Uf(t, e, r, n, i) {
  return i(t, function(s, o, c) {
    r = n ? (n = !1, s) : e(r, s, o, c);
  }), r;
}
function me(t, e, r) {
  var n = j(t) ? ju : Uf, i = arguments.length < 3;
  return n(t, xe(e), r, i, at);
}
function Ir(t, e) {
  var r = j(t) ? Dn : Xs;
  return r(t, Pf(xe(e)));
}
function Df(t, e) {
  var r;
  return at(t, function(n, i, s) {
    return r = e(n, i, s), !r;
  }), !!r;
}
function Qs(t, e, r) {
  var n = j(t) ? Ws : Df;
  return n(t, xe(e));
}
var Ff = 1 / 0, jf = lt && 1 / $n(new lt([, -0]))[1] == Ff ? function(t) {
  return new lt(t);
} : J, $f = 200;
function Gf(t, e, r) {
  var n = -1, i = Is, s = t.length, o = !0, c = [], a = c;
  if (s >= $f) {
    var u = jf(t);
    if (u)
      return $n(u);
    o = !1, i = jn, a = new ft();
  } else
    a = c;
  e:
    for (; ++n < s; ) {
      var l = t[n], h = l;
      if (l = l !== 0 ? l : 0, o && h === h) {
        for (var p = a.length; p--; )
          if (a[p] === h)
            continue e;
        c.push(l);
      } else i(a, h, r) || (a !== c && a.push(h), c.push(l));
    }
  return c;
}
function Vn(t) {
  return t && t.length ? Gf(t) : [];
}
function an(t) {
  console && console.error && console.error(`Error: ${t}`);
}
function Js(t) {
  console && console.warn && console.warn(`Warning: ${t}`);
}
function Zs(t) {
  const e = (/* @__PURE__ */ new Date()).getTime(), r = t();
  return { time: (/* @__PURE__ */ new Date()).getTime() - e, value: r };
}
function eo(t) {
  function e() {
  }
  e.prototype = t;
  const r = new e();
  function n() {
    return typeof r.bar;
  }
  return n(), n(), t;
}
function Bf(t) {
  return Vf(t) ? t.LABEL : t.name;
}
function Vf(t) {
  return he(t.LABEL) && t.LABEL !== "";
}
class Ue {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    this._definition = e;
  }
  accept(e) {
    e.visit(this), k(this.definition, (r) => {
      r.accept(e);
    });
  }
}
class ge extends Ue {
  constructor(e) {
    super([]), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
  set definition(e) {
  }
  get definition() {
    return this.referencedRule !== void 0 ? this.referencedRule.definition : [];
  }
  accept(e) {
    e.visit(this);
  }
}
class mt extends Ue {
  constructor(e) {
    super(e.definition), this.orgText = "", de(this, Ce(e, (r) => r !== void 0));
  }
}
class fe extends Ue {
  constructor(e) {
    super(e.definition), this.ignoreAmbiguities = !1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class le extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class De extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class Fe extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class ee extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class Me extends Ue {
  constructor(e) {
    super(e.definition), this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class be extends Ue {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    super(e.definition), this.idx = 1, this.ignoreAmbiguities = !1, this.hasPredicates = !1, de(this, Ce(e, (r) => r !== void 0));
  }
}
class z {
  constructor(e) {
    this.idx = 1, de(this, Ce(e, (r) => r !== void 0));
  }
  accept(e) {
    e.visit(this);
  }
}
function Wf(t) {
  return C(t, Xt);
}
function Xt(t) {
  function e(r) {
    return C(r, Xt);
  }
  if (t instanceof ge) {
    const r = {
      type: "NonTerminal",
      name: t.nonTerminalName,
      idx: t.idx
    };
    return he(t.label) && (r.label = t.label), r;
  } else {
    if (t instanceof fe)
      return {
        type: "Alternative",
        definition: e(t.definition)
      };
    if (t instanceof le)
      return {
        type: "Option",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof De)
      return {
        type: "RepetitionMandatory",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof Fe)
      return {
        type: "RepetitionMandatoryWithSeparator",
        idx: t.idx,
        separator: Xt(new z({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof Me)
      return {
        type: "RepetitionWithSeparator",
        idx: t.idx,
        separator: Xt(new z({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof ee)
      return {
        type: "Repetition",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof be)
      return {
        type: "Alternation",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof z) {
      const r = {
        type: "Terminal",
        name: t.terminalType.name,
        label: Bf(t.terminalType),
        idx: t.idx
      };
      he(t.label) && (r.terminalLabel = t.label);
      const n = t.terminalType.PATTERN;
      return t.terminalType.PATTERN && (r.pattern = Be(n) ? n.source : n), r;
    } else {
      if (t instanceof mt)
        return {
          type: "Rule",
          name: t.name,
          orgText: t.orgText,
          definition: e(t.definition)
        };
      throw Error("non exhaustive match");
    }
  }
}
class gt {
  visit(e) {
    const r = e;
    switch (r.constructor) {
      case ge:
        return this.visitNonTerminal(r);
      case fe:
        return this.visitAlternative(r);
      case le:
        return this.visitOption(r);
      case De:
        return this.visitRepetitionMandatory(r);
      case Fe:
        return this.visitRepetitionMandatoryWithSeparator(r);
      case Me:
        return this.visitRepetitionWithSeparator(r);
      case ee:
        return this.visitRepetition(r);
      case be:
        return this.visitAlternation(r);
      case z:
        return this.visitTerminal(r);
      case mt:
        return this.visitRule(r);
      default:
        throw Error("non exhaustive match");
    }
  }
  /* c8 ignore next */
  visitNonTerminal(e) {
  }
  /* c8 ignore next */
  visitAlternative(e) {
  }
  /* c8 ignore next */
  visitOption(e) {
  }
  /* c8 ignore next */
  visitRepetition(e) {
  }
  /* c8 ignore next */
  visitRepetitionMandatory(e) {
  }
  /* c8 ignore next 3 */
  visitRepetitionMandatoryWithSeparator(e) {
  }
  /* c8 ignore next */
  visitRepetitionWithSeparator(e) {
  }
  /* c8 ignore next */
  visitAlternation(e) {
  }
  /* c8 ignore next */
  visitTerminal(e) {
  }
  /* c8 ignore next */
  visitRule(e) {
  }
}
function Kf(t) {
  return t instanceof fe || t instanceof le || t instanceof ee || t instanceof De || t instanceof Fe || t instanceof Me || t instanceof z || t instanceof mt;
}
function sr(t, e = []) {
  return t instanceof le || t instanceof ee || t instanceof Me ? !0 : t instanceof be ? Qs(t.definition, (r) => sr(r, e)) : t instanceof ge && ue(e, t) ? !1 : t instanceof Ue ? (t instanceof ge && e.push(t), Oe(t.definition, (r) => sr(r, e))) : !1;
}
function Hf(t) {
  return t instanceof be;
}
function Ne(t) {
  if (t instanceof ge)
    return "SUBRULE";
  if (t instanceof le)
    return "OPTION";
  if (t instanceof be)
    return "OR";
  if (t instanceof De)
    return "AT_LEAST_ONE";
  if (t instanceof Fe)
    return "AT_LEAST_ONE_SEP";
  if (t instanceof Me)
    return "MANY_SEP";
  if (t instanceof ee)
    return "MANY";
  if (t instanceof z)
    return "CONSUME";
  throw Error("non exhaustive match");
}
class Cr {
  walk(e, r = []) {
    k(e.definition, (n, i) => {
      const s = ne(e.definition, i + 1);
      if (n instanceof ge)
        this.walkProdRef(n, s, r);
      else if (n instanceof z)
        this.walkTerminal(n, s, r);
      else if (n instanceof fe)
        this.walkFlat(n, s, r);
      else if (n instanceof le)
        this.walkOption(n, s, r);
      else if (n instanceof De)
        this.walkAtLeastOne(n, s, r);
      else if (n instanceof Fe)
        this.walkAtLeastOneSep(n, s, r);
      else if (n instanceof Me)
        this.walkManySep(n, s, r);
      else if (n instanceof ee)
        this.walkMany(n, s, r);
      else if (n instanceof be)
        this.walkOr(n, s, r);
      else
        throw Error("non exhaustive match");
    });
  }
  walkTerminal(e, r, n) {
  }
  walkProdRef(e, r, n) {
  }
  walkFlat(e, r, n) {
    const i = r.concat(n);
    this.walk(e, i);
  }
  walkOption(e, r, n) {
    const i = r.concat(n);
    this.walk(e, i);
  }
  walkAtLeastOne(e, r, n) {
    const i = [
      new le({ definition: e.definition })
    ].concat(r, n);
    this.walk(e, i);
  }
  walkAtLeastOneSep(e, r, n) {
    const i = Pi(e, r, n);
    this.walk(e, i);
  }
  walkMany(e, r, n) {
    const i = [
      new le({ definition: e.definition })
    ].concat(r, n);
    this.walk(e, i);
  }
  walkManySep(e, r, n) {
    const i = Pi(e, r, n);
    this.walk(e, i);
  }
  walkOr(e, r, n) {
    const i = r.concat(n);
    k(e.definition, (s) => {
      const o = new fe({ definition: [s] });
      this.walk(o, i);
    });
  }
}
function Pi(t, e, r) {
  return [
    new le({
      definition: [
        new z({ terminalType: t.separator })
      ].concat(t.definition)
    })
  ].concat(e, r);
}
function xt(t) {
  if (t instanceof ge)
    return xt(t.referencedRule);
  if (t instanceof z)
    return qf(t);
  if (Kf(t))
    return zf(t);
  if (Hf(t))
    return Yf(t);
  throw Error("non exhaustive match");
}
function zf(t) {
  let e = [];
  const r = t.definition;
  let n = 0, i = r.length > n, s, o = !0;
  for (; i && o; )
    s = r[n], o = sr(s), e = e.concat(xt(s)), n = n + 1, i = r.length > n;
  return Vn(e);
}
function Yf(t) {
  const e = C(t.definition, (r) => xt(r));
  return Vn(Re(e));
}
function qf(t) {
  return [t.terminalType];
}
const to = "_~IN~_";
class Xf extends Cr {
  constructor(e) {
    super(), this.topProd = e, this.follows = {};
  }
  startWalking() {
    return this.walk(this.topProd), this.follows;
  }
  walkTerminal(e, r, n) {
  }
  walkProdRef(e, r, n) {
    const i = Jf(e.referencedRule, e.idx) + this.topProd.name, s = r.concat(n), o = new fe({ definition: s }), c = xt(o);
    this.follows[i] = c;
  }
}
function Qf(t) {
  const e = {};
  return k(t, (r) => {
    const n = new Xf(r).startWalking();
    de(e, n);
  }), e;
}
function Jf(t, e) {
  return t.name + e + to;
}
function P(t) {
  return t.charCodeAt(0);
}
function Fr(t, e) {
  Array.isArray(t) ? t.forEach(function(r) {
    e.push(r);
  }) : e.push(t);
}
function Et(t, e) {
  if (t[e] === !0)
    throw "duplicate flag " + e;
  t[e], t[e] = !0;
}
function ut(t) {
  if (t === void 0)
    throw Error("Internal Error - Should never get here!");
  return !0;
}
function Zf() {
  throw Error("Internal Error - Should never get here!");
}
function wi(t) {
  return t.type === "Character";
}
const or = [];
for (let t = P("0"); t <= P("9"); t++)
  or.push(t);
const ar = [P("_")].concat(or);
for (let t = P("a"); t <= P("z"); t++)
  ar.push(t);
for (let t = P("A"); t <= P("Z"); t++)
  ar.push(t);
const xi = [
  P(" "),
  P("\f"),
  P(`
`),
  P("\r"),
  P("	"),
  P("\v"),
  P("	"),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P(" "),
  P("\u2028"),
  P("\u2029"),
  P(" "),
  P(" "),
  P("　"),
  P("\uFEFF")
], ep = /[0-9a-fA-F]/, Gt = /[0-9]/, tp = /[1-9]/;
class rp {
  constructor() {
    this.idx = 0, this.input = "", this.groupIdx = 0;
  }
  saveState() {
    return {
      idx: this.idx,
      input: this.input,
      groupIdx: this.groupIdx
    };
  }
  restoreState(e) {
    this.idx = e.idx, this.input = e.input, this.groupIdx = e.groupIdx;
  }
  pattern(e) {
    this.idx = 0, this.input = e, this.groupIdx = 0, this.consumeChar("/");
    const r = this.disjunction();
    this.consumeChar("/");
    const n = {
      type: "Flags",
      loc: { begin: this.idx, end: e.length },
      global: !1,
      ignoreCase: !1,
      multiLine: !1,
      unicode: !1,
      sticky: !1
    };
    for (; this.isRegExpFlag(); )
      switch (this.popChar()) {
        case "g":
          Et(n, "global");
          break;
        case "i":
          Et(n, "ignoreCase");
          break;
        case "m":
          Et(n, "multiLine");
          break;
        case "u":
          Et(n, "unicode");
          break;
        case "y":
          Et(n, "sticky");
          break;
      }
    if (this.idx !== this.input.length)
      throw Error("Redundant input: " + this.input.substring(this.idx));
    return {
      type: "Pattern",
      flags: n,
      value: r,
      loc: this.loc(0)
    };
  }
  disjunction() {
    const e = [], r = this.idx;
    for (e.push(this.alternative()); this.peekChar() === "|"; )
      this.consumeChar("|"), e.push(this.alternative());
    return { type: "Disjunction", value: e, loc: this.loc(r) };
  }
  alternative() {
    const e = [], r = this.idx;
    for (; this.isTerm(); )
      e.push(this.term());
    return { type: "Alternative", value: e, loc: this.loc(r) };
  }
  term() {
    return this.isAssertion() ? this.assertion() : this.atom();
  }
  assertion() {
    const e = this.idx;
    switch (this.popChar()) {
      case "^":
        return {
          type: "StartAnchor",
          loc: this.loc(e)
        };
      case "$":
        return { type: "EndAnchor", loc: this.loc(e) };
      case "\\":
        switch (this.popChar()) {
          case "b":
            return {
              type: "WordBoundary",
              loc: this.loc(e)
            };
          case "B":
            return {
              type: "NonWordBoundary",
              loc: this.loc(e)
            };
        }
        throw Error("Invalid Assertion Escape");
      case "(":
        this.consumeChar("?");
        let r;
        switch (this.popChar()) {
          case "=":
            r = "Lookahead";
            break;
          case "!":
            r = "NegativeLookahead";
            break;
        }
        ut(r);
        const n = this.disjunction();
        return this.consumeChar(")"), {
          type: r,
          value: n,
          loc: this.loc(e)
        };
    }
    return Zf();
  }
  quantifier(e = !1) {
    let r;
    const n = this.idx;
    switch (this.popChar()) {
      case "*":
        r = {
          atLeast: 0,
          atMost: 1 / 0
        };
        break;
      case "+":
        r = {
          atLeast: 1,
          atMost: 1 / 0
        };
        break;
      case "?":
        r = {
          atLeast: 0,
          atMost: 1
        };
        break;
      case "{":
        const i = this.integerIncludingZero();
        switch (this.popChar()) {
          case "}":
            r = {
              atLeast: i,
              atMost: i
            };
            break;
          case ",":
            let s;
            this.isDigit() ? (s = this.integerIncludingZero(), r = {
              atLeast: i,
              atMost: s
            }) : r = {
              atLeast: i,
              atMost: 1 / 0
            }, this.consumeChar("}");
            break;
        }
        if (e === !0 && r === void 0)
          return;
        ut(r);
        break;
    }
    if (!(e === !0 && r === void 0) && ut(r))
      return this.peekChar(0) === "?" ? (this.consumeChar("?"), r.greedy = !1) : r.greedy = !0, r.type = "Quantifier", r.loc = this.loc(n), r;
  }
  atom() {
    let e;
    const r = this.idx;
    switch (this.peekChar()) {
      case ".":
        e = this.dotAll();
        break;
      case "\\":
        e = this.atomEscape();
        break;
      case "[":
        e = this.characterClass();
        break;
      case "(":
        e = this.group();
        break;
    }
    if (e === void 0 && this.isPatternCharacter() && (e = this.patternCharacter()), ut(e))
      return e.loc = this.loc(r), this.isQuantifier() && (e.quantifier = this.quantifier()), e;
  }
  dotAll() {
    return this.consumeChar("."), {
      type: "Set",
      complement: !0,
      value: [P(`
`), P("\r"), P("\u2028"), P("\u2029")]
    };
  }
  atomEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.decimalEscapeAtom();
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  decimalEscapeAtom() {
    return { type: "GroupBackReference", value: this.positiveInteger() };
  }
  characterClassEscape() {
    let e, r = !1;
    switch (this.popChar()) {
      case "d":
        e = or;
        break;
      case "D":
        e = or, r = !0;
        break;
      case "s":
        e = xi;
        break;
      case "S":
        e = xi, r = !0;
        break;
      case "w":
        e = ar;
        break;
      case "W":
        e = ar, r = !0;
        break;
    }
    if (ut(e))
      return { type: "Set", value: e, complement: r };
  }
  controlEscapeAtom() {
    let e;
    switch (this.popChar()) {
      case "f":
        e = P("\f");
        break;
      case "n":
        e = P(`
`);
        break;
      case "r":
        e = P("\r");
        break;
      case "t":
        e = P("	");
        break;
      case "v":
        e = P("\v");
        break;
    }
    if (ut(e))
      return { type: "Character", value: e };
  }
  controlLetterEscapeAtom() {
    this.consumeChar("c");
    const e = this.popChar();
    if (/[a-zA-Z]/.test(e) === !1)
      throw Error("Invalid ");
    return { type: "Character", value: e.toUpperCase().charCodeAt(0) - 64 };
  }
  nulCharacterAtom() {
    return this.consumeChar("0"), { type: "Character", value: P("\0") };
  }
  hexEscapeSequenceAtom() {
    return this.consumeChar("x"), this.parseHexDigits(2);
  }
  regExpUnicodeEscapeSequenceAtom() {
    return this.consumeChar("u"), this.parseHexDigits(4);
  }
  identityEscapeAtom() {
    const e = this.popChar();
    return { type: "Character", value: P(e) };
  }
  classPatternCharacterAtom() {
    switch (this.peekChar()) {
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
      case "\\":
      case "]":
        throw Error("TBD");
      default:
        const e = this.popChar();
        return { type: "Character", value: P(e) };
    }
  }
  characterClass() {
    const e = [];
    let r = !1;
    for (this.consumeChar("["), this.peekChar(0) === "^" && (this.consumeChar("^"), r = !0); this.isClassAtom(); ) {
      const n = this.classAtom();
      if (n.type, wi(n) && this.isRangeDash()) {
        this.consumeChar("-");
        const i = this.classAtom();
        if (i.type, wi(i)) {
          if (i.value < n.value)
            throw Error("Range out of order in character class");
          e.push({ from: n.value, to: i.value });
        } else
          Fr(n.value, e), e.push(P("-")), Fr(i.value, e);
      } else
        Fr(n.value, e);
    }
    return this.consumeChar("]"), { type: "Set", complement: r, value: e };
  }
  classAtom() {
    switch (this.peekChar()) {
      case "]":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        throw Error("TBD");
      case "\\":
        return this.classEscape();
      default:
        return this.classPatternCharacterAtom();
    }
  }
  classEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      case "b":
        return this.consumeChar("b"), { type: "Character", value: P("\b") };
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  group() {
    let e = !0;
    switch (this.consumeChar("("), this.peekChar(0)) {
      case "?":
        this.consumeChar("?"), this.consumeChar(":"), e = !1;
        break;
      default:
        this.groupIdx++;
        break;
    }
    const r = this.disjunction();
    this.consumeChar(")");
    const n = {
      type: "Group",
      capturing: e,
      value: r
    };
    return e && (n.idx = this.groupIdx), n;
  }
  positiveInteger() {
    let e = this.popChar();
    if (tp.test(e) === !1)
      throw Error("Expecting a positive integer");
    for (; Gt.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  integerIncludingZero() {
    let e = this.popChar();
    if (Gt.test(e) === !1)
      throw Error("Expecting an integer");
    for (; Gt.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  patternCharacter() {
    const e = this.popChar();
    switch (e) {
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
      case "^":
      case "$":
      case "\\":
      case ".":
      case "*":
      case "+":
      case "?":
      case "(":
      case ")":
      case "[":
      case "|":
        throw Error("TBD");
      default:
        return { type: "Character", value: P(e) };
    }
  }
  isRegExpFlag() {
    switch (this.peekChar(0)) {
      case "g":
      case "i":
      case "m":
      case "u":
      case "y":
        return !0;
      default:
        return !1;
    }
  }
  isRangeDash() {
    return this.peekChar() === "-" && this.isClassAtom(1);
  }
  isDigit() {
    return Gt.test(this.peekChar(0));
  }
  isClassAtom(e = 0) {
    switch (this.peekChar(e)) {
      case "]":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  isTerm() {
    return this.isAtom() || this.isAssertion();
  }
  isAtom() {
    if (this.isPatternCharacter())
      return !0;
    switch (this.peekChar(0)) {
      case ".":
      case "\\":
      case "[":
      case "(":
        return !0;
      default:
        return !1;
    }
  }
  isAssertion() {
    switch (this.peekChar(0)) {
      case "^":
      case "$":
        return !0;
      case "\\":
        switch (this.peekChar(1)) {
          case "b":
          case "B":
            return !0;
          default:
            return !1;
        }
      case "(":
        return this.peekChar(1) === "?" && (this.peekChar(2) === "=" || this.peekChar(2) === "!");
      default:
        return !1;
    }
  }
  isQuantifier() {
    const e = this.saveState();
    try {
      return this.quantifier(!0) !== void 0;
    } catch {
      return !1;
    } finally {
      this.restoreState(e);
    }
  }
  isPatternCharacter() {
    switch (this.peekChar()) {
      case "^":
      case "$":
      case "\\":
      case ".":
      case "*":
      case "+":
      case "?":
      case "(":
      case ")":
      case "[":
      case "|":
      case "/":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  parseHexDigits(e) {
    let r = "";
    for (let n = 0; n < e; n++) {
      const i = this.popChar();
      if (ep.test(i) === !1)
        throw Error("Expecting a HexDecimal digits");
      r += i;
    }
    return { type: "Character", value: parseInt(r, 16) };
  }
  peekChar(e = 0) {
    return this.input[this.idx + e];
  }
  popChar() {
    const e = this.peekChar(0);
    return this.consumeChar(void 0), e;
  }
  consumeChar(e) {
    if (e !== void 0 && this.input[this.idx] !== e)
      throw Error("Expected: '" + e + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
    if (this.idx >= this.input.length)
      throw Error("Unexpected end of input");
    this.idx++;
  }
  loc(e) {
    return { begin: e, end: this.idx };
  }
}
class Wn {
  visitChildren(e) {
    for (const r in e) {
      const n = e[r];
      e.hasOwnProperty(r) && (n.type !== void 0 ? this.visit(n) : Array.isArray(n) && n.forEach((i) => {
        this.visit(i);
      }, this));
    }
  }
  visit(e) {
    switch (e.type) {
      case "Pattern":
        this.visitPattern(e);
        break;
      case "Flags":
        this.visitFlags(e);
        break;
      case "Disjunction":
        this.visitDisjunction(e);
        break;
      case "Alternative":
        this.visitAlternative(e);
        break;
      case "StartAnchor":
        this.visitStartAnchor(e);
        break;
      case "EndAnchor":
        this.visitEndAnchor(e);
        break;
      case "WordBoundary":
        this.visitWordBoundary(e);
        break;
      case "NonWordBoundary":
        this.visitNonWordBoundary(e);
        break;
      case "Lookahead":
        this.visitLookahead(e);
        break;
      case "NegativeLookahead":
        this.visitNegativeLookahead(e);
        break;
      case "Character":
        this.visitCharacter(e);
        break;
      case "Set":
        this.visitSet(e);
        break;
      case "Group":
        this.visitGroup(e);
        break;
      case "GroupBackReference":
        this.visitGroupBackReference(e);
        break;
      case "Quantifier":
        this.visitQuantifier(e);
        break;
    }
    this.visitChildren(e);
  }
  visitPattern(e) {
  }
  visitFlags(e) {
  }
  visitDisjunction(e) {
  }
  visitAlternative(e) {
  }
  // Assertion
  visitStartAnchor(e) {
  }
  visitEndAnchor(e) {
  }
  visitWordBoundary(e) {
  }
  visitNonWordBoundary(e) {
  }
  visitLookahead(e) {
  }
  visitNegativeLookahead(e) {
  }
  // atoms
  visitCharacter(e) {
  }
  visitSet(e) {
  }
  visitGroup(e) {
  }
  visitGroupBackReference(e) {
  }
  visitQuantifier(e) {
  }
}
let Qt = {};
const np = new rp();
function Mr(t) {
  const e = t.toString();
  if (Qt.hasOwnProperty(e))
    return Qt[e];
  {
    const r = np.pattern(e);
    return Qt[e] = r, r;
  }
}
function ip() {
  Qt = {};
}
const ro = "Complement Sets are not supported for first char optimization", cr = `Unable to use "first char" lexer optimizations:
`;
function sp(t, e = !1) {
  try {
    const r = Mr(t);
    return cn(r.value, {}, r.flags.ignoreCase);
  } catch (r) {
    if (r.message === ro)
      e && Js(`${cr}	Unable to optimize: < ${t.toString()} >
	Complement Sets cannot be automatically optimized.
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.`);
    else {
      let n = "";
      e && (n = `
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.`), an(`${cr}
	Failed parsing: < ${t.toString()} >
	Using the @chevrotain/regexp-to-ast library
	Please open an issue at: https://github.com/chevrotain/chevrotain/issues` + n);
    }
  }
  return [];
}
function cn(t, e, r) {
  switch (t.type) {
    case "Disjunction":
      for (let i = 0; i < t.value.length; i++)
        cn(t.value[i], e, r);
      break;
    case "Alternative":
      const n = t.value;
      for (let i = 0; i < n.length; i++) {
        const s = n[i];
        switch (s.type) {
          case "EndAnchor":
          case "GroupBackReference":
          case "Lookahead":
          case "NegativeLookahead":
          case "StartAnchor":
          case "WordBoundary":
          case "NonWordBoundary":
            continue;
        }
        const o = s;
        switch (o.type) {
          case "Character":
            Bt(o.value, e, r);
            break;
          case "Set":
            if (o.complement === !0)
              throw Error(ro);
            k(o.value, (a) => {
              if (typeof a == "number")
                Bt(a, e, r);
              else {
                const u = a;
                if (r === !0)
                  for (let l = u.from; l <= u.to; l++)
                    Bt(l, e, r);
                else {
                  for (let l = u.from; l <= u.to && l < St; l++)
                    Bt(l, e, r);
                  if (u.to >= St) {
                    const l = u.from >= St ? u.from : St, h = u.to, p = Xe(l), f = Xe(h);
                    for (let g = p; g <= f; g++)
                      e[g] = g;
                  }
                }
              }
            });
            break;
          case "Group":
            cn(o.value, e, r);
            break;
          default:
            throw Error("Non Exhaustive Match");
        }
        const c = o.quantifier !== void 0 && o.quantifier.atLeast === 0;
        if (
          // A group may be optional due to empty contents /(?:)/
          // or if everything inside it is optional /((a)?)/
          o.type === "Group" && un(o) === !1 || // If this term is not a group it may only be optional if it has an optional quantifier
          o.type !== "Group" && c === !1
        )
          break;
      }
      break;
    default:
      throw Error("non exhaustive match!");
  }
  return Z(e);
}
function Bt(t, e, r) {
  const n = Xe(t);
  e[n] = n, r === !0 && op(t, e);
}
function op(t, e) {
  const r = String.fromCharCode(t), n = r.toUpperCase();
  if (n !== r) {
    const i = Xe(n.charCodeAt(0));
    e[i] = i;
  } else {
    const i = r.toLowerCase();
    if (i !== r) {
      const s = Xe(i.charCodeAt(0));
      e[s] = s;
    }
  }
}
function Ui(t, e) {
  return dt(t.value, (r) => {
    if (typeof r == "number")
      return ue(e, r);
    {
      const n = r;
      return dt(e, (i) => n.from <= i && i <= n.to) !== void 0;
    }
  });
}
function un(t) {
  const e = t.quantifier;
  return e && e.atLeast === 0 ? !0 : t.value ? j(t.value) ? Oe(t.value, un) : un(t.value) : !1;
}
class ap extends Wn {
  constructor(e) {
    super(), this.targetCharCodes = e, this.found = !1;
  }
  visitChildren(e) {
    if (this.found !== !0) {
      switch (e.type) {
        case "Lookahead":
          this.visitLookahead(e);
          return;
        case "NegativeLookahead":
          this.visitNegativeLookahead(e);
          return;
      }
      super.visitChildren(e);
    }
  }
  visitCharacter(e) {
    ue(this.targetCharCodes, e.value) && (this.found = !0);
  }
  visitSet(e) {
    e.complement ? Ui(e, this.targetCharCodes) === void 0 && (this.found = !0) : Ui(e, this.targetCharCodes) !== void 0 && (this.found = !0);
  }
}
function Kn(t, e) {
  if (e instanceof RegExp) {
    const r = Mr(e), n = new ap(t);
    return n.visit(r), n.found;
  } else
    return dt(e, (r) => ue(t, r.charCodeAt(0))) !== void 0;
}
const nt = "PATTERN", At = "defaultMode", Vt = "modes";
let no = typeof new RegExp("(?:)").sticky == "boolean";
function cp(t, e) {
  e = Bn(e, {
    useSticky: no,
    debug: !1,
    safeMode: !1,
    positionTracking: "full",
    lineTerminatorCharacters: ["\r", `
`],
    tracer: (T, y) => y()
  });
  const r = e.tracer;
  r("initCharCodeToOptimizedIndexMap", () => {
    Np();
  });
  let n;
  r("Reject Lexer.NA", () => {
    n = Ir(t, (T) => T[nt] === ae.NA);
  });
  let i = !1, s;
  r("Transform Patterns", () => {
    i = !1, s = C(n, (T) => {
      const y = T[nt];
      if (Be(y)) {
        const d = y.source;
        return d.length === 1 && // only these regExp meta characters which can appear in a length one regExp
        d !== "^" && d !== "$" && d !== "." && !y.ignoreCase ? d : d.length === 2 && d[0] === "\\" && // not a meta character
        !ue([
          "d",
          "D",
          "s",
          "S",
          "t",
          "r",
          "n",
          "t",
          "0",
          "c",
          "b",
          "B",
          "f",
          "v",
          "w",
          "W"
        ], d[1]) ? d[1] : e.useSticky ? Fi(y) : Di(y);
      } else {
        if (Ke(y))
          return i = !0, { exec: y };
        if (typeof y == "object")
          return i = !0, y;
        if (typeof y == "string") {
          if (y.length === 1)
            return y;
          {
            const d = y.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&"), E = new RegExp(d);
            return e.useSticky ? Fi(E) : Di(E);
          }
        } else
          throw Error("non exhaustive match");
      }
    });
  });
  let o, c, a, u, l;
  r("misc mapping", () => {
    o = C(n, (T) => T.tokenTypeIdx), c = C(n, (T) => {
      const y = T.GROUP;
      if (y !== ae.SKIPPED) {
        if (he(y))
          return y;
        if (Ve(y))
          return !1;
        throw Error("non exhaustive match");
      }
    }), a = C(n, (T) => {
      const y = T.LONGER_ALT;
      if (y)
        return j(y) ? C(y, (d) => Ni(n, d)) : [Ni(n, y)];
    }), u = C(n, (T) => T.PUSH_MODE), l = C(n, (T) => b(T, "POP_MODE"));
  });
  let h;
  r("Line Terminator Handling", () => {
    const T = oo(e.lineTerminatorCharacters);
    h = C(n, (y) => !1), e.positionTracking !== "onlyOffset" && (h = C(n, (y) => b(y, "LINE_BREAKS") ? !!y.LINE_BREAKS : so(y, T) === !1 && Kn(T, y.PATTERN)));
  });
  let p, f, g, m;
  r("Misc Mapping #2", () => {
    p = C(n, io), f = C(s, Cp), g = me(n, (T, y) => {
      const d = y.GROUP;
      return he(d) && d !== ae.SKIPPED && (T[d] = []), T;
    }, {}), m = C(s, (T, y) => ({
      pattern: s[y],
      longerAlt: a[y],
      canLineTerminator: h[y],
      isCustom: p[y],
      short: f[y],
      group: c[y],
      push: u[y],
      pop: l[y],
      tokenTypeIdx: o[y],
      tokenType: n[y]
    }));
  });
  let v = !0, _ = [];
  return e.safeMode || r("First Char Optimization", () => {
    _ = me(n, (T, y, d) => {
      if (typeof y.PATTERN == "string") {
        const E = y.PATTERN.charCodeAt(0), I = Xe(E);
        jr(T, I, m[d]);
      } else if (j(y.START_CHARS_HINT)) {
        let E;
        k(y.START_CHARS_HINT, (I) => {
          const R = typeof I == "string" ? I.charCodeAt(0) : I, D = Xe(R);
          E !== D && (E = D, jr(T, D, m[d]));
        });
      } else if (Be(y.PATTERN))
        if (y.PATTERN.unicode)
          v = !1, e.ensureOptimizations && an(`${cr}	Unable to analyze < ${y.PATTERN.toString()} > pattern.
	The regexp unicode flag is not currently supported by the regexp-to-ast library.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE`);
        else {
          const E = sp(y.PATTERN, e.ensureOptimizations);
          K(E) && (v = !1), k(E, (I) => {
            jr(T, I, m[d]);
          });
        }
      else
        e.ensureOptimizations && an(`${cr}	TokenType: <${y.name}> is using a custom token pattern without providing <start_chars_hint> parameter.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE`), v = !1;
      return T;
    }, []);
  }), {
    emptyGroups: g,
    patternIdxToConfig: m,
    charCodeToPatternIdxToConfig: _,
    hasCustom: i,
    canBeOptimized: v
  };
}
function up(t, e) {
  let r = [];
  const n = hp(t);
  r = r.concat(n.errors);
  const i = fp(n.valid), s = i.valid;
  return r = r.concat(i.errors), r = r.concat(lp(s)), r = r.concat(yp(s)), r = r.concat(_p(s, e)), r = r.concat(Ap(s)), r;
}
function lp(t) {
  let e = [];
  const r = Se(t, (n) => Be(n[nt]));
  return e = e.concat(dp(r)), e = e.concat(vp(r)), e = e.concat(Ep(r)), e = e.concat(Tp(r)), e = e.concat(mp(r)), e;
}
function hp(t) {
  const e = Se(t, (i) => !b(i, nt)), r = C(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- missing static 'PATTERN' property",
    type: q.MISSING_PATTERN,
    tokenTypes: [i]
  })), n = Lr(t, e);
  return { errors: r, valid: n };
}
function fp(t) {
  const e = Se(t, (i) => {
    const s = i[nt];
    return !Be(s) && !Ke(s) && !b(s, "exec") && !he(s);
  }), r = C(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
    type: q.INVALID_PATTERN,
    tokenTypes: [i]
  })), n = Lr(t, e);
  return { errors: r, valid: n };
}
const pp = /[^\\][$]/;
function dp(t) {
  class e extends Wn {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitEndAnchor(i) {
      this.found = !0;
    }
  }
  const r = Se(t, (n) => {
    const i = n.PATTERN;
    try {
      const s = Mr(i), o = new e();
      return o.visit(s), o.found;
    } catch {
      return pp.test(i.source);
    }
  });
  return C(r, (n) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + n.name + `<- static 'PATTERN' cannot contain end of input anchor '$'
	See chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: q.EOI_ANCHOR_FOUND,
    tokenTypes: [n]
  }));
}
function mp(t) {
  const e = Se(t, (r) => r.PATTERN.test(""));
  return C(e, (r) => ({
    message: "Token Type: ->" + r.name + "<- static 'PATTERN' must not match an empty string",
    type: q.EMPTY_MATCH_PATTERN,
    tokenTypes: [r]
  }));
}
const gp = /[^\\[][\^]|^\^/;
function vp(t) {
  class e extends Wn {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitStartAnchor(i) {
      this.found = !0;
    }
  }
  const r = Se(t, (n) => {
    const i = n.PATTERN;
    try {
      const s = Mr(i), o = new e();
      return o.visit(s), o.found;
    } catch {
      return gp.test(i.source);
    }
  });
  return C(r, (n) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + n.name + `<- static 'PATTERN' cannot contain start of input anchor '^'
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: q.SOI_ANCHOR_FOUND,
    tokenTypes: [n]
  }));
}
function Ep(t) {
  const e = Se(t, (r) => {
    const n = r[nt];
    return n instanceof RegExp && (n.multiline || n.global);
  });
  return C(e, (r) => ({
    message: "Token Type: ->" + r.name + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
    type: q.UNSUPPORTED_FLAGS_FOUND,
    tokenTypes: [r]
  }));
}
function Tp(t) {
  const e = [];
  let r = C(t, (i) => me(t, (s, o) => (i.PATTERN.source === o.PATTERN.source && !ue(e, o) && o.PATTERN !== ae.NA && (e.push(o), s.push(o)), s), []));
  r = wt(r);
  const n = Se(r, (i) => i.length > 1);
  return C(n, (i) => {
    const s = C(i, (o) => o.name);
    return {
      message: `The same RegExp pattern ->${Ie(i).PATTERN}<-has been used in all of the following Token Types: ${s.join(", ")} <-`,
      type: q.DUPLICATE_PATTERNS_FOUND,
      tokenTypes: i
    };
  });
}
function yp(t) {
  const e = Se(t, (r) => {
    if (!b(r, "GROUP"))
      return !1;
    const n = r.GROUP;
    return n !== ae.SKIPPED && n !== ae.NA && !he(n);
  });
  return C(e, (r) => ({
    message: "Token Type: ->" + r.name + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
    type: q.INVALID_GROUP_TYPE_FOUND,
    tokenTypes: [r]
  }));
}
function _p(t, e) {
  const r = Se(t, (n) => n.PUSH_MODE !== void 0 && !ue(e, n.PUSH_MODE));
  return C(r, (n) => ({
    message: `Token Type: ->${n.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${n.PUSH_MODE}<-which does not exist`,
    type: q.PUSH_MODE_DOES_NOT_EXIST,
    tokenTypes: [n]
  }));
}
function Ap(t) {
  const e = [], r = me(t, (n, i, s) => {
    const o = i.PATTERN;
    return o === ae.NA || (he(o) ? n.push({ str: o, idx: s, tokenType: i }) : Be(o) && Rp(o) && n.push({ str: o.source, idx: s, tokenType: i })), n;
  }, []);
  return k(t, (n, i) => {
    k(r, ({ str: s, idx: o, tokenType: c }) => {
      if (i < o && Sp(s, n.PATTERN)) {
        const a = `Token: ->${c.name}<- can never be matched.
Because it appears AFTER the Token Type ->${n.name}<-in the lexer's definition.
See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;
        e.push({
          message: a,
          type: q.UNREACHABLE_PATTERN,
          tokenTypes: [n, c]
        });
      }
    });
  }), e;
}
function Sp(t, e) {
  if (Be(e)) {
    const r = e.exec(t);
    return r !== null && r.index === 0;
  } else {
    if (Ke(e))
      return e(t, 0, [], {});
    if (b(e, "exec"))
      return e.exec(t, 0, [], {});
    if (typeof e == "string")
      return e === t;
    throw Error("non exhaustive match");
  }
}
function Rp(t) {
  return dt([
    ".",
    "\\",
    "[",
    "]",
    "|",
    "^",
    "$",
    "(",
    ")",
    "?",
    "*",
    "+",
    "{"
  ], (e) => t.source.indexOf(e) !== -1) === void 0;
}
function Di(t) {
  const e = t.ignoreCase ? "i" : "";
  return new RegExp(`^(?:${t.source})`, e);
}
function Fi(t) {
  const e = t.ignoreCase ? "iy" : "y";
  return new RegExp(`${t.source}`, e);
}
function Op(t, e, r) {
  const n = [];
  return b(t, At) || n.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + At + `> property in its definition
`,
    type: q.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
  }), b(t, Vt) || n.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + Vt + `> property in its definition
`,
    type: q.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
  }), b(t, Vt) && b(t, At) && !b(t.modes, t.defaultMode) && n.push({
    message: `A MultiMode Lexer cannot be initialized with a ${At}: <${t.defaultMode}>which does not exist
`,
    type: q.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
  }), b(t, Vt) && k(t.modes, (i, s) => {
    k(i, (o, c) => {
      if (Ve(o))
        n.push({
          message: `A Lexer cannot be initialized using an undefined Token Type. Mode:<${s}> at index: <${c}>
`,
          type: q.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
        });
      else if (b(o, "LONGER_ALT")) {
        const a = j(o.LONGER_ALT) ? o.LONGER_ALT : [o.LONGER_ALT];
        k(a, (u) => {
          !Ve(u) && !ue(i, u) && n.push({
            message: `A MultiMode Lexer cannot be initialized with a longer_alt <${u.name}> on token <${o.name}> outside of mode <${s}>
`,
            type: q.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE
          });
        });
      }
    });
  }), n;
}
function Lp(t, e, r) {
  const n = [];
  let i = !1;
  const s = wt(Re(Z(t.modes))), o = Ir(s, (a) => a[nt] === ae.NA), c = oo(r);
  return e && k(o, (a) => {
    const u = so(a, c);
    if (u !== !1) {
      const l = {
        message: bp(a, u),
        type: u.issue,
        tokenType: a
      };
      n.push(l);
    } else
      b(a, "LINE_BREAKS") ? a.LINE_BREAKS === !0 && (i = !0) : Kn(c, a.PATTERN) && (i = !0);
  }), e && !i && n.push({
    message: `Warning: No LINE_BREAKS Found.
	This Lexer has been defined to track line and column information,
	But none of the Token Types can be identified as matching a line terminator.
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS 
	for details.`,
    type: q.NO_LINE_BREAKS_FLAGS
  }), n;
}
function Ip(t) {
  const e = {}, r = Ae(t);
  return k(r, (n) => {
    const i = t[n];
    if (j(i))
      e[n] = [];
    else
      throw Error("non exhaustive match");
  }), e;
}
function io(t) {
  const e = t.PATTERN;
  if (Be(e))
    return !1;
  if (Ke(e) || b(e, "exec"))
    return !0;
  if (he(e))
    return !1;
  throw Error("non exhaustive match");
}
function Cp(t) {
  return he(t) && t.length === 1 ? t.charCodeAt(0) : !1;
}
const Mp = {
  // implements /\n|\r\n?/g.test
  test: function(t) {
    const e = t.length;
    for (let r = this.lastIndex; r < e; r++) {
      const n = t.charCodeAt(r);
      if (n === 10)
        return this.lastIndex = r + 1, !0;
      if (n === 13)
        return t.charCodeAt(r + 1) === 10 ? this.lastIndex = r + 2 : this.lastIndex = r + 1, !0;
    }
    return !1;
  },
  lastIndex: 0
};
function so(t, e) {
  if (b(t, "LINE_BREAKS"))
    return !1;
  if (Be(t.PATTERN)) {
    try {
      Kn(e, t.PATTERN);
    } catch (r) {
      return {
        issue: q.IDENTIFY_TERMINATOR,
        errMsg: r.message
      };
    }
    return !1;
  } else {
    if (he(t.PATTERN))
      return !1;
    if (io(t))
      return { issue: q.CUSTOM_LINE_BREAK };
    throw Error("non exhaustive match");
  }
}
function bp(t, e) {
  if (e.issue === q.IDENTIFY_TERMINATOR)
    return `Warning: unable to identify line terminator usage in pattern.
	The problem is in the <${t.name}> Token Type
	 Root cause: ${e.errMsg}.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR`;
  if (e.issue === q.CUSTOM_LINE_BREAK)
    return `Warning: A Custom Token Pattern should specify the <line_breaks> option.
	The problem is in the <${t.name}> Token Type
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK`;
  throw Error("non exhaustive match");
}
function oo(t) {
  return C(t, (e) => he(e) ? e.charCodeAt(0) : e);
}
function jr(t, e, r) {
  t[e] === void 0 ? t[e] = [r] : t[e].push(r);
}
const St = 256;
let Jt = [];
function Xe(t) {
  return t < St ? t : Jt[t];
}
function Np() {
  if (K(Jt)) {
    Jt = new Array(65536);
    for (let t = 0; t < 65536; t++)
      Jt[t] = t > 255 ? 255 + ~~(t / 255) : t;
  }
}
function Ut(t, e) {
  const r = t.tokenTypeIdx;
  return r === e.tokenTypeIdx ? !0 : e.isParent === !0 && e.categoryMatchesMap[r] === !0;
}
function ur(t, e) {
  return t.tokenTypeIdx === e.tokenTypeIdx;
}
let ji = 1;
const ao = {};
function Dt(t) {
  const e = kp(t);
  Pp(e), xp(e), wp(e), k(e, (r) => {
    r.isParent = r.categoryMatches.length > 0;
  });
}
function kp(t) {
  let e = ie(t), r = t, n = !0;
  for (; n; ) {
    r = wt(Re(C(r, (s) => s.CATEGORIES)));
    const i = Lr(r, e);
    e = e.concat(i), K(i) ? n = !1 : r = i;
  }
  return e;
}
function Pp(t) {
  k(t, (e) => {
    uo(e) || (ao[ji] = e, e.tokenTypeIdx = ji++), $i(e) && !j(e.CATEGORIES) && (e.CATEGORIES = [e.CATEGORIES]), $i(e) || (e.CATEGORIES = []), Up(e) || (e.categoryMatches = []), Dp(e) || (e.categoryMatchesMap = {});
  });
}
function wp(t) {
  k(t, (e) => {
    e.categoryMatches = [], k(e.categoryMatchesMap, (r, n) => {
      e.categoryMatches.push(ao[n].tokenTypeIdx);
    });
  });
}
function xp(t) {
  k(t, (e) => {
    co([], e);
  });
}
function co(t, e) {
  k(t, (r) => {
    e.categoryMatchesMap[r.tokenTypeIdx] = !0;
  }), k(e.CATEGORIES, (r) => {
    const n = t.concat(e);
    ue(n, r) || co(n, r);
  });
}
function uo(t) {
  return b(t, "tokenTypeIdx");
}
function $i(t) {
  return b(t, "CATEGORIES");
}
function Up(t) {
  return b(t, "categoryMatches");
}
function Dp(t) {
  return b(t, "categoryMatchesMap");
}
function Fp(t) {
  return b(t, "tokenTypeIdx");
}
const jp = {
  buildUnableToPopLexerModeMessage(t) {
    return `Unable to pop Lexer Mode after encountering Token ->${t.image}<- The Mode Stack is empty`;
  },
  buildUnexpectedCharactersMessage(t, e, r, n, i) {
    return `unexpected character: ->${t.charAt(e)}<- at offset: ${e}, skipped ${r} characters.`;
  }
};
var q;
(function(t) {
  t[t.MISSING_PATTERN = 0] = "MISSING_PATTERN", t[t.INVALID_PATTERN = 1] = "INVALID_PATTERN", t[t.EOI_ANCHOR_FOUND = 2] = "EOI_ANCHOR_FOUND", t[t.UNSUPPORTED_FLAGS_FOUND = 3] = "UNSUPPORTED_FLAGS_FOUND", t[t.DUPLICATE_PATTERNS_FOUND = 4] = "DUPLICATE_PATTERNS_FOUND", t[t.INVALID_GROUP_TYPE_FOUND = 5] = "INVALID_GROUP_TYPE_FOUND", t[t.PUSH_MODE_DOES_NOT_EXIST = 6] = "PUSH_MODE_DOES_NOT_EXIST", t[t.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE", t[t.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY", t[t.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST", t[t.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED", t[t.SOI_ANCHOR_FOUND = 11] = "SOI_ANCHOR_FOUND", t[t.EMPTY_MATCH_PATTERN = 12] = "EMPTY_MATCH_PATTERN", t[t.NO_LINE_BREAKS_FLAGS = 13] = "NO_LINE_BREAKS_FLAGS", t[t.UNREACHABLE_PATTERN = 14] = "UNREACHABLE_PATTERN", t[t.IDENTIFY_TERMINATOR = 15] = "IDENTIFY_TERMINATOR", t[t.CUSTOM_LINE_BREAK = 16] = "CUSTOM_LINE_BREAK", t[t.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE = 17] = "MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE";
})(q || (q = {}));
const Rt = {
  deferDefinitionErrorsHandling: !1,
  positionTracking: "full",
  lineTerminatorsPattern: /\n|\r\n?/g,
  lineTerminatorCharacters: [`
`, "\r"],
  ensureOptimizations: !1,
  safeMode: !1,
  errorMessageProvider: jp,
  traceInitPerf: !1,
  skipValidations: !1,
  recoveryEnabled: !0
};
Object.freeze(Rt);
class ae {
  constructor(e, r = Rt) {
    if (this.lexerDefinition = e, this.lexerDefinitionErrors = [], this.lexerDefinitionWarning = [], this.patternIdxToConfig = {}, this.charCodeToPatternIdxToConfig = {}, this.modes = [], this.emptyGroups = {}, this.trackStartLines = !0, this.trackEndLines = !0, this.hasCustom = !1, this.canModeBeOptimized = {}, this.TRACE_INIT = (i, s) => {
      if (this.traceInitPerf === !0) {
        this.traceInitIndent++;
        const o = new Array(this.traceInitIndent + 1).join("	");
        this.traceInitIndent < this.traceInitMaxIdent && console.log(`${o}--> <${i}>`);
        const { time: c, value: a } = Zs(s), u = c > 10 ? console.warn : console.log;
        return this.traceInitIndent < this.traceInitMaxIdent && u(`${o}<-- <${i}> time: ${c}ms`), this.traceInitIndent--, a;
      } else
        return s();
    }, typeof r == "boolean")
      throw Error(`The second argument to the Lexer constructor is now an ILexerConfig Object.
a boolean 2nd argument is no longer supported`);
    this.config = de({}, Rt, r);
    const n = this.config.traceInitPerf;
    n === !0 ? (this.traceInitMaxIdent = 1 / 0, this.traceInitPerf = !0) : typeof n == "number" && (this.traceInitMaxIdent = n, this.traceInitPerf = !0), this.traceInitIndent = -1, this.TRACE_INIT("Lexer Constructor", () => {
      let i, s = !0;
      this.TRACE_INIT("Lexer Config handling", () => {
        if (this.config.lineTerminatorsPattern === Rt.lineTerminatorsPattern)
          this.config.lineTerminatorsPattern = Mp;
        else if (this.config.lineTerminatorCharacters === Rt.lineTerminatorCharacters)
          throw Error(`Error: Missing <lineTerminatorCharacters> property on the Lexer config.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS`);
        if (r.safeMode && r.ensureOptimizations)
          throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking), this.trackEndLines = /full/i.test(this.config.positionTracking), j(e) ? i = {
          modes: { defaultMode: ie(e) },
          defaultMode: At
        } : (s = !1, i = ie(e));
      }), this.config.skipValidations === !1 && (this.TRACE_INIT("performRuntimeChecks", () => {
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(Op(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      }), this.TRACE_INIT("performWarningRuntimeChecks", () => {
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(Lp(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      })), i.modes = i.modes ? i.modes : {}, k(i.modes, (c, a) => {
        i.modes[a] = Ir(c, (u) => Ve(u));
      });
      const o = Ae(i.modes);
      if (k(i.modes, (c, a) => {
        this.TRACE_INIT(`Mode: <${a}> processing`, () => {
          if (this.modes.push(a), this.config.skipValidations === !1 && this.TRACE_INIT("validatePatterns", () => {
            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(up(c, o));
          }), K(this.lexerDefinitionErrors)) {
            Dt(c);
            let u;
            this.TRACE_INIT("analyzeTokenTypes", () => {
              u = cp(c, {
                lineTerminatorCharacters: this.config.lineTerminatorCharacters,
                positionTracking: r.positionTracking,
                ensureOptimizations: r.ensureOptimizations,
                safeMode: r.safeMode,
                tracer: this.TRACE_INIT
              });
            }), this.patternIdxToConfig[a] = u.patternIdxToConfig, this.charCodeToPatternIdxToConfig[a] = u.charCodeToPatternIdxToConfig, this.emptyGroups = de({}, this.emptyGroups, u.emptyGroups), this.hasCustom = u.hasCustom || this.hasCustom, this.canModeBeOptimized[a] = u.canBeOptimized;
          }
        });
      }), this.defaultMode = i.defaultMode, !K(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {
        const c = C(this.lexerDefinitionErrors, (a) => a.message).join(`-----------------------
`);
        throw new Error(`Errors detected in definition of Lexer:
` + c);
      }
      k(this.lexerDefinitionWarning, (c) => {
        Js(c.message);
      }), this.TRACE_INIT("Choosing sub-methods implementations", () => {
        if (no ? (this.chopInput = ht, this.match = this.matchWithTest) : (this.updateLastIndex = J, this.match = this.matchWithExec), s && (this.handleModes = J), this.trackStartLines === !1 && (this.computeNewColumn = ht), this.trackEndLines === !1 && (this.updateTokenEndLineColumnLocation = J), /full/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createFullToken;
        else if (/onlyStart/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createStartOnlyToken;
        else if (/onlyOffset/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createOffsetOnlyToken;
        else
          throw Error(`Invalid <positionTracking> config option: "${this.config.positionTracking}"`);
        this.hasCustom ? (this.addToken = this.addTokenUsingPush, this.handlePayload = this.handlePayloadWithCustom) : (this.addToken = this.addTokenUsingMemberAccess, this.handlePayload = this.handlePayloadNoCustom);
      }), this.TRACE_INIT("Failed Optimization Warnings", () => {
        const c = me(this.canModeBeOptimized, (a, u, l) => (u === !1 && a.push(l), a), []);
        if (r.ensureOptimizations && !K(c))
          throw Error(`Lexer Modes: < ${c.join(", ")} > cannot be optimized.
	 Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.
	 Or inspect the console log for details on how to resolve these issues.`);
      }), this.TRACE_INIT("clearRegExpParserCache", () => {
        ip();
      }), this.TRACE_INIT("toFastProperties", () => {
        eo(this);
      });
    });
  }
  tokenize(e, r = this.defaultMode) {
    if (!K(this.lexerDefinitionErrors)) {
      const n = C(this.lexerDefinitionErrors, (i) => i.message).join(`-----------------------
`);
      throw new Error(`Unable to Tokenize because Errors detected in definition of Lexer:
` + n);
    }
    return this.tokenizeInternal(e, r);
  }
  // There is quite a bit of duplication between this and "tokenizeInternalLazy"
  // This is intentional due to performance considerations.
  // this method also used quite a bit of `!` none null assertions because it is too optimized
  // for `tsc` to always understand it is "safe"
  tokenizeInternal(e, r) {
    let n, i, s, o, c, a, u, l, h, p, f, g, m, v, _;
    const T = e, y = T.length;
    let d = 0, E = 0;
    const I = this.hasCustom ? 0 : Math.floor(e.length / 10), R = new Array(I), D = [];
    let Q = this.trackStartLines ? 1 : void 0, F = this.trackStartLines ? 1 : void 0;
    const L = Ip(this.emptyGroups), w = this.trackStartLines, x = this.config.lineTerminatorsPattern;
    let N = 0, O = [], $ = [];
    const U = [], G = [];
    Object.freeze(G);
    let S;
    function A() {
      return O;
    }
    function M(oe) {
      const ve = Xe(oe), ct = $[ve];
      return ct === void 0 ? G : ct;
    }
    const B = (oe) => {
      if (U.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
      // So no error should occur.
      oe.tokenType.PUSH_MODE === void 0) {
        const ve = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(oe);
        D.push({
          offset: oe.startOffset,
          line: oe.startLine,
          column: oe.startColumn,
          length: oe.image.length,
          message: ve
        });
      } else {
        U.pop();
        const ve = pt(U);
        O = this.patternIdxToConfig[ve], $ = this.charCodeToPatternIdxToConfig[ve], N = O.length;
        const ct = this.canModeBeOptimized[ve] && this.config.safeMode === !1;
        $ && ct ? S = M : S = A;
      }
    };
    function se(oe) {
      U.push(oe), $ = this.charCodeToPatternIdxToConfig[oe], O = this.patternIdxToConfig[oe], N = O.length, N = O.length;
      const ve = this.canModeBeOptimized[oe] && this.config.safeMode === !1;
      $ && ve ? S = M : S = A;
    }
    se.call(this, r);
    let te;
    const Xn = this.config.recoveryEnabled;
    for (; d < y; ) {
      a = null;
      const oe = T.charCodeAt(d), ve = S(oe), ct = ve.length;
      for (n = 0; n < ct; n++) {
        te = ve[n];
        const pe = te.pattern;
        u = null;
        const je = te.short;
        if (je !== !1 ? oe === je && (a = pe) : te.isCustom === !0 ? (_ = pe.exec(T, d, R, L), _ !== null ? (a = _[0], _.payload !== void 0 && (u = _.payload)) : a = null) : (this.updateLastIndex(pe, d), a = this.match(pe, e, d)), a !== null) {
          if (c = te.longerAlt, c !== void 0) {
            const Ye = c.length;
            for (s = 0; s < Ye; s++) {
              const $e = O[c[s]], Ze = $e.pattern;
              if (l = null, $e.isCustom === !0 ? (_ = Ze.exec(T, d, R, L), _ !== null ? (o = _[0], _.payload !== void 0 && (l = _.payload)) : o = null) : (this.updateLastIndex(Ze, d), o = this.match(Ze, e, d)), o && o.length > a.length) {
                a = o, u = l, te = $e;
                break;
              }
            }
          }
          break;
        }
      }
      if (a !== null) {
        if (h = a.length, p = te.group, p !== void 0 && (f = te.tokenTypeIdx, g = this.createTokenInstance(a, d, f, te.tokenType, Q, F, h), this.handlePayload(g, u), p === !1 ? E = this.addToken(R, E, g) : L[p].push(g)), e = this.chopInput(e, h), d = d + h, F = this.computeNewColumn(F, h), w === !0 && te.canLineTerminator === !0) {
          let pe = 0, je, Ye;
          x.lastIndex = 0;
          do
            je = x.test(a), je === !0 && (Ye = x.lastIndex - 1, pe++);
          while (je === !0);
          pe !== 0 && (Q = Q + pe, F = h - Ye, this.updateTokenEndLineColumnLocation(g, p, Ye, pe, Q, F, h));
        }
        this.handleModes(te, B, se, g);
      } else {
        const pe = d, je = Q, Ye = F;
        let $e = Xn === !1;
        for (; $e === !1 && d < y; )
          for (e = this.chopInput(e, 1), d++, i = 0; i < N; i++) {
            const Ze = O[i], wr = Ze.pattern, Qn = Ze.short;
            if (Qn !== !1 ? T.charCodeAt(d) === Qn && ($e = !0) : Ze.isCustom === !0 ? $e = wr.exec(T, d, R, L) !== null : (this.updateLastIndex(wr, d), $e = wr.exec(e) !== null), $e === !0)
              break;
          }
        if (m = d - pe, F = this.computeNewColumn(F, m), v = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(T, pe, m, je, Ye), D.push({
          offset: pe,
          line: je,
          column: Ye,
          length: m,
          message: v
        }), Xn === !1)
          break;
      }
    }
    return this.hasCustom || (R.length = E), {
      tokens: R,
      groups: L,
      errors: D
    };
  }
  handleModes(e, r, n, i) {
    if (e.pop === !0) {
      const s = e.push;
      r(i), s !== void 0 && n.call(this, s);
    } else e.push !== void 0 && n.call(this, e.push);
  }
  chopInput(e, r) {
    return e.substring(r);
  }
  updateLastIndex(e, r) {
    e.lastIndex = r;
  }
  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
  updateTokenEndLineColumnLocation(e, r, n, i, s, o, c) {
    let a, u;
    r !== void 0 && (a = n === c - 1, u = a ? -1 : 0, i === 1 && a === !0 || (e.endLine = s + u, e.endColumn = o - 1 + -u));
  }
  computeNewColumn(e, r) {
    return e + r;
  }
  createOffsetOnlyToken(e, r, n, i) {
    return {
      image: e,
      startOffset: r,
      tokenTypeIdx: n,
      tokenType: i
    };
  }
  createStartOnlyToken(e, r, n, i, s, o) {
    return {
      image: e,
      startOffset: r,
      startLine: s,
      startColumn: o,
      tokenTypeIdx: n,
      tokenType: i
    };
  }
  createFullToken(e, r, n, i, s, o, c) {
    return {
      image: e,
      startOffset: r,
      endOffset: r + c - 1,
      startLine: s,
      endLine: s,
      startColumn: o,
      endColumn: o + c - 1,
      tokenTypeIdx: n,
      tokenType: i
    };
  }
  addTokenUsingPush(e, r, n) {
    return e.push(n), r;
  }
  addTokenUsingMemberAccess(e, r, n) {
    return e[r] = n, r++, r;
  }
  handlePayloadNoCustom(e, r) {
  }
  handlePayloadWithCustom(e, r) {
    r !== null && (e.payload = r);
  }
  matchWithTest(e, r, n) {
    return e.test(r) === !0 ? r.substring(n, e.lastIndex) : null;
  }
  matchWithExec(e, r) {
    const n = e.exec(r);
    return n !== null ? n[0] : null;
  }
}
ae.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
ae.NA = /NOT_APPLICABLE/;
function Lt(t) {
  return lo(t) ? t.LABEL : t.name;
}
function lo(t) {
  return he(t.LABEL) && t.LABEL !== "";
}
const $p = "parent", Gi = "categories", Bi = "label", Vi = "group", Wi = "push_mode", Ki = "pop_mode", Hi = "longer_alt", zi = "line_breaks", Yi = "start_chars_hint";
function V(t) {
  return Gp(t);
}
function Gp(t) {
  const e = t.pattern, r = {};
  if (r.name = t.name, Ve(e) || (r.PATTERN = e), b(t, $p))
    throw `The parent property is no longer supported.
See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.`;
  return b(t, Gi) && (r.CATEGORIES = t[Gi]), Dt([r]), b(t, Bi) && (r.LABEL = t[Bi]), b(t, Vi) && (r.GROUP = t[Vi]), b(t, Ki) && (r.POP_MODE = t[Ki]), b(t, Wi) && (r.PUSH_MODE = t[Wi]), b(t, Hi) && (r.LONGER_ALT = t[Hi]), b(t, zi) && (r.LINE_BREAKS = t[zi]), b(t, Yi) && (r.START_CHARS_HINT = t[Yi]), r;
}
const it = V({ name: "EOF", pattern: ae.NA });
Dt([it]);
function Hn(t, e, r, n, i, s, o, c) {
  return {
    image: e,
    startOffset: r,
    endOffset: n,
    startLine: i,
    endLine: s,
    startColumn: o,
    endColumn: c,
    tokenTypeIdx: t.tokenTypeIdx,
    tokenType: t
  };
}
function Bp(t, e) {
  return Ut(t, e);
}
const ho = {
  buildMismatchTokenMessage({ expected: t, actual: e, previous: r, ruleName: n }) {
    return `Expecting ${lo(t) ? `--> ${Lt(t)} <--` : `token of type --> ${t.name} <--`} but found --> '${e.image}' <--`;
  },
  buildNotAllInputParsedMessage({ firstRedundant: t, ruleName: e }) {
    return "Redundant input, expecting EOF but found: " + t.image;
  },
  buildNoViableAltMessage({ expectedPathsPerAlt: t, actual: e, previous: r, customUserDescription: n, ruleName: i }) {
    const s = "Expecting: ", o = `
but found: '` + Ie(e).image + "'";
    if (n)
      return s + n + o;
    {
      const c = me(t, (l, h) => l.concat(h), []), a = C(c, (l) => `[${C(l, (h) => Lt(h)).join(", ")}]`), u = `one of these possible Token sequences:
${C(a, (l, h) => `  ${h + 1}. ${l}`).join(`
`)}`;
      return s + u + o;
    }
  },
  buildEarlyExitMessage({ expectedIterationPaths: t, actual: e, customUserDescription: r, ruleName: n }) {
    const i = "Expecting: ", s = `
but found: '` + Ie(e).image + "'";
    if (r)
      return i + r + s;
    {
      const o = `expecting at least one iteration which starts with one of these possible Token sequences::
  <${C(t, (c) => `[${C(c, (a) => Lt(a)).join(",")}]`).join(" ,")}>`;
      return i + o + s;
    }
  }
};
Object.freeze(ho);
const Vp = {
  buildRuleNotFoundError(t, e) {
    return "Invalid grammar, reference to a rule which is not defined: ->" + e.nonTerminalName + `<-
inside top level rule: ->` + t.name + "<-";
  }
}, tt = {
  buildDuplicateFoundError(t, e) {
    function r(l) {
      return l instanceof z ? l.terminalType.name : l instanceof ge ? l.nonTerminalName : "";
    }
    const n = t.name, i = Ie(e), s = i.idx, o = Ne(i), c = r(i), a = s > 0;
    let u = `->${o}${a ? s : ""}<- ${c ? `with argument: ->${c}<-` : ""}
                  appears more than once (${e.length} times) in the top level rule: ->${n}<-.                  
                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES 
                  `;
    return u = u.replace(/[ \t]+/g, " "), u = u.replace(/\s\s+/g, `
`), u;
  },
  buildNamespaceConflictError(t) {
    return `Namespace conflict found in grammar.
The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${t.name}>.
To resolve this make sure each Terminal and Non-Terminal names are unique
This is easy to accomplish by using the convention that Terminal names start with an uppercase letter
and Non-Terminal names start with a lower case letter.`;
  },
  buildAlternationPrefixAmbiguityError(t) {
    const e = C(t.prefixPath, (n) => Lt(n)).join(", "), r = t.alternation.idx === 0 ? "" : t.alternation.idx;
    return `Ambiguous alternatives: <${t.ambiguityIndices.join(" ,")}> due to common lookahead prefix
in <OR${r}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX
For Further details.`;
  },
  buildAlternationAmbiguityError(t) {
    const e = C(t.prefixPath, (i) => Lt(i)).join(", "), r = t.alternation.idx === 0 ? "" : t.alternation.idx;
    let n = `Ambiguous Alternatives Detected: <${t.ambiguityIndices.join(" ,")}> in <OR${r}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
`;
    return n = n + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES
For Further details.`, n;
  },
  buildEmptyRepetitionError(t) {
    let e = Ne(t.repetition);
    return t.repetition.idx !== 0 && (e += t.repetition.idx), `The repetition <${e}> within Rule <${t.topLevelRule.name}> can never consume any tokens.
This could lead to an infinite loop.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildTokenNameError(t) {
    return "deprecated";
  },
  buildEmptyAlternationError(t) {
    return `Ambiguous empty alternative: <${t.emptyChoiceIdx + 1}> in <OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
Only the last alternative may be an empty alternative.`;
  },
  buildTooManyAlternativesError(t) {
    return `An Alternation cannot have more than 256 alternatives:
<OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
 has ${t.alternation.definition.length + 1} alternatives.`;
  },
  buildLeftRecursionError(t) {
    const e = t.topLevelRule.name, r = C(t.leftRecursionPath, (i) => i.name), n = `${e} --> ${r.concat([e]).join(" --> ")}`;
    return `Left Recursion found in grammar.
rule: <${e}> can be invoked from itself (directly or indirectly)
without consuming any Tokens. The grammar path that causes this is: 
 ${n}
 To fix this refactor your grammar to remove the left recursion.
see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildInvalidRuleNameError(t) {
    return "deprecated";
  },
  buildDuplicateRuleNameError(t) {
    let e;
    return t.topLevelRule instanceof mt ? e = t.topLevelRule.name : e = t.topLevelRule, `Duplicate definition, rule: ->${e}<- is already defined in the grammar: ->${t.grammarName}<-`;
  }
};
function Wp(t, e) {
  const r = new Kp(t, e);
  return r.resolveRefs(), r.errors;
}
class Kp extends gt {
  constructor(e, r) {
    super(), this.nameToTopRule = e, this.errMsgProvider = r, this.errors = [];
  }
  resolveRefs() {
    k(Z(this.nameToTopRule), (e) => {
      this.currTopLevel = e, e.accept(this);
    });
  }
  visitNonTerminal(e) {
    const r = this.nameToTopRule[e.nonTerminalName];
    if (r)
      e.referencedRule = r;
    else {
      const n = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, e);
      this.errors.push({
        message: n,
        type: ce.UNRESOLVED_SUBRULE_REF,
        ruleName: this.currTopLevel.name,
        unresolvedRefName: e.nonTerminalName
      });
    }
  }
}
class Hp extends Cr {
  constructor(e, r) {
    super(), this.topProd = e, this.path = r, this.possibleTokTypes = [], this.nextProductionName = "", this.nextProductionOccurrence = 0, this.found = !1, this.isAtEndOfPath = !1;
  }
  startWalking() {
    if (this.found = !1, this.path.ruleStack[0] !== this.topProd.name)
      throw Error("The path does not start with the walker's top Rule!");
    return this.ruleStack = ie(this.path.ruleStack).reverse(), this.occurrenceStack = ie(this.path.occurrenceStack).reverse(), this.ruleStack.pop(), this.occurrenceStack.pop(), this.updateExpectedNext(), this.walk(this.topProd), this.possibleTokTypes;
  }
  walk(e, r = []) {
    this.found || super.walk(e, r);
  }
  walkProdRef(e, r, n) {
    if (e.referencedRule.name === this.nextProductionName && e.idx === this.nextProductionOccurrence) {
      const i = r.concat(n);
      this.updateExpectedNext(), this.walk(e.referencedRule, i);
    }
  }
  updateExpectedNext() {
    K(this.ruleStack) ? (this.nextProductionName = "", this.nextProductionOccurrence = 0, this.isAtEndOfPath = !0) : (this.nextProductionName = this.ruleStack.pop(), this.nextProductionOccurrence = this.occurrenceStack.pop());
  }
}
class zp extends Hp {
  constructor(e, r) {
    super(e, r), this.path = r, this.nextTerminalName = "", this.nextTerminalOccurrence = 0, this.nextTerminalName = this.path.lastTok.name, this.nextTerminalOccurrence = this.path.lastTokOccurrence;
  }
  walkTerminal(e, r, n) {
    if (this.isAtEndOfPath && e.terminalType.name === this.nextTerminalName && e.idx === this.nextTerminalOccurrence && !this.found) {
      const i = r.concat(n), s = new fe({ definition: i });
      this.possibleTokTypes = xt(s), this.found = !0;
    }
  }
}
class br extends Cr {
  constructor(e, r) {
    super(), this.topRule = e, this.occurrence = r, this.result = {
      token: void 0,
      occurrence: void 0,
      isEndOfRule: void 0
    };
  }
  startWalking() {
    return this.walk(this.topRule), this.result;
  }
}
class Yp extends br {
  walkMany(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkMany(e, r, n);
  }
}
class qi extends br {
  walkManySep(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkManySep(e, r, n);
  }
}
class qp extends br {
  walkAtLeastOne(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOne(e, r, n);
  }
}
class Xi extends br {
  walkAtLeastOneSep(e, r, n) {
    if (e.idx === this.occurrence) {
      const i = Ie(r.concat(n));
      this.result.isEndOfRule = i === void 0, i instanceof z && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOneSep(e, r, n);
  }
}
function ln(t, e, r = []) {
  r = ie(r);
  let n = [], i = 0;
  function s(c) {
    return c.concat(ne(t, i + 1));
  }
  function o(c) {
    const a = ln(s(c), e, r);
    return n.concat(a);
  }
  for (; r.length < e && i < t.length; ) {
    const c = t[i];
    if (c instanceof fe || c instanceof ge)
      return o(c.definition);
    if (c instanceof le)
      n = o(c.definition);
    else if (c instanceof De) {
      const a = c.definition.concat([
        new ee({
          definition: c.definition
        })
      ]);
      return o(a);
    } else if (c instanceof Fe) {
      const a = [
        new fe({ definition: c.definition }),
        new ee({
          definition: [new z({ terminalType: c.separator })].concat(c.definition)
        })
      ];
      return o(a);
    } else if (c instanceof Me) {
      const a = c.definition.concat([
        new ee({
          definition: [new z({ terminalType: c.separator })].concat(c.definition)
        })
      ]);
      n = o(a);
    } else if (c instanceof ee) {
      const a = c.definition.concat([
        new ee({
          definition: c.definition
        })
      ]);
      n = o(a);
    } else {
      if (c instanceof be)
        return k(c.definition, (a) => {
          K(a.definition) === !1 && (n = o(a.definition));
        }), n;
      if (c instanceof z)
        r.push(c.terminalType);
      else
        throw Error("non exhaustive match");
    }
    i++;
  }
  return n.push({
    partialPath: r,
    suffixDef: ne(t, i)
  }), n;
}
function fo(t, e, r, n) {
  const i = "EXIT_NONE_TERMINAL", s = [i], o = "EXIT_ALTERNATIVE";
  let c = !1;
  const a = e.length, u = a - n - 1, l = [], h = [];
  for (h.push({
    idx: -1,
    def: t,
    ruleStack: [],
    occurrenceStack: []
  }); !K(h); ) {
    const p = h.pop();
    if (p === o) {
      c && pt(h).idx <= u && h.pop();
      continue;
    }
    const f = p.def, g = p.idx, m = p.ruleStack, v = p.occurrenceStack;
    if (K(f))
      continue;
    const _ = f[0];
    if (_ === i) {
      const T = {
        idx: g,
        def: ne(f),
        ruleStack: bt(m),
        occurrenceStack: bt(v)
      };
      h.push(T);
    } else if (_ instanceof z)
      if (g < a - 1) {
        const T = g + 1, y = e[T];
        if (r(y, _.terminalType)) {
          const d = {
            idx: T,
            def: ne(f),
            ruleStack: m,
            occurrenceStack: v
          };
          h.push(d);
        }
      } else if (g === a - 1)
        l.push({
          nextTokenType: _.terminalType,
          nextTokenOccurrence: _.idx,
          ruleStack: m,
          occurrenceStack: v
        }), c = !0;
      else
        throw Error("non exhaustive match");
    else if (_ instanceof ge) {
      const T = ie(m);
      T.push(_.nonTerminalName);
      const y = ie(v);
      y.push(_.idx);
      const d = {
        idx: g,
        def: _.definition.concat(s, ne(f)),
        ruleStack: T,
        occurrenceStack: y
      };
      h.push(d);
    } else if (_ instanceof le) {
      const T = {
        idx: g,
        def: ne(f),
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(T), h.push(o);
      const y = {
        idx: g,
        def: _.definition.concat(ne(f)),
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(y);
    } else if (_ instanceof De) {
      const T = new ee({
        definition: _.definition,
        idx: _.idx
      }), y = _.definition.concat([T], ne(f)), d = {
        idx: g,
        def: y,
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(d);
    } else if (_ instanceof Fe) {
      const T = new z({
        terminalType: _.separator
      }), y = new ee({
        definition: [T].concat(_.definition),
        idx: _.idx
      }), d = _.definition.concat([y], ne(f)), E = {
        idx: g,
        def: d,
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(E);
    } else if (_ instanceof Me) {
      const T = {
        idx: g,
        def: ne(f),
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(T), h.push(o);
      const y = new z({
        terminalType: _.separator
      }), d = new ee({
        definition: [y].concat(_.definition),
        idx: _.idx
      }), E = _.definition.concat([d], ne(f)), I = {
        idx: g,
        def: E,
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(I);
    } else if (_ instanceof ee) {
      const T = {
        idx: g,
        def: ne(f),
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(T), h.push(o);
      const y = new ee({
        definition: _.definition,
        idx: _.idx
      }), d = _.definition.concat([y], ne(f)), E = {
        idx: g,
        def: d,
        ruleStack: m,
        occurrenceStack: v
      };
      h.push(E);
    } else if (_ instanceof be)
      for (let T = _.definition.length - 1; T >= 0; T--) {
        const y = _.definition[T], d = {
          idx: g,
          def: y.definition.concat(ne(f)),
          ruleStack: m,
          occurrenceStack: v
        };
        h.push(d), h.push(o);
      }
    else if (_ instanceof fe)
      h.push({
        idx: g,
        def: _.definition.concat(ne(f)),
        ruleStack: m,
        occurrenceStack: v
      });
    else if (_ instanceof mt)
      h.push(Xp(_, g, m, v));
    else
      throw Error("non exhaustive match");
  }
  return l;
}
function Xp(t, e, r, n) {
  const i = ie(r);
  i.push(t.name);
  const s = ie(n);
  return s.push(1), {
    idx: e,
    def: t.definition,
    ruleStack: i,
    occurrenceStack: s
  };
}
var Y;
(function(t) {
  t[t.OPTION = 0] = "OPTION", t[t.REPETITION = 1] = "REPETITION", t[t.REPETITION_MANDATORY = 2] = "REPETITION_MANDATORY", t[t.REPETITION_MANDATORY_WITH_SEPARATOR = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR", t[t.REPETITION_WITH_SEPARATOR = 4] = "REPETITION_WITH_SEPARATOR", t[t.ALTERNATION = 5] = "ALTERNATION";
})(Y || (Y = {}));
function po(t) {
  if (t instanceof le || t === "Option")
    return Y.OPTION;
  if (t instanceof ee || t === "Repetition")
    return Y.REPETITION;
  if (t instanceof De || t === "RepetitionMandatory")
    return Y.REPETITION_MANDATORY;
  if (t instanceof Fe || t === "RepetitionMandatoryWithSeparator")
    return Y.REPETITION_MANDATORY_WITH_SEPARATOR;
  if (t instanceof Me || t === "RepetitionWithSeparator")
    return Y.REPETITION_WITH_SEPARATOR;
  if (t instanceof be || t === "Alternation")
    return Y.ALTERNATION;
  throw Error("non exhaustive match");
}
function Qp(t, e, r, n, i, s) {
  const o = zn(t, e, r), c = vo(o) ? ur : Ut;
  return s(o, n, c, i);
}
function Jp(t, e, r, n, i, s) {
  const o = Yn(t, e, i, r), c = vo(o) ? ur : Ut;
  return s(o[0], c, n);
}
function Zp(t, e, r, n) {
  const i = t.length, s = Oe(t, (o) => Oe(o, (c) => c.length === 1));
  if (e)
    return function(o) {
      const c = C(o, (a) => a.GATE);
      for (let a = 0; a < i; a++) {
        const u = t[a], l = u.length, h = c[a];
        if (!(h !== void 0 && h.call(this) === !1))
          e: for (let p = 0; p < l; p++) {
            const f = u[p], g = f.length;
            for (let m = 0; m < g; m++) {
              const v = this.LA(m + 1);
              if (r(v, f[m]) === !1)
                continue e;
            }
            return a;
          }
      }
    };
  if (s && !n) {
    const o = C(t, (a) => Re(a)), c = me(o, (a, u, l) => (k(u, (h) => {
      b(a, h.tokenTypeIdx) || (a[h.tokenTypeIdx] = l), k(h.categoryMatches, (p) => {
        b(a, p) || (a[p] = l);
      });
    }), a), {});
    return function() {
      const a = this.LA(1);
      return c[a.tokenTypeIdx];
    };
  } else
    return function() {
      for (let o = 0; o < i; o++) {
        const c = t[o], a = c.length;
        e: for (let u = 0; u < a; u++) {
          const l = c[u], h = l.length;
          for (let p = 0; p < h; p++) {
            const f = this.LA(p + 1);
            if (r(f, l[p]) === !1)
              continue e;
          }
          return o;
        }
      }
    };
}
function ed(t, e, r) {
  const n = Oe(t, (s) => s.length === 1), i = t.length;
  if (n && !r) {
    const s = Re(t);
    if (s.length === 1 && K(s[0].categoryMatches)) {
      const o = s[0].tokenTypeIdx;
      return function() {
        return this.LA(1).tokenTypeIdx === o;
      };
    } else {
      const o = me(s, (c, a, u) => (c[a.tokenTypeIdx] = !0, k(a.categoryMatches, (l) => {
        c[l] = !0;
      }), c), []);
      return function() {
        const c = this.LA(1);
        return o[c.tokenTypeIdx] === !0;
      };
    }
  } else
    return function() {
      e: for (let s = 0; s < i; s++) {
        const o = t[s], c = o.length;
        for (let a = 0; a < c; a++) {
          const u = this.LA(a + 1);
          if (e(u, o[a]) === !1)
            continue e;
        }
        return !0;
      }
      return !1;
    };
}
class td extends Cr {
  constructor(e, r, n) {
    super(), this.topProd = e, this.targetOccurrence = r, this.targetProdType = n;
  }
  startWalking() {
    return this.walk(this.topProd), this.restDef;
  }
  checkIsTarget(e, r, n, i) {
    return e.idx === this.targetOccurrence && this.targetProdType === r ? (this.restDef = n.concat(i), !0) : !1;
  }
  walkOption(e, r, n) {
    this.checkIsTarget(e, Y.OPTION, r, n) || super.walkOption(e, r, n);
  }
  walkAtLeastOne(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY, r, n) || super.walkOption(e, r, n);
  }
  walkAtLeastOneSep(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY_WITH_SEPARATOR, r, n) || super.walkOption(e, r, n);
  }
  walkMany(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION, r, n) || super.walkOption(e, r, n);
  }
  walkManySep(e, r, n) {
    this.checkIsTarget(e, Y.REPETITION_WITH_SEPARATOR, r, n) || super.walkOption(e, r, n);
  }
}
class mo extends gt {
  constructor(e, r, n) {
    super(), this.targetOccurrence = e, this.targetProdType = r, this.targetRef = n, this.result = [];
  }
  checkIsTarget(e, r) {
    e.idx === this.targetOccurrence && this.targetProdType === r && (this.targetRef === void 0 || e === this.targetRef) && (this.result = e.definition);
  }
  visitOption(e) {
    this.checkIsTarget(e, Y.OPTION);
  }
  visitRepetition(e) {
    this.checkIsTarget(e, Y.REPETITION);
  }
  visitRepetitionMandatory(e) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.checkIsTarget(e, Y.REPETITION_MANDATORY_WITH_SEPARATOR);
  }
  visitRepetitionWithSeparator(e) {
    this.checkIsTarget(e, Y.REPETITION_WITH_SEPARATOR);
  }
  visitAlternation(e) {
    this.checkIsTarget(e, Y.ALTERNATION);
  }
}
function Qi(t) {
  const e = new Array(t);
  for (let r = 0; r < t; r++)
    e[r] = [];
  return e;
}
function $r(t) {
  let e = [""];
  for (let r = 0; r < t.length; r++) {
    const n = t[r], i = [];
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      i.push(o + "_" + n.tokenTypeIdx);
      for (let c = 0; c < n.categoryMatches.length; c++) {
        const a = "_" + n.categoryMatches[c];
        i.push(o + a);
      }
    }
    e = i;
  }
  return e;
}
function rd(t, e, r) {
  for (let n = 0; n < t.length; n++) {
    if (n === r)
      continue;
    const i = t[n];
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      if (i[o] === !0)
        return !1;
    }
  }
  return !0;
}
function go(t, e) {
  const r = C(t, (o) => ln([o], 1)), n = Qi(r.length), i = C(r, (o) => {
    const c = {};
    return k(o, (a) => {
      const u = $r(a.partialPath);
      k(u, (l) => {
        c[l] = !0;
      });
    }), c;
  });
  let s = r;
  for (let o = 1; o <= e; o++) {
    const c = s;
    s = Qi(c.length);
    for (let a = 0; a < c.length; a++) {
      const u = c[a];
      for (let l = 0; l < u.length; l++) {
        const h = u[l].partialPath, p = u[l].suffixDef, f = $r(h);
        if (rd(i, f, a) || K(p) || h.length === e) {
          const g = n[a];
          if (hn(g, h) === !1) {
            g.push(h);
            for (let m = 0; m < f.length; m++) {
              const v = f[m];
              i[a][v] = !0;
            }
          }
        } else {
          const g = ln(p, o + 1, h);
          s[a] = s[a].concat(g), k(g, (m) => {
            const v = $r(m.partialPath);
            k(v, (_) => {
              i[a][_] = !0;
            });
          });
        }
      }
    }
  }
  return n;
}
function zn(t, e, r, n) {
  const i = new mo(t, Y.ALTERNATION, n);
  return e.accept(i), go(i.result, r);
}
function Yn(t, e, r, n) {
  const i = new mo(t, r);
  e.accept(i);
  const s = i.result, o = new td(e, t, r).startWalking(), c = new fe({ definition: s }), a = new fe({ definition: o });
  return go([c, a], n);
}
function hn(t, e) {
  e: for (let r = 0; r < t.length; r++) {
    const n = t[r];
    if (n.length === e.length) {
      for (let i = 0; i < n.length; i++) {
        const s = e[i], o = n[i];
        if (!(s === o || o.categoryMatchesMap[s.tokenTypeIdx] !== void 0))
          continue e;
      }
      return !0;
    }
  }
  return !1;
}
function nd(t, e) {
  return t.length < e.length && Oe(t, (r, n) => {
    const i = e[n];
    return r === i || i.categoryMatchesMap[r.tokenTypeIdx];
  });
}
function vo(t) {
  return Oe(t, (e) => Oe(e, (r) => Oe(r, (n) => K(n.categoryMatches))));
}
function id(t) {
  const e = t.lookaheadStrategy.validate({
    rules: t.rules,
    tokenTypes: t.tokenTypes,
    grammarName: t.grammarName
  });
  return C(e, (r) => Object.assign({ type: ce.CUSTOM_LOOKAHEAD_VALIDATION }, r));
}
function sd(t, e, r, n) {
  const i = Te(t, (a) => od(a, r)), s = Ed(t, e, r), o = Te(t, (a) => dd(a, r)), c = Te(t, (a) => ud(a, t, n, r));
  return i.concat(s, o, c);
}
function od(t, e) {
  const r = new cd();
  t.accept(r);
  const n = r.allProductions, i = Tf(n, ad), s = Ce(i, (o) => o.length > 1);
  return C(Z(s), (o) => {
    const c = Ie(o), a = e.buildDuplicateFoundError(t, o), u = Ne(c), l = {
      message: a,
      type: ce.DUPLICATE_PRODUCTIONS,
      ruleName: t.name,
      dslName: u,
      occurrence: c.idx
    }, h = Eo(c);
    return h && (l.parameter = h), l;
  });
}
function ad(t) {
  return `${Ne(t)}_#_${t.idx}_#_${Eo(t)}`;
}
function Eo(t) {
  return t instanceof z ? t.terminalType.name : t instanceof ge ? t.nonTerminalName : "";
}
class cd extends gt {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitNonTerminal(e) {
    this.allProductions.push(e);
  }
  visitOption(e) {
    this.allProductions.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
  visitAlternation(e) {
    this.allProductions.push(e);
  }
  visitTerminal(e) {
    this.allProductions.push(e);
  }
}
function ud(t, e, r, n) {
  const i = [];
  if (me(e, (s, o) => o.name === t.name ? s + 1 : s, 0) > 1) {
    const s = n.buildDuplicateRuleNameError({
      topLevelRule: t,
      grammarName: r
    });
    i.push({
      message: s,
      type: ce.DUPLICATE_RULE_NAME,
      ruleName: t.name
    });
  }
  return i;
}
function ld(t, e, r) {
  const n = [];
  let i;
  return ue(e, t) || (i = `Invalid rule override, rule: ->${t}<- cannot be overridden in the grammar: ->${r}<-as it is not defined in any of the super grammars `, n.push({
    message: i,
    type: ce.INVALID_RULE_OVERRIDE,
    ruleName: t
  })), n;
}
function To(t, e, r, n = []) {
  const i = [], s = Zt(e.definition);
  if (K(s))
    return [];
  {
    const o = t.name;
    ue(s, t) && i.push({
      message: r.buildLeftRecursionError({
        topLevelRule: t,
        leftRecursionPath: n
      }),
      type: ce.LEFT_RECURSION,
      ruleName: o
    });
    const c = Lr(s, n.concat([t])), a = Te(c, (u) => {
      const l = ie(n);
      return l.push(u), To(t, u, r, l);
    });
    return i.concat(a);
  }
}
function Zt(t) {
  let e = [];
  if (K(t))
    return e;
  const r = Ie(t);
  if (r instanceof ge)
    e.push(r.referencedRule);
  else if (r instanceof fe || r instanceof le || r instanceof De || r instanceof Fe || r instanceof Me || r instanceof ee)
    e = e.concat(Zt(r.definition));
  else if (r instanceof be)
    e = Re(C(r.definition, (s) => Zt(s.definition)));
  else if (!(r instanceof z)) throw Error("non exhaustive match");
  const n = sr(r), i = t.length > 1;
  if (n && i) {
    const s = ne(t);
    return e.concat(Zt(s));
  } else
    return e;
}
class qn extends gt {
  constructor() {
    super(...arguments), this.alternations = [];
  }
  visitAlternation(e) {
    this.alternations.push(e);
  }
}
function hd(t, e) {
  const r = new qn();
  t.accept(r);
  const n = r.alternations;
  return Te(n, (i) => {
    const s = bt(i.definition);
    return Te(s, (o, c) => {
      const a = fo([o], [], Ut, 1);
      return K(a) ? [
        {
          message: e.buildEmptyAlternationError({
            topLevelRule: t,
            alternation: i,
            emptyChoiceIdx: c
          }),
          type: ce.NONE_LAST_EMPTY_ALT,
          ruleName: t.name,
          occurrence: i.idx,
          alternative: c + 1
        }
      ] : [];
    });
  });
}
function fd(t, e, r) {
  const n = new qn();
  t.accept(n);
  let i = n.alternations;
  return i = Ir(i, (s) => s.ignoreAmbiguities === !0), Te(i, (s) => {
    const o = s.idx, c = s.maxLookahead || e, a = zn(o, t, c, s), u = gd(a, s, t, r), l = vd(a, s, t, r);
    return u.concat(l);
  });
}
class pd extends gt {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
}
function dd(t, e) {
  const r = new qn();
  t.accept(r);
  const n = r.alternations;
  return Te(n, (i) => i.definition.length > 255 ? [
    {
      message: e.buildTooManyAlternativesError({
        topLevelRule: t,
        alternation: i
      }),
      type: ce.TOO_MANY_ALTS,
      ruleName: t.name,
      occurrence: i.idx
    }
  ] : []);
}
function md(t, e, r) {
  const n = [];
  return k(t, (i) => {
    const s = new pd();
    i.accept(s);
    const o = s.allProductions;
    k(o, (c) => {
      const a = po(c), u = c.maxLookahead || e, l = c.idx, h = Yn(l, i, a, u)[0];
      if (K(Re(h))) {
        const p = r.buildEmptyRepetitionError({
          topLevelRule: i,
          repetition: c
        });
        n.push({
          message: p,
          type: ce.NO_NON_EMPTY_LOOKAHEAD,
          ruleName: i.name
        });
      }
    });
  }), n;
}
function gd(t, e, r, n) {
  const i = [], s = me(t, (o, c, a) => (e.definition[a].ignoreAmbiguities === !0 || k(c, (u) => {
    const l = [a];
    k(t, (h, p) => {
      a !== p && hn(h, u) && // ignore (skip) ambiguities with this "other" alternative
      e.definition[p].ignoreAmbiguities !== !0 && l.push(p);
    }), l.length > 1 && !hn(i, u) && (i.push(u), o.push({
      alts: l,
      path: u
    }));
  }), o), []);
  return C(s, (o) => {
    const c = C(o.alts, (a) => a + 1);
    return {
      message: n.buildAlternationAmbiguityError({
        topLevelRule: r,
        alternation: e,
        ambiguityIndices: c,
        prefixPath: o.path
      }),
      type: ce.AMBIGUOUS_ALTS,
      ruleName: r.name,
      occurrence: e.idx,
      alternatives: o.alts
    };
  });
}
function vd(t, e, r, n) {
  const i = me(t, (s, o, c) => {
    const a = C(o, (u) => ({ idx: c, path: u }));
    return s.concat(a);
  }, []);
  return wt(Te(i, (s) => {
    if (e.definition[s.idx].ignoreAmbiguities === !0)
      return [];
    const o = s.idx, c = s.path, a = Se(i, (u) => (
      // ignore (skip) ambiguities with this "other" alternative
      e.definition[u.idx].ignoreAmbiguities !== !0 && u.idx < o && // checking for strict prefix because identical lookaheads
      // will be be detected using a different validation.
      nd(u.path, c)
    ));
    return C(a, (u) => {
      const l = [u.idx + 1, o + 1], h = e.idx === 0 ? "" : e.idx;
      return {
        message: n.buildAlternationPrefixAmbiguityError({
          topLevelRule: r,
          alternation: e,
          ambiguityIndices: l,
          prefixPath: u.path
        }),
        type: ce.AMBIGUOUS_PREFIX_ALTS,
        ruleName: r.name,
        occurrence: h,
        alternatives: l
      };
    });
  }));
}
function Ed(t, e, r) {
  const n = [], i = C(e, (s) => s.name);
  return k(t, (s) => {
    const o = s.name;
    if (ue(i, o)) {
      const c = r.buildNamespaceConflictError(s);
      n.push({
        message: c,
        type: ce.CONFLICT_TOKENS_RULES_NAMESPACE,
        ruleName: o
      });
    }
  }), n;
}
function Td(t) {
  const e = Bn(t, {
    errMsgProvider: Vp
  }), r = {};
  return k(t.rules, (n) => {
    r[n.name] = n;
  }), Wp(r, e.errMsgProvider);
}
function yd(t) {
  return t = Bn(t, {
    errMsgProvider: tt
  }), sd(t.rules, t.tokenTypes, t.errMsgProvider, t.grammarName);
}
const yo = "MismatchedTokenException", _o = "NoViableAltException", Ao = "EarlyExitException", So = "NotAllInputParsedException", Ro = [
  yo,
  _o,
  Ao,
  So
];
Object.freeze(Ro);
function lr(t) {
  return ue(Ro, t.name);
}
class Nr extends Error {
  constructor(e, r) {
    super(e), this.token = r, this.resyncedTokens = [], Object.setPrototypeOf(this, new.target.prototype), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  }
}
class Oo extends Nr {
  constructor(e, r, n) {
    super(e, r), this.previousToken = n, this.name = yo;
  }
}
class _d extends Nr {
  constructor(e, r, n) {
    super(e, r), this.previousToken = n, this.name = _o;
  }
}
class Ad extends Nr {
  constructor(e, r) {
    super(e, r), this.name = So;
  }
}
class Sd extends Nr {
  constructor(e, r, n) {
    super(e, r), this.previousToken = n, this.name = Ao;
  }
}
const Gr = {}, Lo = "InRuleRecoveryException";
class Rd extends Error {
  constructor(e) {
    super(e), this.name = Lo;
  }
}
class Od {
  initRecoverable(e) {
    this.firstAfterRepMap = {}, this.resyncFollows = {}, this.recoveryEnabled = b(e, "recoveryEnabled") ? e.recoveryEnabled : We.recoveryEnabled, this.recoveryEnabled && (this.attemptInRepetitionRecovery = Ld);
  }
  getTokenToInsert(e) {
    const r = Hn(e, "", NaN, NaN, NaN, NaN, NaN, NaN);
    return r.isInsertedInRecovery = !0, r;
  }
  canTokenTypeBeInsertedInRecovery(e) {
    return !0;
  }
  canTokenTypeBeDeletedInRecovery(e) {
    return !0;
  }
  tryInRepetitionRecovery(e, r, n, i) {
    const s = this.findReSyncTokenType(), o = this.exportLexerState(), c = [];
    let a = !1;
    const u = this.LA(1);
    let l = this.LA(1);
    const h = () => {
      const p = this.LA(0), f = this.errorMessageProvider.buildMismatchTokenMessage({
        expected: i,
        actual: u,
        previous: p,
        ruleName: this.getCurrRuleFullName()
      }), g = new Oo(f, u, this.LA(0));
      g.resyncedTokens = bt(c), this.SAVE_ERROR(g);
    };
    for (; !a; )
      if (this.tokenMatcher(l, i)) {
        h();
        return;
      } else if (n.call(this)) {
        h(), e.apply(this, r);
        return;
      } else this.tokenMatcher(l, s) ? a = !0 : (l = this.SKIP_TOKEN(), this.addToResyncTokens(l, c));
    this.importLexerState(o);
  }
  shouldInRepetitionRecoveryBeTried(e, r, n) {
    return !(n === !1 || this.tokenMatcher(this.LA(1), e) || this.isBackTracking() || this.canPerformInRuleRecovery(e, this.getFollowsForInRuleRecovery(e, r)));
  }
  // Error Recovery functionality
  getFollowsForInRuleRecovery(e, r) {
    const n = this.getCurrentGrammarPath(e, r);
    return this.getNextPossibleTokenTypes(n);
  }
  tryInRuleRecovery(e, r) {
    if (this.canRecoverWithSingleTokenInsertion(e, r))
      return this.getTokenToInsert(e);
    if (this.canRecoverWithSingleTokenDeletion(e)) {
      const n = this.SKIP_TOKEN();
      return this.consumeToken(), n;
    }
    throw new Rd("sad sad panda");
  }
  canPerformInRuleRecovery(e, r) {
    return this.canRecoverWithSingleTokenInsertion(e, r) || this.canRecoverWithSingleTokenDeletion(e);
  }
  canRecoverWithSingleTokenInsertion(e, r) {
    if (!this.canTokenTypeBeInsertedInRecovery(e) || K(r))
      return !1;
    const n = this.LA(1);
    return dt(r, (i) => this.tokenMatcher(n, i)) !== void 0;
  }
  canRecoverWithSingleTokenDeletion(e) {
    return this.canTokenTypeBeDeletedInRecovery(e) ? this.tokenMatcher(this.LA(2), e) : !1;
  }
  isInCurrentRuleReSyncSet(e) {
    const r = this.getCurrFollowKey(), n = this.getFollowSetFromFollowKey(r);
    return ue(n, e);
  }
  findReSyncTokenType() {
    const e = this.flattenFollowSet();
    let r = this.LA(1), n = 2;
    for (; ; ) {
      const i = dt(e, (s) => Bp(r, s));
      if (i !== void 0)
        return i;
      r = this.LA(n), n++;
    }
  }
  getCurrFollowKey() {
    if (this.RULE_STACK.length === 1)
      return Gr;
    const e = this.getLastExplicitRuleShortName(), r = this.getLastExplicitRuleOccurrenceIndex(), n = this.getPreviousExplicitRuleShortName();
    return {
      ruleName: this.shortRuleNameToFullName(e),
      idxInCallingRule: r,
      inRule: this.shortRuleNameToFullName(n)
    };
  }
  buildFullFollowKeyStack() {
    const e = this.RULE_STACK, r = this.RULE_OCCURRENCE_STACK;
    return C(e, (n, i) => i === 0 ? Gr : {
      ruleName: this.shortRuleNameToFullName(n),
      idxInCallingRule: r[i],
      inRule: this.shortRuleNameToFullName(e[i - 1])
    });
  }
  flattenFollowSet() {
    const e = C(this.buildFullFollowKeyStack(), (r) => this.getFollowSetFromFollowKey(r));
    return Re(e);
  }
  getFollowSetFromFollowKey(e) {
    if (e === Gr)
      return [it];
    const r = e.ruleName + e.idxInCallingRule + to + e.inRule;
    return this.resyncFollows[r];
  }
  // It does not make any sense to include a virtual EOF token in the list of resynced tokens
  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
  addToResyncTokens(e, r) {
    return this.tokenMatcher(e, it) || r.push(e), r;
  }
  reSyncTo(e) {
    const r = [];
    let n = this.LA(1);
    for (; this.tokenMatcher(n, e) === !1; )
      n = this.SKIP_TOKEN(), this.addToResyncTokens(n, r);
    return bt(r);
  }
  attemptInRepetitionRecovery(e, r, n, i, s, o, c) {
  }
  getCurrentGrammarPath(e, r) {
    const n = this.getHumanReadableRuleStack(), i = ie(this.RULE_OCCURRENCE_STACK);
    return {
      ruleStack: n,
      occurrenceStack: i,
      lastTok: e,
      lastTokOccurrence: r
    };
  }
  getHumanReadableRuleStack() {
    return C(this.RULE_STACK, (e) => this.shortRuleNameToFullName(e));
  }
}
function Ld(t, e, r, n, i, s, o) {
  const c = this.getKeyForAutomaticLookahead(n, i);
  let a = this.firstAfterRepMap[c];
  if (a === void 0) {
    const p = this.getCurrRuleFullName(), f = this.getGAstProductions()[p];
    a = new s(f, i).startWalking(), this.firstAfterRepMap[c] = a;
  }
  let u = a.token, l = a.occurrence;
  const h = a.isEndOfRule;
  this.RULE_STACK.length === 1 && h && u === void 0 && (u = it, l = 1), !(u === void 0 || l === void 0) && this.shouldInRepetitionRecoveryBeTried(u, l, o) && this.tryInRepetitionRecovery(t, e, r, u);
}
const Id = 4, Je = 8, Io = 1 << Je, Co = 2 << Je, fn = 3 << Je, pn = 4 << Je, dn = 5 << Je, er = 6 << Je;
function Br(t, e, r) {
  return r | e | t;
}
class Cd {
  constructor(e) {
    var r;
    this.maxLookahead = (r = e == null ? void 0 : e.maxLookahead) !== null && r !== void 0 ? r : We.maxLookahead;
  }
  validate(e) {
    const r = this.validateNoLeftRecursion(e.rules);
    if (K(r)) {
      const n = this.validateEmptyOrAlternatives(e.rules), i = this.validateAmbiguousAlternationAlternatives(e.rules, this.maxLookahead), s = this.validateSomeNonEmptyLookaheadPath(e.rules, this.maxLookahead);
      return [
        ...r,
        ...n,
        ...i,
        ...s
      ];
    }
    return r;
  }
  validateNoLeftRecursion(e) {
    return Te(e, (r) => To(r, r, tt));
  }
  validateEmptyOrAlternatives(e) {
    return Te(e, (r) => hd(r, tt));
  }
  validateAmbiguousAlternationAlternatives(e, r) {
    return Te(e, (n) => fd(n, r, tt));
  }
  validateSomeNonEmptyLookaheadPath(e, r) {
    return md(e, r, tt);
  }
  buildLookaheadForAlternation(e) {
    return Qp(e.prodOccurrence, e.rule, e.maxLookahead, e.hasPredicates, e.dynamicTokensEnabled, Zp);
  }
  buildLookaheadForOptional(e) {
    return Jp(e.prodOccurrence, e.rule, e.maxLookahead, e.dynamicTokensEnabled, po(e.prodType), ed);
  }
}
class Md {
  initLooksAhead(e) {
    this.dynamicTokensEnabled = b(e, "dynamicTokensEnabled") ? e.dynamicTokensEnabled : We.dynamicTokensEnabled, this.maxLookahead = b(e, "maxLookahead") ? e.maxLookahead : We.maxLookahead, this.lookaheadStrategy = b(e, "lookaheadStrategy") ? e.lookaheadStrategy : new Cd({ maxLookahead: this.maxLookahead }), this.lookAheadFuncsCache = /* @__PURE__ */ new Map();
  }
  preComputeLookaheadFunctions(e) {
    k(e, (r) => {
      this.TRACE_INIT(`${r.name} Rule Lookahead`, () => {
        const { alternation: n, repetition: i, option: s, repetitionMandatory: o, repetitionMandatoryWithSeparator: c, repetitionWithSeparator: a } = Nd(r);
        k(n, (u) => {
          const l = u.idx === 0 ? "" : u.idx;
          this.TRACE_INIT(`${Ne(u)}${l}`, () => {
            const h = this.lookaheadStrategy.buildLookaheadForAlternation({
              prodOccurrence: u.idx,
              rule: r,
              maxLookahead: u.maxLookahead || this.maxLookahead,
              hasPredicates: u.hasPredicates,
              dynamicTokensEnabled: this.dynamicTokensEnabled
            }), p = Br(this.fullRuleNameToShort[r.name], Io, u.idx);
            this.setLaFuncCache(p, h);
          });
        }), k(i, (u) => {
          this.computeLookaheadFunc(r, u.idx, fn, "Repetition", u.maxLookahead, Ne(u));
        }), k(s, (u) => {
          this.computeLookaheadFunc(r, u.idx, Co, "Option", u.maxLookahead, Ne(u));
        }), k(o, (u) => {
          this.computeLookaheadFunc(r, u.idx, pn, "RepetitionMandatory", u.maxLookahead, Ne(u));
        }), k(c, (u) => {
          this.computeLookaheadFunc(r, u.idx, er, "RepetitionMandatoryWithSeparator", u.maxLookahead, Ne(u));
        }), k(a, (u) => {
          this.computeLookaheadFunc(r, u.idx, dn, "RepetitionWithSeparator", u.maxLookahead, Ne(u));
        });
      });
    });
  }
  computeLookaheadFunc(e, r, n, i, s, o) {
    this.TRACE_INIT(`${o}${r === 0 ? "" : r}`, () => {
      const c = this.lookaheadStrategy.buildLookaheadForOptional({
        prodOccurrence: r,
        rule: e,
        maxLookahead: s || this.maxLookahead,
        dynamicTokensEnabled: this.dynamicTokensEnabled,
        prodType: i
      }), a = Br(this.fullRuleNameToShort[e.name], n, r);
      this.setLaFuncCache(a, c);
    });
  }
  // this actually returns a number, but it is always used as a string (object prop key)
  getKeyForAutomaticLookahead(e, r) {
    const n = this.getLastExplicitRuleShortName();
    return Br(n, e, r);
  }
  getLaFuncFromCache(e) {
    return this.lookAheadFuncsCache.get(e);
  }
  /* istanbul ignore next */
  setLaFuncCache(e, r) {
    this.lookAheadFuncsCache.set(e, r);
  }
}
class bd extends gt {
  constructor() {
    super(...arguments), this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  reset() {
    this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  visitOption(e) {
    this.dslMethods.option.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.dslMethods.repetitionWithSeparator.push(e);
  }
  visitRepetitionMandatory(e) {
    this.dslMethods.repetitionMandatory.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.dslMethods.repetitionMandatoryWithSeparator.push(e);
  }
  visitRepetition(e) {
    this.dslMethods.repetition.push(e);
  }
  visitAlternation(e) {
    this.dslMethods.alternation.push(e);
  }
}
const Wt = new bd();
function Nd(t) {
  Wt.reset(), t.accept(Wt);
  const e = Wt.dslMethods;
  return Wt.reset(), e;
}
function Ji(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.endOffset = e.endOffset) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset);
}
function Zi(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.startColumn = e.startColumn, t.startLine = e.startLine, t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine);
}
function kd(t, e, r) {
  t.children[r] === void 0 ? t.children[r] = [e] : t.children[r].push(e);
}
function Pd(t, e, r) {
  t.children[e] === void 0 ? t.children[e] = [r] : t.children[e].push(r);
}
const wd = "name";
function Mo(t, e) {
  Object.defineProperty(t, wd, {
    enumerable: !1,
    configurable: !0,
    writable: !1,
    value: e
  });
}
function xd(t, e) {
  const r = Ae(t), n = r.length;
  for (let i = 0; i < n; i++) {
    const s = r[i], o = t[s], c = o.length;
    for (let a = 0; a < c; a++) {
      const u = o[a];
      u.tokenTypeIdx === void 0 && this[u.name](u.children, e);
    }
  }
}
function Ud(t, e) {
  const r = function() {
  };
  Mo(r, t + "BaseSemantics");
  const n = {
    visit: function(i, s) {
      if (j(i) && (i = i[0]), !Ve(i))
        return this[i.name](i.children, s);
    },
    validateVisitor: function() {
      const i = Fd(this, e);
      if (!K(i)) {
        const s = C(i, (o) => o.msg);
        throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:
	${s.join(`

`).replace(/\n/g, `
	`)}`);
      }
    }
  };
  return r.prototype = n, r.prototype.constructor = r, r._RULE_NAMES = e, r;
}
function Dd(t, e, r) {
  const n = function() {
  };
  Mo(n, t + "BaseSemanticsWithDefaults");
  const i = Object.create(r.prototype);
  return k(e, (s) => {
    i[s] = xd;
  }), n.prototype = i, n.prototype.constructor = n, n;
}
var mn;
(function(t) {
  t[t.REDUNDANT_METHOD = 0] = "REDUNDANT_METHOD", t[t.MISSING_METHOD = 1] = "MISSING_METHOD";
})(mn || (mn = {}));
function Fd(t, e) {
  return jd(t, e);
}
function jd(t, e) {
  const r = Se(e, (i) => Ke(t[i]) === !1), n = C(r, (i) => ({
    msg: `Missing visitor method: <${i}> on ${t.constructor.name} CST Visitor.`,
    type: mn.MISSING_METHOD,
    methodName: i
  }));
  return wt(n);
}
class $d {
  initTreeBuilder(e) {
    if (this.CST_STACK = [], this.outputCst = e.outputCst, this.nodeLocationTracking = b(e, "nodeLocationTracking") ? e.nodeLocationTracking : We.nodeLocationTracking, !this.outputCst)
      this.cstInvocationStateUpdate = J, this.cstFinallyStateUpdate = J, this.cstPostTerminal = J, this.cstPostNonTerminal = J, this.cstPostRule = J;
    else if (/full/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = Zi, this.setNodeLocationFromNode = Zi, this.cstPostRule = J, this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery) : (this.setNodeLocationFromToken = J, this.setNodeLocationFromNode = J, this.cstPostRule = this.cstPostRuleFull, this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular);
    else if (/onlyOffset/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = Ji, this.setNodeLocationFromNode = Ji, this.cstPostRule = J, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery) : (this.setNodeLocationFromToken = J, this.setNodeLocationFromNode = J, this.cstPostRule = this.cstPostRuleOnlyOffset, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular);
    else if (/none/i.test(this.nodeLocationTracking))
      this.setNodeLocationFromToken = J, this.setNodeLocationFromNode = J, this.cstPostRule = J, this.setInitialNodeLocation = J;
    else
      throw Error(`Invalid <nodeLocationTracking> config option: "${e.nodeLocationTracking}"`);
  }
  setInitialNodeLocationOnlyOffsetRecovery(e) {
    e.location = {
      startOffset: NaN,
      endOffset: NaN
    };
  }
  setInitialNodeLocationOnlyOffsetRegular(e) {
    e.location = {
      // without error recovery the starting Location of a new CstNode is guaranteed
      // To be the next Token's startOffset (for valid inputs).
      // For invalid inputs there won't be any CSTOutput so this potential
      // inaccuracy does not matter
      startOffset: this.LA(1).startOffset,
      endOffset: NaN
    };
  }
  setInitialNodeLocationFullRecovery(e) {
    e.location = {
      startOffset: NaN,
      startLine: NaN,
      startColumn: NaN,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  /**
       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work
  
       * @param cstNode
       */
  setInitialNodeLocationFullRegular(e) {
    const r = this.LA(1);
    e.location = {
      startOffset: r.startOffset,
      startLine: r.startLine,
      startColumn: r.startColumn,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  cstInvocationStateUpdate(e) {
    const r = {
      name: e,
      children: /* @__PURE__ */ Object.create(null)
    };
    this.setInitialNodeLocation(r), this.CST_STACK.push(r);
  }
  cstFinallyStateUpdate() {
    this.CST_STACK.pop();
  }
  cstPostRuleFull(e) {
    const r = this.LA(0), n = e.location;
    n.startOffset <= r.startOffset ? (n.endOffset = r.endOffset, n.endLine = r.endLine, n.endColumn = r.endColumn) : (n.startOffset = NaN, n.startLine = NaN, n.startColumn = NaN);
  }
  cstPostRuleOnlyOffset(e) {
    const r = this.LA(0), n = e.location;
    n.startOffset <= r.startOffset ? n.endOffset = r.endOffset : n.startOffset = NaN;
  }
  cstPostTerminal(e, r) {
    const n = this.CST_STACK[this.CST_STACK.length - 1];
    kd(n, r, e), this.setNodeLocationFromToken(n.location, r);
  }
  cstPostNonTerminal(e, r) {
    const n = this.CST_STACK[this.CST_STACK.length - 1];
    Pd(n, r, e), this.setNodeLocationFromNode(n.location, e.location);
  }
  getBaseCstVisitorConstructor() {
    if (Ve(this.baseCstVisitorConstructor)) {
      const e = Ud(this.className, Ae(this.gastProductionsCache));
      return this.baseCstVisitorConstructor = e, e;
    }
    return this.baseCstVisitorConstructor;
  }
  getBaseCstVisitorConstructorWithDefaults() {
    if (Ve(this.baseCstVisitorWithDefaultsConstructor)) {
      const e = Dd(this.className, Ae(this.gastProductionsCache), this.getBaseCstVisitorConstructor());
      return this.baseCstVisitorWithDefaultsConstructor = e, e;
    }
    return this.baseCstVisitorWithDefaultsConstructor;
  }
  getLastExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 1];
  }
  getPreviousExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 2];
  }
  getLastExplicitRuleOccurrenceIndex() {
    const e = this.RULE_OCCURRENCE_STACK;
    return e[e.length - 1];
  }
}
class Gd {
  initLexerAdapter() {
    this.tokVector = [], this.tokVectorLength = 0, this.currIdx = -1;
  }
  set input(e) {
    if (this.selfAnalysisDone !== !0)
      throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
    this.reset(), this.tokVector = e, this.tokVectorLength = e.length;
  }
  get input() {
    return this.tokVector;
  }
  // skips a token and returns the next token
  SKIP_TOKEN() {
    return this.currIdx <= this.tokVector.length - 2 ? (this.consumeToken(), this.LA(1)) : fr;
  }
  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
  // or lexers dependent on parser context.
  LA(e) {
    const r = this.currIdx + e;
    return r < 0 || this.tokVectorLength <= r ? fr : this.tokVector[r];
  }
  consumeToken() {
    this.currIdx++;
  }
  exportLexerState() {
    return this.currIdx;
  }
  importLexerState(e) {
    this.currIdx = e;
  }
  resetLexerState() {
    this.currIdx = -1;
  }
  moveToTerminatedState() {
    this.currIdx = this.tokVector.length - 1;
  }
  getLexerPosition() {
    return this.exportLexerState();
  }
}
class Bd {
  ACTION(e) {
    return e.call(this);
  }
  consume(e, r, n) {
    return this.consumeInternal(r, e, n);
  }
  subrule(e, r, n) {
    return this.subruleInternal(r, e, n);
  }
  option(e, r) {
    return this.optionInternal(r, e);
  }
  or(e, r) {
    return this.orInternal(r, e);
  }
  many(e, r) {
    return this.manyInternal(e, r);
  }
  atLeastOne(e, r) {
    return this.atLeastOneInternal(e, r);
  }
  CONSUME(e, r) {
    return this.consumeInternal(e, 0, r);
  }
  CONSUME1(e, r) {
    return this.consumeInternal(e, 1, r);
  }
  CONSUME2(e, r) {
    return this.consumeInternal(e, 2, r);
  }
  CONSUME3(e, r) {
    return this.consumeInternal(e, 3, r);
  }
  CONSUME4(e, r) {
    return this.consumeInternal(e, 4, r);
  }
  CONSUME5(e, r) {
    return this.consumeInternal(e, 5, r);
  }
  CONSUME6(e, r) {
    return this.consumeInternal(e, 6, r);
  }
  CONSUME7(e, r) {
    return this.consumeInternal(e, 7, r);
  }
  CONSUME8(e, r) {
    return this.consumeInternal(e, 8, r);
  }
  CONSUME9(e, r) {
    return this.consumeInternal(e, 9, r);
  }
  SUBRULE(e, r) {
    return this.subruleInternal(e, 0, r);
  }
  SUBRULE1(e, r) {
    return this.subruleInternal(e, 1, r);
  }
  SUBRULE2(e, r) {
    return this.subruleInternal(e, 2, r);
  }
  SUBRULE3(e, r) {
    return this.subruleInternal(e, 3, r);
  }
  SUBRULE4(e, r) {
    return this.subruleInternal(e, 4, r);
  }
  SUBRULE5(e, r) {
    return this.subruleInternal(e, 5, r);
  }
  SUBRULE6(e, r) {
    return this.subruleInternal(e, 6, r);
  }
  SUBRULE7(e, r) {
    return this.subruleInternal(e, 7, r);
  }
  SUBRULE8(e, r) {
    return this.subruleInternal(e, 8, r);
  }
  SUBRULE9(e, r) {
    return this.subruleInternal(e, 9, r);
  }
  OPTION(e) {
    return this.optionInternal(e, 0);
  }
  OPTION1(e) {
    return this.optionInternal(e, 1);
  }
  OPTION2(e) {
    return this.optionInternal(e, 2);
  }
  OPTION3(e) {
    return this.optionInternal(e, 3);
  }
  OPTION4(e) {
    return this.optionInternal(e, 4);
  }
  OPTION5(e) {
    return this.optionInternal(e, 5);
  }
  OPTION6(e) {
    return this.optionInternal(e, 6);
  }
  OPTION7(e) {
    return this.optionInternal(e, 7);
  }
  OPTION8(e) {
    return this.optionInternal(e, 8);
  }
  OPTION9(e) {
    return this.optionInternal(e, 9);
  }
  OR(e) {
    return this.orInternal(e, 0);
  }
  OR1(e) {
    return this.orInternal(e, 1);
  }
  OR2(e) {
    return this.orInternal(e, 2);
  }
  OR3(e) {
    return this.orInternal(e, 3);
  }
  OR4(e) {
    return this.orInternal(e, 4);
  }
  OR5(e) {
    return this.orInternal(e, 5);
  }
  OR6(e) {
    return this.orInternal(e, 6);
  }
  OR7(e) {
    return this.orInternal(e, 7);
  }
  OR8(e) {
    return this.orInternal(e, 8);
  }
  OR9(e) {
    return this.orInternal(e, 9);
  }
  MANY(e) {
    this.manyInternal(0, e);
  }
  MANY1(e) {
    this.manyInternal(1, e);
  }
  MANY2(e) {
    this.manyInternal(2, e);
  }
  MANY3(e) {
    this.manyInternal(3, e);
  }
  MANY4(e) {
    this.manyInternal(4, e);
  }
  MANY5(e) {
    this.manyInternal(5, e);
  }
  MANY6(e) {
    this.manyInternal(6, e);
  }
  MANY7(e) {
    this.manyInternal(7, e);
  }
  MANY8(e) {
    this.manyInternal(8, e);
  }
  MANY9(e) {
    this.manyInternal(9, e);
  }
  MANY_SEP(e) {
    this.manySepFirstInternal(0, e);
  }
  MANY_SEP1(e) {
    this.manySepFirstInternal(1, e);
  }
  MANY_SEP2(e) {
    this.manySepFirstInternal(2, e);
  }
  MANY_SEP3(e) {
    this.manySepFirstInternal(3, e);
  }
  MANY_SEP4(e) {
    this.manySepFirstInternal(4, e);
  }
  MANY_SEP5(e) {
    this.manySepFirstInternal(5, e);
  }
  MANY_SEP6(e) {
    this.manySepFirstInternal(6, e);
  }
  MANY_SEP7(e) {
    this.manySepFirstInternal(7, e);
  }
  MANY_SEP8(e) {
    this.manySepFirstInternal(8, e);
  }
  MANY_SEP9(e) {
    this.manySepFirstInternal(9, e);
  }
  AT_LEAST_ONE(e) {
    this.atLeastOneInternal(0, e);
  }
  AT_LEAST_ONE1(e) {
    return this.atLeastOneInternal(1, e);
  }
  AT_LEAST_ONE2(e) {
    this.atLeastOneInternal(2, e);
  }
  AT_LEAST_ONE3(e) {
    this.atLeastOneInternal(3, e);
  }
  AT_LEAST_ONE4(e) {
    this.atLeastOneInternal(4, e);
  }
  AT_LEAST_ONE5(e) {
    this.atLeastOneInternal(5, e);
  }
  AT_LEAST_ONE6(e) {
    this.atLeastOneInternal(6, e);
  }
  AT_LEAST_ONE7(e) {
    this.atLeastOneInternal(7, e);
  }
  AT_LEAST_ONE8(e) {
    this.atLeastOneInternal(8, e);
  }
  AT_LEAST_ONE9(e) {
    this.atLeastOneInternal(9, e);
  }
  AT_LEAST_ONE_SEP(e) {
    this.atLeastOneSepFirstInternal(0, e);
  }
  AT_LEAST_ONE_SEP1(e) {
    this.atLeastOneSepFirstInternal(1, e);
  }
  AT_LEAST_ONE_SEP2(e) {
    this.atLeastOneSepFirstInternal(2, e);
  }
  AT_LEAST_ONE_SEP3(e) {
    this.atLeastOneSepFirstInternal(3, e);
  }
  AT_LEAST_ONE_SEP4(e) {
    this.atLeastOneSepFirstInternal(4, e);
  }
  AT_LEAST_ONE_SEP5(e) {
    this.atLeastOneSepFirstInternal(5, e);
  }
  AT_LEAST_ONE_SEP6(e) {
    this.atLeastOneSepFirstInternal(6, e);
  }
  AT_LEAST_ONE_SEP7(e) {
    this.atLeastOneSepFirstInternal(7, e);
  }
  AT_LEAST_ONE_SEP8(e) {
    this.atLeastOneSepFirstInternal(8, e);
  }
  AT_LEAST_ONE_SEP9(e) {
    this.atLeastOneSepFirstInternal(9, e);
  }
  RULE(e, r, n = pr) {
    if (ue(this.definedRulesNames, e)) {
      const s = {
        message: tt.buildDuplicateRuleNameError({
          topLevelRule: e,
          grammarName: this.className
        }),
        type: ce.DUPLICATE_RULE_NAME,
        ruleName: e
      };
      this.definitionErrors.push(s);
    }
    this.definedRulesNames.push(e);
    const i = this.defineRule(e, r, n);
    return this[e] = i, i;
  }
  OVERRIDE_RULE(e, r, n = pr) {
    const i = ld(e, this.definedRulesNames, this.className);
    this.definitionErrors = this.definitionErrors.concat(i);
    const s = this.defineRule(e, r, n);
    return this[e] = s, s;
  }
  BACKTRACK(e, r) {
    return function() {
      this.isBackTrackingStack.push(1);
      const n = this.saveRecogState();
      try {
        return e.apply(this, r), !0;
      } catch (i) {
        if (lr(i))
          return !1;
        throw i;
      } finally {
        this.reloadRecogState(n), this.isBackTrackingStack.pop();
      }
    };
  }
  // GAST export APIs
  getGAstProductions() {
    return this.gastProductionsCache;
  }
  getSerializedGastProductions() {
    return Wf(Z(this.gastProductionsCache));
  }
}
class Vd {
  initRecognizerEngine(e, r) {
    if (this.className = this.constructor.name, this.shortRuleNameToFull = {}, this.fullRuleNameToShort = {}, this.ruleShortNameIdx = 256, this.tokenMatcher = ur, this.subruleIdx = 0, this.definedRulesNames = [], this.tokensMap = {}, this.isBackTrackingStack = [], this.RULE_STACK = [], this.RULE_OCCURRENCE_STACK = [], this.gastProductionsCache = {}, b(r, "serializedGrammar"))
      throw Error(`The Parser's configuration can no longer contain a <serializedGrammar> property.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0
	For Further details.`);
    if (j(e)) {
      if (K(e))
        throw Error(`A Token Vocabulary cannot be empty.
	Note that the first argument for the parser constructor
	is no longer a Token vector (since v4.0).`);
      if (typeof e[0].startOffset == "number")
        throw Error(`The Parser constructor no longer accepts a token vector as the first argument.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0
	For Further details.`);
    }
    if (j(e))
      this.tokensMap = me(e, (s, o) => (s[o.name] = o, s), {});
    else if (b(e, "modes") && Oe(Re(Z(e.modes)), Fp)) {
      const s = Re(Z(e.modes)), o = Vn(s);
      this.tokensMap = me(o, (c, a) => (c[a.name] = a, c), {});
    } else if (_e(e))
      this.tokensMap = ie(e);
    else
      throw new Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
    this.tokensMap.EOF = it;
    const n = b(e, "modes") ? Re(Z(e.modes)) : Z(e), i = Oe(n, (s) => K(s.categoryMatches));
    this.tokenMatcher = i ? ur : Ut, Dt(Z(this.tokensMap));
  }
  defineRule(e, r, n) {
    if (this.selfAnalysisDone)
      throw Error(`Grammar rule <${e}> may not be defined after the 'performSelfAnalysis' method has been called'
Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);
    const i = b(n, "resyncEnabled") ? n.resyncEnabled : pr.resyncEnabled, s = b(n, "recoveryValueFunc") ? n.recoveryValueFunc : pr.recoveryValueFunc, o = this.ruleShortNameIdx << Id + Je;
    this.ruleShortNameIdx++, this.shortRuleNameToFull[o] = e, this.fullRuleNameToShort[e] = o;
    let c;
    return this.outputCst === !0 ? c = function(...a) {
      try {
        this.ruleInvocationStateUpdate(o, e, this.subruleIdx), r.apply(this, a);
        const u = this.CST_STACK[this.CST_STACK.length - 1];
        return this.cstPostRule(u), u;
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    } : c = function(...a) {
      try {
        return this.ruleInvocationStateUpdate(o, e, this.subruleIdx), r.apply(this, a);
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    }, Object.assign(c, { ruleName: e, originalGrammarAction: r });
  }
  invokeRuleCatch(e, r, n) {
    const i = this.RULE_STACK.length === 1, s = r && !this.isBackTracking() && this.recoveryEnabled;
    if (lr(e)) {
      const o = e;
      if (s) {
        const c = this.findReSyncTokenType();
        if (this.isInCurrentRuleReSyncSet(c))
          if (o.resyncedTokens = this.reSyncTo(c), this.outputCst) {
            const a = this.CST_STACK[this.CST_STACK.length - 1];
            return a.recoveredNode = !0, a;
          } else
            return n(e);
        else {
          if (this.outputCst) {
            const a = this.CST_STACK[this.CST_STACK.length - 1];
            a.recoveredNode = !0, o.partialCstResult = a;
          }
          throw o;
        }
      } else {
        if (i)
          return this.moveToTerminatedState(), n(e);
        throw o;
      }
    } else
      throw e;
  }
  // Implementation of parsing DSL
  optionInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(Co, r);
    return this.optionInternalLogic(e, r, n);
  }
  optionInternalLogic(e, r, n) {
    let i = this.getLaFuncFromCache(n), s;
    if (typeof e != "function") {
      s = e.DEF;
      const o = e.GATE;
      if (o !== void 0) {
        const c = i;
        i = () => o.call(this) && c.call(this);
      }
    } else
      s = e;
    if (i.call(this) === !0)
      return s.call(this);
  }
  atLeastOneInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(pn, e);
    return this.atLeastOneInternalLogic(e, r, n);
  }
  atLeastOneInternalLogic(e, r, n) {
    let i = this.getLaFuncFromCache(n), s;
    if (typeof r != "function") {
      s = r.DEF;
      const o = r.GATE;
      if (o !== void 0) {
        const c = i;
        i = () => o.call(this) && c.call(this);
      }
    } else
      s = r;
    if (i.call(this) === !0) {
      let o = this.doSingleRepetition(s);
      for (; i.call(this) === !0 && o === !0; )
        o = this.doSingleRepetition(s);
    } else
      throw this.raiseEarlyExitException(e, Y.REPETITION_MANDATORY, r.ERR_MSG);
    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [e, r], i, pn, e, qp);
  }
  atLeastOneSepFirstInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(er, e);
    this.atLeastOneSepFirstInternalLogic(e, r, n);
  }
  atLeastOneSepFirstInternalLogic(e, r, n) {
    const i = r.DEF, s = r.SEP;
    if (this.getLaFuncFromCache(n).call(this) === !0) {
      i.call(this);
      const o = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        o,
        i,
        Xi
      ], o, er, e, Xi);
    } else
      throw this.raiseEarlyExitException(e, Y.REPETITION_MANDATORY_WITH_SEPARATOR, r.ERR_MSG);
  }
  manyInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(fn, e);
    return this.manyInternalLogic(e, r, n);
  }
  manyInternalLogic(e, r, n) {
    let i = this.getLaFuncFromCache(n), s;
    if (typeof r != "function") {
      s = r.DEF;
      const c = r.GATE;
      if (c !== void 0) {
        const a = i;
        i = () => c.call(this) && a.call(this);
      }
    } else
      s = r;
    let o = !0;
    for (; i.call(this) === !0 && o === !0; )
      o = this.doSingleRepetition(s);
    this.attemptInRepetitionRecovery(
      this.manyInternal,
      [e, r],
      i,
      fn,
      e,
      Yp,
      // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
      // An infinite loop cannot occur as:
      // - Either the lookahead is guaranteed to consume something (Single Token Separator)
      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
      o
    );
  }
  manySepFirstInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(dn, e);
    this.manySepFirstInternalLogic(e, r, n);
  }
  manySepFirstInternalLogic(e, r, n) {
    const i = r.DEF, s = r.SEP;
    if (this.getLaFuncFromCache(n).call(this) === !0) {
      i.call(this);
      const o = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        o,
        i,
        qi
      ], o, dn, e, qi);
    }
  }
  repetitionSepSecondInternal(e, r, n, i, s) {
    for (; n(); )
      this.CONSUME(r), i.call(this);
    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
      e,
      r,
      n,
      i,
      s
    ], n, er, e, s);
  }
  doSingleRepetition(e) {
    const r = this.getLexerPosition();
    return e.call(this), this.getLexerPosition() > r;
  }
  orInternal(e, r) {
    const n = this.getKeyForAutomaticLookahead(Io, r), i = j(e) ? e : e.DEF, s = this.getLaFuncFromCache(n).call(this, i);
    if (s !== void 0)
      return i[s].ALT.call(this);
    this.raiseNoAltException(r, e.ERR_MSG);
  }
  ruleFinallyStateUpdate() {
    if (this.RULE_STACK.pop(), this.RULE_OCCURRENCE_STACK.pop(), this.cstFinallyStateUpdate(), this.RULE_STACK.length === 0 && this.isAtEndOfInput() === !1) {
      const e = this.LA(1), r = this.errorMessageProvider.buildNotAllInputParsedMessage({
        firstRedundant: e,
        ruleName: this.getCurrRuleFullName()
      });
      this.SAVE_ERROR(new Ad(r, e));
    }
  }
  subruleInternal(e, r, n) {
    let i;
    try {
      const s = n !== void 0 ? n.ARGS : void 0;
      return this.subruleIdx = r, i = e.apply(this, s), this.cstPostNonTerminal(i, n !== void 0 && n.LABEL !== void 0 ? n.LABEL : e.ruleName), i;
    } catch (s) {
      throw this.subruleInternalError(s, n, e.ruleName);
    }
  }
  subruleInternalError(e, r, n) {
    throw lr(e) && e.partialCstResult !== void 0 && (this.cstPostNonTerminal(e.partialCstResult, r !== void 0 && r.LABEL !== void 0 ? r.LABEL : n), delete e.partialCstResult), e;
  }
  consumeInternal(e, r, n) {
    let i;
    try {
      const s = this.LA(1);
      this.tokenMatcher(s, e) === !0 ? (this.consumeToken(), i = s) : this.consumeInternalError(e, s, n);
    } catch (s) {
      i = this.consumeInternalRecovery(e, r, s);
    }
    return this.cstPostTerminal(n !== void 0 && n.LABEL !== void 0 ? n.LABEL : e.name, i), i;
  }
  consumeInternalError(e, r, n) {
    let i;
    const s = this.LA(0);
    throw n !== void 0 && n.ERR_MSG ? i = n.ERR_MSG : i = this.errorMessageProvider.buildMismatchTokenMessage({
      expected: e,
      actual: r,
      previous: s,
      ruleName: this.getCurrRuleFullName()
    }), this.SAVE_ERROR(new Oo(i, r, s));
  }
  consumeInternalRecovery(e, r, n) {
    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
    n.name === "MismatchedTokenException" && !this.isBackTracking()) {
      const i = this.getFollowsForInRuleRecovery(e, r);
      try {
        return this.tryInRuleRecovery(e, i);
      } catch (s) {
        throw s.name === Lo ? n : s;
      }
    } else
      throw n;
  }
  saveRecogState() {
    const e = this.errors, r = ie(this.RULE_STACK);
    return {
      errors: e,
      lexerState: this.exportLexerState(),
      RULE_STACK: r,
      CST_STACK: this.CST_STACK
    };
  }
  reloadRecogState(e) {
    this.errors = e.errors, this.importLexerState(e.lexerState), this.RULE_STACK = e.RULE_STACK;
  }
  ruleInvocationStateUpdate(e, r, n) {
    this.RULE_OCCURRENCE_STACK.push(n), this.RULE_STACK.push(e), this.cstInvocationStateUpdate(r);
  }
  isBackTracking() {
    return this.isBackTrackingStack.length !== 0;
  }
  getCurrRuleFullName() {
    const e = this.getLastExplicitRuleShortName();
    return this.shortRuleNameToFull[e];
  }
  shortRuleNameToFullName(e) {
    return this.shortRuleNameToFull[e];
  }
  isAtEndOfInput() {
    return this.tokenMatcher(this.LA(1), it);
  }
  reset() {
    this.resetLexerState(), this.subruleIdx = 0, this.isBackTrackingStack = [], this.errors = [], this.RULE_STACK = [], this.CST_STACK = [], this.RULE_OCCURRENCE_STACK = [];
  }
}
class Wd {
  initErrorHandler(e) {
    this._errors = [], this.errorMessageProvider = b(e, "errorMessageProvider") ? e.errorMessageProvider : We.errorMessageProvider;
  }
  SAVE_ERROR(e) {
    if (lr(e))
      return e.context = {
        ruleStack: this.getHumanReadableRuleStack(),
        ruleOccurrenceStack: ie(this.RULE_OCCURRENCE_STACK)
      }, this._errors.push(e), e;
    throw Error("Trying to save an Error which is not a RecognitionException");
  }
  get errors() {
    return ie(this._errors);
  }
  set errors(e) {
    this._errors = e;
  }
  // TODO: consider caching the error message computed information
  raiseEarlyExitException(e, r, n) {
    const i = this.getCurrRuleFullName(), s = this.getGAstProductions()[i], o = Yn(e, s, r, this.maxLookahead)[0], c = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      c.push(this.LA(u));
    const a = this.errorMessageProvider.buildEarlyExitMessage({
      expectedIterationPaths: o,
      actual: c,
      previous: this.LA(0),
      customUserDescription: n,
      ruleName: i
    });
    throw this.SAVE_ERROR(new Sd(a, this.LA(1), this.LA(0)));
  }
  // TODO: consider caching the error message computed information
  raiseNoAltException(e, r) {
    const n = this.getCurrRuleFullName(), i = this.getGAstProductions()[n], s = zn(e, i, this.maxLookahead), o = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      o.push(this.LA(u));
    const c = this.LA(0), a = this.errorMessageProvider.buildNoViableAltMessage({
      expectedPathsPerAlt: s,
      actual: o,
      previous: c,
      customUserDescription: r,
      ruleName: this.getCurrRuleFullName()
    });
    throw this.SAVE_ERROR(new _d(a, this.LA(1), c));
  }
}
class Kd {
  initContentAssist() {
  }
  computeContentAssist(e, r) {
    const n = this.gastProductionsCache[e];
    if (Ve(n))
      throw Error(`Rule ->${e}<- does not exist in this grammar.`);
    return fo([n], r, this.tokenMatcher, this.maxLookahead);
  }
  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
  // TODO: should this be more explicitly part of the public API?
  getNextPossibleTokenTypes(e) {
    const r = Ie(e.ruleStack), n = this.getGAstProductions()[r];
    return new zp(n, e).startWalking();
  }
}
const kr = {
  description: "This Object indicates the Parser is during Recording Phase"
};
Object.freeze(kr);
const es = !0, ts = Math.pow(2, Je) - 1, bo = V({ name: "RECORDING_PHASE_TOKEN", pattern: ae.NA });
Dt([bo]);
const No = Hn(
  bo,
  `This IToken indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  // Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
  -1,
  -1,
  -1,
  -1,
  -1,
  -1
);
Object.freeze(No);
const Hd = {
  name: `This CSTNode indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  children: {}
};
class zd {
  initGastRecorder(e) {
    this.recordingProdStack = [], this.RECORDING_PHASE = !1;
  }
  enableRecording() {
    this.RECORDING_PHASE = !0, this.TRACE_INIT("Enable Recording", () => {
      for (let e = 0; e < 10; e++) {
        const r = e > 0 ? e : "";
        this[`CONSUME${r}`] = function(n, i) {
          return this.consumeInternalRecord(n, e, i);
        }, this[`SUBRULE${r}`] = function(n, i) {
          return this.subruleInternalRecord(n, e, i);
        }, this[`OPTION${r}`] = function(n) {
          return this.optionInternalRecord(n, e);
        }, this[`OR${r}`] = function(n) {
          return this.orInternalRecord(n, e);
        }, this[`MANY${r}`] = function(n) {
          this.manyInternalRecord(e, n);
        }, this[`MANY_SEP${r}`] = function(n) {
          this.manySepFirstInternalRecord(e, n);
        }, this[`AT_LEAST_ONE${r}`] = function(n) {
          this.atLeastOneInternalRecord(e, n);
        }, this[`AT_LEAST_ONE_SEP${r}`] = function(n) {
          this.atLeastOneSepFirstInternalRecord(e, n);
        };
      }
      this.consume = function(e, r, n) {
        return this.consumeInternalRecord(r, e, n);
      }, this.subrule = function(e, r, n) {
        return this.subruleInternalRecord(r, e, n);
      }, this.option = function(e, r) {
        return this.optionInternalRecord(r, e);
      }, this.or = function(e, r) {
        return this.orInternalRecord(r, e);
      }, this.many = function(e, r) {
        this.manyInternalRecord(e, r);
      }, this.atLeastOne = function(e, r) {
        this.atLeastOneInternalRecord(e, r);
      }, this.ACTION = this.ACTION_RECORD, this.BACKTRACK = this.BACKTRACK_RECORD, this.LA = this.LA_RECORD;
    });
  }
  disableRecording() {
    this.RECORDING_PHASE = !1, this.TRACE_INIT("Deleting Recording methods", () => {
      const e = this;
      for (let r = 0; r < 10; r++) {
        const n = r > 0 ? r : "";
        delete e[`CONSUME${n}`], delete e[`SUBRULE${n}`], delete e[`OPTION${n}`], delete e[`OR${n}`], delete e[`MANY${n}`], delete e[`MANY_SEP${n}`], delete e[`AT_LEAST_ONE${n}`], delete e[`AT_LEAST_ONE_SEP${n}`];
      }
      delete e.consume, delete e.subrule, delete e.option, delete e.or, delete e.many, delete e.atLeastOne, delete e.ACTION, delete e.BACKTRACK, delete e.LA;
    });
  }
  //   Parser methods are called inside an ACTION?
  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
  // @ts-expect-error -- noop place holder
  ACTION_RECORD(e) {
  }
  // Executing backtracking logic will break our recording logic assumptions
  BACKTRACK_RECORD(e, r) {
    return () => !0;
  }
  // LA is part of the official API and may be used for custom lookahead logic
  // by end users who may forget to wrap it in ACTION or inside a GATE
  LA_RECORD(e) {
    return fr;
  }
  topLevelRuleRecord(e, r) {
    try {
      const n = new mt({ definition: [], name: e });
      return n.name = e, this.recordingProdStack.push(n), r.call(this), this.recordingProdStack.pop(), n;
    } catch (n) {
      if (n.KNOWN_RECORDER_ERROR !== !0)
        try {
          n.message = n.message + `
	 This error was thrown during the "grammar recording phase" For more info see:
	https://chevrotain.io/docs/guide/internals.html#grammar-recording`;
        } catch {
          throw n;
        }
      throw n;
    }
  }
  // Implementation of parsing DSL
  optionInternalRecord(e, r) {
    return Tt.call(this, le, e, r);
  }
  atLeastOneInternalRecord(e, r) {
    Tt.call(this, De, r, e);
  }
  atLeastOneSepFirstInternalRecord(e, r) {
    Tt.call(this, Fe, r, e, es);
  }
  manyInternalRecord(e, r) {
    Tt.call(this, ee, r, e);
  }
  manySepFirstInternalRecord(e, r) {
    Tt.call(this, Me, r, e, es);
  }
  orInternalRecord(e, r) {
    return Yd.call(this, e, r);
  }
  subruleInternalRecord(e, r, n) {
    if (hr(r), !e || b(e, "ruleName") === !1) {
      const c = new Error(`<SUBRULE${rs(r)}> argument is invalid expecting a Parser method reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw c.KNOWN_RECORDER_ERROR = !0, c;
    }
    const i = pt(this.recordingProdStack), s = e.ruleName, o = new ge({
      idx: r,
      nonTerminalName: s,
      label: n == null ? void 0 : n.LABEL,
      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
      referencedRule: void 0
    });
    return i.definition.push(o), this.outputCst ? Hd : kr;
  }
  consumeInternalRecord(e, r, n) {
    if (hr(r), !uo(e)) {
      const o = new Error(`<CONSUME${rs(r)}> argument is invalid expecting a TokenType reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw o.KNOWN_RECORDER_ERROR = !0, o;
    }
    const i = pt(this.recordingProdStack), s = new z({
      idx: r,
      terminalType: e,
      label: n == null ? void 0 : n.LABEL
    });
    return i.definition.push(s), No;
  }
}
function Tt(t, e, r, n = !1) {
  hr(r);
  const i = pt(this.recordingProdStack), s = Ke(e) ? e : e.DEF, o = new t({ definition: [], idx: r });
  return n && (o.separator = e.SEP), b(e, "MAX_LOOKAHEAD") && (o.maxLookahead = e.MAX_LOOKAHEAD), this.recordingProdStack.push(o), s.call(this), i.definition.push(o), this.recordingProdStack.pop(), kr;
}
function Yd(t, e) {
  hr(e);
  const r = pt(this.recordingProdStack), n = j(t) === !1, i = n === !1 ? t : t.DEF, s = new be({
    definition: [],
    idx: e,
    ignoreAmbiguities: n && t.IGNORE_AMBIGUITIES === !0
  });
  b(t, "MAX_LOOKAHEAD") && (s.maxLookahead = t.MAX_LOOKAHEAD);
  const o = Qs(i, (c) => Ke(c.GATE));
  return s.hasPredicates = o, r.definition.push(s), k(i, (c) => {
    const a = new fe({ definition: [] });
    s.definition.push(a), b(c, "IGNORE_AMBIGUITIES") ? a.ignoreAmbiguities = c.IGNORE_AMBIGUITIES : b(c, "GATE") && (a.ignoreAmbiguities = !0), this.recordingProdStack.push(a), c.ALT.call(this), this.recordingProdStack.pop();
  }), kr;
}
function rs(t) {
  return t === 0 ? "" : `${t}`;
}
function hr(t) {
  if (t < 0 || t > ts) {
    const e = new Error(
      // The stack trace will contain all the needed details
      `Invalid DSL Method idx value: <${t}>
	Idx value must be a none negative value smaller than ${ts + 1}`
    );
    throw e.KNOWN_RECORDER_ERROR = !0, e;
  }
}
class qd {
  initPerformanceTracer(e) {
    if (b(e, "traceInitPerf")) {
      const r = e.traceInitPerf, n = typeof r == "number";
      this.traceInitMaxIdent = n ? r : 1 / 0, this.traceInitPerf = n ? r > 0 : r;
    } else
      this.traceInitMaxIdent = 0, this.traceInitPerf = We.traceInitPerf;
    this.traceInitIndent = -1;
  }
  TRACE_INIT(e, r) {
    if (this.traceInitPerf === !0) {
      this.traceInitIndent++;
      const n = new Array(this.traceInitIndent + 1).join("	");
      this.traceInitIndent < this.traceInitMaxIdent && console.log(`${n}--> <${e}>`);
      const { time: i, value: s } = Zs(r), o = i > 10 ? console.warn : console.log;
      return this.traceInitIndent < this.traceInitMaxIdent && o(`${n}<-- <${e}> time: ${i}ms`), this.traceInitIndent--, s;
    } else
      return r();
  }
}
function Xd(t, e) {
  e.forEach((r) => {
    const n = r.prototype;
    Object.getOwnPropertyNames(n).forEach((i) => {
      if (i === "constructor")
        return;
      const s = Object.getOwnPropertyDescriptor(n, i);
      s && (s.get || s.set) ? Object.defineProperty(t.prototype, i, s) : t.prototype[i] = r.prototype[i];
    });
  });
}
const fr = Hn(it, "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(fr);
const We = Object.freeze({
  recoveryEnabled: !1,
  maxLookahead: 3,
  dynamicTokensEnabled: !1,
  outputCst: !0,
  errorMessageProvider: ho,
  nodeLocationTracking: "none",
  traceInitPerf: !1,
  skipValidations: !1
}), pr = Object.freeze({
  recoveryValueFunc: () => {
  },
  resyncEnabled: !0
});
var ce;
(function(t) {
  t[t.INVALID_RULE_NAME = 0] = "INVALID_RULE_NAME", t[t.DUPLICATE_RULE_NAME = 1] = "DUPLICATE_RULE_NAME", t[t.INVALID_RULE_OVERRIDE = 2] = "INVALID_RULE_OVERRIDE", t[t.DUPLICATE_PRODUCTIONS = 3] = "DUPLICATE_PRODUCTIONS", t[t.UNRESOLVED_SUBRULE_REF = 4] = "UNRESOLVED_SUBRULE_REF", t[t.LEFT_RECURSION = 5] = "LEFT_RECURSION", t[t.NONE_LAST_EMPTY_ALT = 6] = "NONE_LAST_EMPTY_ALT", t[t.AMBIGUOUS_ALTS = 7] = "AMBIGUOUS_ALTS", t[t.CONFLICT_TOKENS_RULES_NAMESPACE = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE", t[t.INVALID_TOKEN_NAME = 9] = "INVALID_TOKEN_NAME", t[t.NO_NON_EMPTY_LOOKAHEAD = 10] = "NO_NON_EMPTY_LOOKAHEAD", t[t.AMBIGUOUS_PREFIX_ALTS = 11] = "AMBIGUOUS_PREFIX_ALTS", t[t.TOO_MANY_ALTS = 12] = "TOO_MANY_ALTS", t[t.CUSTOM_LOOKAHEAD_VALIDATION = 13] = "CUSTOM_LOOKAHEAD_VALIDATION";
})(ce || (ce = {}));
class Ft {
  /**
   *  @deprecated use the **instance** method with the same name instead
   */
  static performSelfAnalysis(e) {
    throw Error("The **static** `performSelfAnalysis` method has been deprecated.	\nUse the **instance** method with the same name instead.");
  }
  performSelfAnalysis() {
    this.TRACE_INIT("performSelfAnalysis", () => {
      let e;
      this.selfAnalysisDone = !0;
      const r = this.className;
      this.TRACE_INIT("toFastProps", () => {
        eo(this);
      }), this.TRACE_INIT("Grammar Recording", () => {
        try {
          this.enableRecording(), k(this.definedRulesNames, (i) => {
            const s = this[i].originalGrammarAction;
            let o;
            this.TRACE_INIT(`${i} Rule`, () => {
              o = this.topLevelRuleRecord(i, s);
            }), this.gastProductionsCache[i] = o;
          });
        } finally {
          this.disableRecording();
        }
      });
      let n = [];
      if (this.TRACE_INIT("Grammar Resolving", () => {
        n = Td({
          rules: Z(this.gastProductionsCache)
        }), this.definitionErrors = this.definitionErrors.concat(n);
      }), this.TRACE_INIT("Grammar Validations", () => {
        if (K(n) && this.skipValidations === !1) {
          const i = yd({
            rules: Z(this.gastProductionsCache),
            tokenTypes: Z(this.tokensMap),
            errMsgProvider: tt,
            grammarName: r
          }), s = id({
            lookaheadStrategy: this.lookaheadStrategy,
            rules: Z(this.gastProductionsCache),
            tokenTypes: Z(this.tokensMap),
            grammarName: r
          });
          this.definitionErrors = this.definitionErrors.concat(i, s);
        }
      }), K(this.definitionErrors) && (this.recoveryEnabled && this.TRACE_INIT("computeAllProdsFollows", () => {
        const i = Qf(Z(this.gastProductionsCache));
        this.resyncFollows = i;
      }), this.TRACE_INIT("ComputeLookaheadFunctions", () => {
        var i, s;
        (s = (i = this.lookaheadStrategy).initialize) === null || s === void 0 || s.call(i, {
          rules: Z(this.gastProductionsCache)
        }), this.preComputeLookaheadFunctions(Z(this.gastProductionsCache));
      })), !Ft.DEFER_DEFINITION_ERRORS_HANDLING && !K(this.definitionErrors))
        throw e = C(this.definitionErrors, (i) => i.message), new Error(`Parser Definition Errors detected:
 ${e.join(`
-------------------------------
`)}`);
    });
  }
  constructor(e, r) {
    this.definitionErrors = [], this.selfAnalysisDone = !1;
    const n = this;
    if (n.initErrorHandler(r), n.initLexerAdapter(), n.initLooksAhead(r), n.initRecognizerEngine(e, r), n.initRecoverable(r), n.initTreeBuilder(r), n.initContentAssist(), n.initGastRecorder(r), n.initPerformanceTracer(r), b(r, "ignoredIssues"))
      throw new Error(`The <ignoredIssues> IParserConfig property has been deprecated.
	Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.
	See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES
	For further details.`);
    this.skipValidations = b(r, "skipValidations") ? r.skipValidations : We.skipValidations;
  }
}
Ft.DEFER_DEFINITION_ERRORS_HANDLING = !1;
Xd(Ft, [
  Od,
  Md,
  $d,
  Gd,
  Vd,
  Bd,
  Wd,
  Kd,
  zd,
  qd
]);
class Qd extends Ft {
  constructor(e, r = We) {
    const n = ie(r);
    n.outputCst = !0, super(e, n);
  }
}
const ko = V({
  name: "HTML_COMMENT",
  pattern: /<!--[\s\S]*?-->/,
  line_breaks: !0
}), Po = V({
  name: "HTML_CONDITIONAL_COMMENT",
  pattern: /<!\[[\s\S]*?\]>/,
  line_breaks: !0
}), Jd = V({
  name: "XML",
  pattern: /<\?xml(?:.|\s)*?\?>/
}), wo = V({
  name: "CDATA",
  pattern: /<!\[CDATA\[[\s\S]*?]]>/
}), xo = V({
  name: "DTD",
  pattern: /<!.*?>/
}), Uo = V({
  name: "SCRIPTLET",
  pattern: /<%(.*?)%>|<\?(.*?)\?>/
}), Zd = V({
  name: "SEA_WS",
  pattern: /[ \t]+/,
  group: ae.SKIPPED
}), Do = V({
  name: "LINE_BREAK",
  pattern: /\r?\n/
}), Fo = V({
  name: "SCRIPT_OPEN",
  pattern: /<script\b[^>]*>/,
  push_mode: "SCRIPT"
}), jo = V({
  name: "STYLE_OPEN",
  pattern: /<style\b[^>]*>/,
  push_mode: "STYLE"
}), gn = V({
  name: "TAG_OPEN",
  pattern: /</,
  push_mode: "TAG"
}), $o = V({
  name: "HTML_TEXT",
  pattern: /[^<@]+/,
  line_breaks: !0
}), vn = V({
  name: "TAG_CLOSE",
  pattern: />/,
  pop_mode: !0
}), Go = V({
  name: "TAG_SLASH_CLOSE",
  pattern: /\/>/,
  pop_mode: !0
}), Bo = V({
  name: "TAG_SLASH",
  pattern: /\//
}), Vo = V({
  name: "TAG_EQUALS",
  pattern: /=/,
  push_mode: "ATTVALUE"
}), tr = V({
  name: "TAG_NAME",
  pattern: /[:@a-zA-Z\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:\.\-@\u00B7\u0300-\u036F\u203F-\u2040.0-9a-zA-Z]*/
}), em = V({
  name: "TAG_WHITESPACE",
  pattern: /[ \t\r\n]+/,
  group: ae.SKIPPED
}), Wo = V({
  name: "SCRIPT_BODY",
  pattern: /[\s\S]*?<\/script>/,
  pop_mode: !0
}), Ko = V({
  name: "STYLE_BODY",
  pattern: /[\s\S]*?<\/style>/,
  pop_mode: !0
}), Ho = V({
  name: "ATTVALUE_VALUE",
  pattern: / *("[^<"]*"|'[^<']*'|[-_./+,?=:#;0-9a-zA-Z]+ ?|#[0-9a-fA-F]+|[0-9]+%?)/,
  pop_mode: !0
}), En = V({
  name: "EDGE_COMMENT",
  pattern: /{{--[\s\S]*?--}}/,
  line_breaks: !0
}), Tn = V({
  name: "EDGE_MUSTACHE",
  pattern: /{{[\s\S]*?}}\s*/
}), yn = V({
  name: "EDGE_SAFE_MUSTACHE",
  pattern: /{{{[\s\S]*?}}}\s*/
}), zo = V({
  name: "EDGE_ESCAPED_MUSTACHE",
  pattern: /@{{[\s\S]*?}}\s*/
}), Yo = V({
  name: "EDGE_TAG",
  pattern: /@(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/
}), qo = V({
  name: "EDGE_TAG_PROP",
  pattern: /@(if|elseif|else|each|flashMessage)\([^)]*\)\s*([\s\S]*?)@end/
}), _n = {
  defaultMode: "default",
  modes: {
    default: [
      ko,
      Po,
      Jd,
      wo,
      xo,
      Uo,
      Do,
      Zd,
      Fo,
      jo,
      gn,
      En,
      zo,
      yn,
      Tn,
      Yo,
      $o
    ],
    TAG: [
      vn,
      Go,
      Bo,
      Vo,
      En,
      yn,
      Tn,
      qo,
      tr,
      em
    ],
    SCRIPT: [Wo],
    STYLE: [Ko],
    ATTVALUE: [Ho]
  }
}, tm = () => {
  const t = [];
  for (const e in _n.modes)
    t.push(..._n.modes[e]);
  return t;
}, rm = new ae(_n);
class Xo extends Qd {
  constructor() {
    super(tm());
    const e = this;
    e.RULE("document", () => {
      e.MANY(() => {
        e.SUBRULE(e.content);
      });
    }), e.RULE("content", () => {
      e.OR([
        { ALT: () => e.CONSUME($o) },
        { ALT: () => e.CONSUME(Do) },
        { ALT: () => e.SUBRULE(e.element) },
        { ALT: () => e.SUBRULE(e.scriptlet) },
        { ALT: () => e.SUBRULE(e.htmlComment) },
        { ALT: () => e.SUBRULE(e.htmlConditionalComment) },
        { ALT: () => e.SUBRULE(e.cdata) },
        { ALT: () => e.SUBRULE(e.dtd) },
        { ALT: () => e.SUBRULE(e.scriptElement) },
        { ALT: () => e.SUBRULE(e.styleElement) },
        { ALT: () => e.SUBRULE(e.edgeComment) },
        { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
        { ALT: () => e.SUBRULE(e.edgeMustache) },
        { ALT: () => e.SUBRULE(e.edgeEscapedMustache) },
        { ALT: () => e.SUBRULE(e.edgeTag) }
      ]);
    }), e.RULE("element", () => {
      e.OR([
        {
          ALT: () => e.SUBRULE(e.openingTag)
        },
        {
          ALT: () => e.SUBRULE(e.closingTag)
        }
      ]);
    }), e.RULE("openingTag", () => {
      e.CONSUME(gn), e.CONSUME(tr), e.MANY(() => {
        e.OR([
          { ALT: () => e.SUBRULE(e.edgeTagProp) },
          { ALT: () => e.SUBRULE(e.attribute) },
          { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
          { ALT: () => e.SUBRULE(e.edgeMustache) },
          { ALT: () => e.SUBRULE(e.edgeComment) }
        ]);
      }), e.OR1([
        { ALT: () => e.CONSUME1(Go) },
        { ALT: () => e.CONSUME1(vn) }
      ]);
    }), e.RULE("attribute", () => {
      e.CONSUME(tr), e.OPTION(() => {
        e.CONSUME(Vo), e.CONSUME(Ho);
      });
    }), e.RULE("closingTag", () => {
      e.CONSUME(gn), e.CONSUME(Bo), e.CONSUME(tr), e.CONSUME(vn);
    }), e.RULE("scriptlet", () => {
      e.CONSUME(Uo);
    }), e.RULE("htmlComment", () => {
      e.CONSUME(ko);
    }), e.RULE("htmlConditionalComment", () => {
      e.CONSUME(Po);
    }), e.RULE("cdata", () => {
      e.CONSUME(wo);
    }), e.RULE("dtd", () => {
      e.CONSUME(xo);
    }), e.RULE("scriptElement", () => {
      e.CONSUME(Fo), e.CONSUME(Wo);
    }), e.RULE("styleElement", () => {
      e.CONSUME(jo), e.CONSUME(Ko);
    }), e.RULE("edgeComment", () => {
      e.CONSUME(En);
    }), e.RULE("edgeMustache", () => {
      e.CONSUME(Tn);
    }), e.RULE("edgeSafeMustache", () => {
      e.CONSUME(yn);
    }), e.RULE("edgeEscapedMustache", () => {
      e.CONSUME(zo);
    }), e.RULE("edgeTag", () => {
      e.CONSUME(Yo);
    }), e.RULE("edgeTagProp", () => {
      e.CONSUME(qo);
    }), this.performSelfAnalysis();
  }
}
const nm = new Xo(), im = nm.getBaseCstVisitorConstructor();
var An, rr, Sn;
class sm extends im {
  constructor() {
    super(), Jn(this, rr), Jn(this, An, /* @__PURE__ */ new Set([
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr",
      // Below are for SVGs
      "animateMotion",
      "animateTransform",
      "animate",
      "circle",
      "ellipse",
      "feGaussianBlur",
      "feDropShadow",
      "feOffset",
      "feBlend",
      "feColorMatrix",
      "feComposite",
      "feDisplacementMap",
      "feFlood",
      "feImage",
      "feMergeNode",
      "feMorphology",
      "fePointLight",
      "feSpotLight",
      "feTile",
      "feTurbulence",
      "image",
      "line",
      "mpath",
      "path",
      "polygon",
      "polyline",
      "rect",
      "set",
      "stop",
      "use",
      "view"
    ])), this.validateVisitor();
  }
  document(e) {
    const r = e.content[0].startOffset, n = e.content[e.content.length - 1].endOffset;
    return {
      type: "document",
      children: e.content.map((i) => this.visit(i)),
      start: r,
      end: n
    };
  }
  content(e) {
    if (e.HTML_TEXT)
      return {
        type: "htmlText",
        value: e.HTML_TEXT[0].image,
        start: e.HTML_TEXT[0].startOffset,
        end: e.HTML_TEXT[0].endOffset
      };
    if (e.LINE_BREAK)
      return {
        type: "linebreak",
        value: e.LINE_BREAK[0].image,
        start: e.LINE_BREAK[0].startOffset,
        end: e.LINE_BREAK[0].endOffset
      };
    const r = e.element || e.scriptlet || e.htmlComment || e.htmlConditionalComment || e.cdata || e.dtd || e.scriptElement || e.styleElement || e.edgeComment || e.edgeMustache || e.edgeSafeMustache || e.edgeEscapedMustache || e.edgeTag || e.htmlText;
    return this.visit(r);
  }
  element(e) {
    return e.openingTag ? this.visit(e.openingTag) : e.selfClosingTag ? this.visit(e.selfClosingTag) : this.visit(e.closingTag);
  }
  openingTag(e) {
    const r = e.TAG_NAME[0].image, n = e.edgeSafeMustache ? e.edgeSafeMustache.map((l) => this.visit(l)) : [], i = e.edgeMustache ? e.edgeMustache.map((l) => this.visit(l)) : [], s = e.edgeTagProp ? e.edgeTagProp.map((l) => this.visit(l)) : [], o = e.attribute ? e.attribute.map((l) => this.visit(l)) : [], c = e.edgeComment ? e.edgeComment.map((l) => this.visit(l)) : [], a = e.TAG_NAME[0].startOffset, u = e.TAG_NAME[0].endOffset;
    return Zn(this, rr, Sn).call(this, r) || e.TAG_SLASH_CLOSE ? {
      type: "voidTag",
      tagName: r,
      edgeSafeMustaches: n,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: o,
      comments: c,
      start: a,
      end: u
    } : {
      type: "openingTag",
      tagName: r,
      edgeSafeMustaches: n,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: o,
      comments: c,
      start: a,
      end: u
    };
  }
  attribute(e) {
    var r, n, i;
    const s = e.TAG_NAME[0].image, o = (i = (n = (r = e.ATTVALUE_VALUE) == null ? void 0 : r[0]) == null ? void 0 : n.image) == null ? void 0 : i.trim(), c = e.TAG_NAME[0].startOffset, a = e.ATTVALUE_VALUE ? e.ATTVALUE_VALUE[0].endOffset : e.TAG_NAME[0].endOffset;
    return { type: "attribute", attributeName: s, attributeValue: o, start: c, end: a };
  }
  closingTag(e) {
    const r = e.TAG_NAME[0].image, n = e.TAG_OPEN[0].startOffset, i = e.TAG_CLOSE[0].endOffset;
    return Zn(this, rr, Sn).call(this, r) ? {
      type: "doNotPrint"
    } : { type: "closingTag", tagName: r, start: n, end: i };
  }
  scriptlet(e) {
    const r = e.SCRIPTLET[0].image, n = e.SCRIPTLET[0].startOffset, i = e.SCRIPTLET[0].endOffset;
    return { type: "scriptlet", value: r, start: n, end: i };
  }
  htmlComment(e) {
    const r = e.HTML_COMMENT[0].image, n = e.HTML_COMMENT[0].startOffset, i = e.HTML_COMMENT[0].endOffset;
    return { type: "htmlComment", value: r, start: n, end: i };
  }
  htmlConditionalComment(e) {
    const r = e.HTML_CONDITIONAL_COMMENT[0].image, n = e.HTML_CONDITIONAL_COMMENT[0].startOffset, i = e.HTML_CONDITIONAL_COMMENT[0].endOffset;
    return { type: "htmlConditionalComment", value: r, start: n, end: i };
  }
  cdata(e) {
    const r = e.CDATA[0].image, n = e.CDATA[0].startOffset, i = e.CDATA[0].endOffset;
    return { type: "cdata", value: r, start: n, end: i };
  }
  dtd(e) {
    const r = e.DTD[0].image, n = e.DTD[0].startOffset, i = e.DTD[0].endOffset;
    return { type: "dtd", value: r, start: n, end: i };
  }
  scriptElement(e) {
    const r = e.SCRIPT_OPEN[0].image + e.SCRIPT_BODY[0].image, n = e.SCRIPT_OPEN[0].startOffset, i = e.SCRIPT_BODY[0].endOffset;
    return { type: "scriptElement", value: r, start: n, end: i };
  }
  styleElement(e) {
    const r = e.STYLE_OPEN[0].image + e.STYLE_BODY[0].image, n = e.STYLE_OPEN[0].startOffset, i = e.STYLE_BODY[0].endOffset;
    return { type: "styleElement", value: r, start: n, end: i };
  }
  edgeComment(e) {
    const r = e.EDGE_COMMENT[0].image, n = e.EDGE_COMMENT[0].startOffset, i = e.EDGE_COMMENT[0].endOffset;
    return { type: "edgeComment", value: r, start: n, end: i };
  }
  edgeMustache(e) {
    const r = e.EDGE_MUSTACHE[0].image, n = e.EDGE_MUSTACHE[0].startOffset, i = e.EDGE_MUSTACHE[0].endOffset;
    return { type: "edgeMustache", value: r, start: n, end: i };
  }
  edgeSafeMustache(e) {
    const r = e.EDGE_SAFE_MUSTACHE[0].image, n = e.EDGE_SAFE_MUSTACHE[0].startOffset, i = e.EDGE_SAFE_MUSTACHE[0].endOffset;
    return { type: "edgeSafeMustache", value: r, start: n, end: i };
  }
  edgeEscapedMustache(e) {
    const r = e.EDGE_ESCAPED_MUSTACHE[0].image, n = e.EDGE_ESCAPED_MUSTACHE[0].startOffset, i = e.EDGE_ESCAPED_MUSTACHE[0].endOffset;
    return { type: "edgeEscapedMustache", value: r, start: n, end: i };
  }
  edgeTag(e) {
    const r = e.EDGE_TAG[0].image, n = e.EDGE_TAG[0].startOffset, i = e.EDGE_TAG[0].endOffset;
    return { type: "edgeTag", value: r, start: n, end: i };
  }
  edgeTagProp(e) {
    const r = e.EDGE_TAG_PROP[0].image, n = e.EDGE_TAG_PROP[0].startOffset, i = e.EDGE_TAG_PROP[0].endOffset;
    return { type: "edgeTagProp", value: r, start: n, end: i };
  }
}
An = /* @__PURE__ */ new WeakMap(), rr = /* @__PURE__ */ new WeakSet(), Sn = function(t) {
  return ca(this, An).has(t);
};
const Kt = new Xo(), om = new sm();
function am(t) {
  const e = rm.tokenize(t);
  Kt.input = e.tokens;
  const r = Kt.document();
  if (Kt.errors.length > 0)
    throw new Error(
      `Parsing Errors Detected: ${JSON.stringify(Kt.errors)}`
    );
  return om.visit(r);
}
function cm(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(n) {
    var i = Object.getOwnPropertyDescriptor(t, n);
    Object.defineProperty(r, n, i.get ? i : {
      enumerable: !0,
      get: function() {
        return t[n];
      }
    });
  }), r;
}
var dr = {}, ns = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, um = function(t, e) {
  e = e || {};
  var r = 1, n = 1;
  function i(S) {
    var A = S.match(/\n/g);
    A && (r += A.length);
    var M = S.lastIndexOf(`
`);
    n = ~M ? S.length - M : n + S.length;
  }
  function s() {
    var S = { line: r, column: n };
    return function(A) {
      return A.position = new o(S), g(), A;
    };
  }
  function o(S) {
    this.start = S, this.end = { line: r, column: n }, this.source = e.source;
  }
  o.prototype.content = t;
  var c = [];
  function a(S) {
    var A = new Error(e.source + ":" + r + ":" + n + ": " + S);
    if (A.reason = S, A.filename = e.source, A.line = r, A.column = n, A.source = t, e.silent)
      c.push(A);
    else
      throw A;
  }
  function u() {
    var S = p();
    return {
      type: "stylesheet",
      stylesheet: {
        source: e.source,
        rules: S,
        parsingErrors: c
      }
    };
  }
  function l() {
    return f(/^{\s*/);
  }
  function h() {
    return f(/^}/);
  }
  function p() {
    var S, A = [];
    for (g(), m(A); t.length && t.charAt(0) != "}" && (S = U() || G()); )
      S !== !1 && (A.push(S), m(A));
    return A;
  }
  function f(S) {
    var A = S.exec(t);
    if (A) {
      var M = A[0];
      return i(M), t = t.slice(M.length), A;
    }
  }
  function g() {
    f(/^\s*/);
  }
  function m(S) {
    var A;
    for (S = S || []; A = v(); )
      A !== !1 && S.push(A);
    return S;
  }
  function v() {
    var S = s();
    if (!(t.charAt(0) != "/" || t.charAt(1) != "*")) {
      for (var A = 2; t.charAt(A) != "" && (t.charAt(A) != "*" || t.charAt(A + 1) != "/"); ) ++A;
      if (A += 2, t.charAt(A - 1) === "")
        return a("End of comment missing");
      var M = t.slice(2, A - 2);
      return n += 2, i(M), t = t.slice(A), n += 2, S({
        type: "comment",
        comment: M
      });
    }
  }
  function _() {
    var S = f(/^([^{]+)/);
    if (S)
      return Ge(S[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(A) {
        return A.replace(/,/g, "‌");
      }).split(/\s*(?![^(]*\)),\s*/).map(function(A) {
        return A.replace(/\u200C/g, ",");
      });
  }
  function T() {
    var S = s(), A = f(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (A) {
      if (A = Ge(A[0]), !f(/^:\s*/)) return a("property missing ':'");
      var M = f(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/), B = S({
        type: "declaration",
        property: A.replace(ns, ""),
        value: M ? Ge(M[0]).replace(ns, "") : ""
      });
      return f(/^[;\s]*/), B;
    }
  }
  function y() {
    var S = [];
    if (!l()) return a("missing '{'");
    m(S);
    for (var A; A = T(); )
      A !== !1 && (S.push(A), m(S));
    return h() ? S : a("missing '}'");
  }
  function d() {
    for (var S, A = [], M = s(); S = f(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); )
      A.push(S[1]), f(/^,\s*/);
    if (A.length)
      return M({
        type: "keyframe",
        values: A,
        declarations: y()
      });
  }
  function E() {
    var S = s(), M = f(/^@([-\w]+)?keyframes\s*/);
    if (M) {
      var A = M[1], M = f(/^([-\w]+)\s*/);
      if (!M) return a("@keyframes missing name");
      var B = M[1];
      if (!l()) return a("@keyframes missing '{'");
      for (var se, te = m(); se = d(); )
        te.push(se), te = te.concat(m());
      return h() ? S({
        type: "keyframes",
        name: B,
        vendor: A,
        keyframes: te
      }) : a("@keyframes missing '}'");
    }
  }
  function I() {
    var S = s(), A = f(/^@supports *([^{]+)/);
    if (A) {
      var M = Ge(A[1]);
      if (!l()) return a("@supports missing '{'");
      var B = m().concat(p());
      return h() ? S({
        type: "supports",
        supports: M,
        rules: B
      }) : a("@supports missing '}'");
    }
  }
  function R() {
    var S = s(), A = f(/^@host\s*/);
    if (A) {
      if (!l()) return a("@host missing '{'");
      var M = m().concat(p());
      return h() ? S({
        type: "host",
        rules: M
      }) : a("@host missing '}'");
    }
  }
  function D() {
    var S = s(), A = f(/^@media *([^{]+)/);
    if (A) {
      var M = Ge(A[1]);
      if (!l()) return a("@media missing '{'");
      var B = m().concat(p());
      return h() ? S({
        type: "media",
        media: M,
        rules: B
      }) : a("@media missing '}'");
    }
  }
  function Q() {
    var S = s(), A = f(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (A)
      return S({
        type: "custom-media",
        name: Ge(A[1]),
        media: Ge(A[2])
      });
  }
  function F() {
    var S = s(), A = f(/^@page */);
    if (A) {
      var M = _() || [];
      if (!l()) return a("@page missing '{'");
      for (var B = m(), se; se = T(); )
        B.push(se), B = B.concat(m());
      return h() ? S({
        type: "page",
        selectors: M,
        declarations: B
      }) : a("@page missing '}'");
    }
  }
  function L() {
    var S = s(), A = f(/^@([-\w]+)?document *([^{]+)/);
    if (A) {
      var M = Ge(A[1]), B = Ge(A[2]);
      if (!l()) return a("@document missing '{'");
      var se = m().concat(p());
      return h() ? S({
        type: "document",
        document: B,
        vendor: M,
        rules: se
      }) : a("@document missing '}'");
    }
  }
  function w() {
    var S = s(), A = f(/^@font-face\s*/);
    if (A) {
      if (!l()) return a("@font-face missing '{'");
      for (var M = m(), B; B = T(); )
        M.push(B), M = M.concat(m());
      return h() ? S({
        type: "font-face",
        declarations: M
      }) : a("@font-face missing '}'");
    }
  }
  var x = $("import"), N = $("charset"), O = $("namespace");
  function $(S) {
    var A = new RegExp("^@" + S + "\\s*([^;]+);");
    return function() {
      var M = s(), B = f(A);
      if (B) {
        var se = { type: S };
        return se[S] = B[1].trim(), M(se);
      }
    };
  }
  function U() {
    if (t[0] == "@")
      return E() || D() || Q() || I() || x() || N() || O() || L() || F() || R() || w();
  }
  function G() {
    var S = s(), A = _();
    return A ? (m(), S({
      type: "rule",
      selectors: A,
      declarations: y()
    })) : a("selector missing");
  }
  return Rn(u());
};
function Ge(t) {
  return t ? t.replace(/^\s+|\s+$/g, "") : "";
}
function Rn(t, e) {
  var r = t && typeof t.type == "string", n = r ? t : e;
  for (var i in t) {
    var s = t[i];
    Array.isArray(s) ? s.forEach(function(o) {
      Rn(o, n);
    }) : s && typeof s == "object" && Rn(s, n);
  }
  return r && Object.defineProperty(t, "parent", {
    configurable: !0,
    writable: !0,
    enumerable: !1,
    value: e || null
  }), t;
}
var Qo = Pr;
function Pr(t) {
  this.options = t || {};
}
Pr.prototype.emit = function(t) {
  return t;
};
Pr.prototype.visit = function(t) {
  return this[t.type](t);
};
Pr.prototype.mapVisit = function(t, e) {
  var r = "";
  e = e || "";
  for (var n = 0, i = t.length; n < i; n++)
    r += this.visit(t[n]), e && n < i - 1 && (r += this.emit(e));
  return r;
};
var On = { exports: {} };
typeof Object.create == "function" ? On.exports = function(e, r) {
  r && (e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  }));
} : On.exports = function(e, r) {
  if (r) {
    e.super_ = r;
    var n = function() {
    };
    n.prototype = r.prototype, e.prototype = new n(), e.prototype.constructor = e;
  }
};
var Jo = On.exports, Zo = Qo, lm = Jo, hm = re;
function re(t) {
  Zo.call(this, t);
}
lm(re, Zo);
re.prototype.compile = function(t) {
  return t.stylesheet.rules.map(this.visit, this).join("");
};
re.prototype.comment = function(t) {
  return this.emit("", t.position);
};
re.prototype.import = function(t) {
  return this.emit("@import " + t.import + ";", t.position);
};
re.prototype.media = function(t) {
  return this.emit("@media " + t.media, t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype.document = function(t) {
  var e = "@" + (t.vendor || "") + "document " + t.document;
  return this.emit(e, t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype.charset = function(t) {
  return this.emit("@charset " + t.charset + ";", t.position);
};
re.prototype.namespace = function(t) {
  return this.emit("@namespace " + t.namespace + ";", t.position);
};
re.prototype.supports = function(t) {
  return this.emit("@supports " + t.supports, t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype.keyframes = function(t) {
  return this.emit("@" + (t.vendor || "") + "keyframes " + t.name, t.position) + this.emit("{") + this.mapVisit(t.keyframes) + this.emit("}");
};
re.prototype.keyframe = function(t) {
  var e = t.declarations;
  return this.emit(t.values.join(","), t.position) + this.emit("{") + this.mapVisit(e) + this.emit("}");
};
re.prototype.page = function(t) {
  var e = t.selectors.length ? t.selectors.join(", ") : "";
  return this.emit("@page " + e, t.position) + this.emit("{") + this.mapVisit(t.declarations) + this.emit("}");
};
re.prototype["font-face"] = function(t) {
  return this.emit("@font-face", t.position) + this.emit("{") + this.mapVisit(t.declarations) + this.emit("}");
};
re.prototype.host = function(t) {
  return this.emit("@host", t.position) + this.emit("{") + this.mapVisit(t.rules) + this.emit("}");
};
re.prototype["custom-media"] = function(t) {
  return this.emit("@custom-media " + t.name + " " + t.media + ";", t.position);
};
re.prototype.rule = function(t) {
  var e = t.declarations;
  return e.length ? this.emit(t.selectors.join(","), t.position) + this.emit("{") + this.mapVisit(e) + this.emit("}") : "";
};
re.prototype.declaration = function(t) {
  return this.emit(t.property + ":" + t.value, t.position) + this.emit(";");
};
var ea = Qo, fm = Jo, pm = X;
function X(t) {
  t = t || {}, ea.call(this, t), this.indentation = t.indent;
}
fm(X, ea);
X.prototype.compile = function(t) {
  return this.stylesheet(t);
};
X.prototype.stylesheet = function(t) {
  return this.mapVisit(t.stylesheet.rules, `

`);
};
X.prototype.comment = function(t) {
  return this.emit(this.indent() + "/*" + t.comment + "*/", t.position);
};
X.prototype.import = function(t) {
  return this.emit("@import " + t.import + ";", t.position);
};
X.prototype.media = function(t) {
  return this.emit("@media " + t.media, t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype.document = function(t) {
  var e = "@" + (t.vendor || "") + "document " + t.document;
  return this.emit(e, t.position) + this.emit(
    `  {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype.charset = function(t) {
  return this.emit("@charset " + t.charset + ";", t.position);
};
X.prototype.namespace = function(t) {
  return this.emit("@namespace " + t.namespace + ";", t.position);
};
X.prototype.supports = function(t) {
  return this.emit("@supports " + t.supports, t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype.keyframes = function(t) {
  return this.emit("@" + (t.vendor || "") + "keyframes " + t.name, t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.keyframes, `
`) + this.emit(
    this.indent(-1) + "}"
  );
};
X.prototype.keyframe = function(t) {
  var e = t.declarations;
  return this.emit(this.indent()) + this.emit(t.values.join(", "), t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(e, `
`) + this.emit(
    this.indent(-1) + `
` + this.indent() + `}
`
  );
};
X.prototype.page = function(t) {
  var e = t.selectors.length ? t.selectors.join(", ") + " " : "";
  return this.emit("@page " + e, t.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(t.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
};
X.prototype["font-face"] = function(t) {
  return this.emit("@font-face ", t.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(t.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
};
X.prototype.host = function(t) {
  return this.emit("@host", t.position) + this.emit(
    ` {
` + this.indent(1)
  ) + this.mapVisit(t.rules, `

`) + this.emit(
    this.indent(-1) + `
}`
  );
};
X.prototype["custom-media"] = function(t) {
  return this.emit("@custom-media " + t.name + " " + t.media + ";", t.position);
};
X.prototype.rule = function(t) {
  var e = this.indent(), r = t.declarations;
  return r.length ? this.emit(t.selectors.map(function(n) {
    return e + n;
  }).join(`,
`), t.position) + this.emit(` {
`) + this.emit(this.indent(1)) + this.mapVisit(r, `
`) + this.emit(this.indent(-1)) + this.emit(`
` + this.indent() + "}") : "";
};
X.prototype.declaration = function(t) {
  return this.emit(this.indent()) + this.emit(t.property + ": " + t.value, t.position) + this.emit(";");
};
X.prototype.indent = function(t) {
  return this.level = this.level || 1, t != null ? (this.level += t, "") : Array(this.level).join(this.indentation || "  ");
};
var Ht = { exports: {} }, yt = {}, Vr = {}, zt = {}, Yt = {}, is;
function dm() {
  if (is) return Yt;
  is = 1;
  var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  return Yt.encode = function(e) {
    if (0 <= e && e < t.length)
      return t[e];
    throw new TypeError("Must be between 0 and 63: " + e);
  }, Yt.decode = function(e) {
    var r = 65, n = 90, i = 97, s = 122, o = 48, c = 57, a = 43, u = 47, l = 26, h = 52;
    return r <= e && e <= n ? e - r : i <= e && e <= s ? e - i + l : o <= e && e <= c ? e - o + h : e == a ? 62 : e == u ? 63 : -1;
  }, Yt;
}
var ss;
function ta() {
  if (ss) return zt;
  ss = 1;
  var t = dm(), e = 5, r = 1 << e, n = r - 1, i = r;
  function s(c) {
    return c < 0 ? (-c << 1) + 1 : (c << 1) + 0;
  }
  function o(c) {
    var a = (c & 1) === 1, u = c >> 1;
    return a ? -u : u;
  }
  return zt.encode = function(a) {
    var u = "", l, h = s(a);
    do
      l = h & n, h >>>= e, h > 0 && (l |= i), u += t.encode(l);
    while (h > 0);
    return u;
  }, zt.decode = function(a, u, l) {
    var h = a.length, p = 0, f = 0, g, m;
    do {
      if (u >= h)
        throw new Error("Expected more digits in base 64 VLQ value.");
      if (m = t.decode(a.charCodeAt(u++)), m === -1)
        throw new Error("Invalid base64 digit: " + a.charAt(u - 1));
      g = !!(m & i), m &= n, p = p + (m << f), f += e;
    } while (g);
    l.value = o(p), l.rest = u;
  }, zt;
}
var Wr = {}, os;
function jt() {
  return os || (os = 1, function(t) {
    function e(d, E, I) {
      if (E in d)
        return d[E];
      if (arguments.length === 3)
        return I;
      throw new Error('"' + E + '" is a required argument.');
    }
    t.getArg = e;
    var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, n = /^data:.+\,.+$/;
    function i(d) {
      var E = d.match(r);
      return E ? {
        scheme: E[1],
        auth: E[2],
        host: E[3],
        port: E[4],
        path: E[5]
      } : null;
    }
    t.urlParse = i;
    function s(d) {
      var E = "";
      return d.scheme && (E += d.scheme + ":"), E += "//", d.auth && (E += d.auth + "@"), d.host && (E += d.host), d.port && (E += ":" + d.port), d.path && (E += d.path), E;
    }
    t.urlGenerate = s;
    function o(d) {
      var E = d, I = i(d);
      if (I) {
        if (!I.path)
          return d;
        E = I.path;
      }
      for (var R = t.isAbsolute(E), D = E.split(/\/+/), Q, F = 0, L = D.length - 1; L >= 0; L--)
        Q = D[L], Q === "." ? D.splice(L, 1) : Q === ".." ? F++ : F > 0 && (Q === "" ? (D.splice(L + 1, F), F = 0) : (D.splice(L, 2), F--));
      return E = D.join("/"), E === "" && (E = R ? "/" : "."), I ? (I.path = E, s(I)) : E;
    }
    t.normalize = o;
    function c(d, E) {
      d === "" && (d = "."), E === "" && (E = ".");
      var I = i(E), R = i(d);
      if (R && (d = R.path || "/"), I && !I.scheme)
        return R && (I.scheme = R.scheme), s(I);
      if (I || E.match(n))
        return E;
      if (R && !R.host && !R.path)
        return R.host = E, s(R);
      var D = E.charAt(0) === "/" ? E : o(d.replace(/\/+$/, "") + "/" + E);
      return R ? (R.path = D, s(R)) : D;
    }
    t.join = c, t.isAbsolute = function(d) {
      return d.charAt(0) === "/" || r.test(d);
    };
    function a(d, E) {
      d === "" && (d = "."), d = d.replace(/\/$/, "");
      for (var I = 0; E.indexOf(d + "/") !== 0; ) {
        var R = d.lastIndexOf("/");
        if (R < 0 || (d = d.slice(0, R), d.match(/^([^\/]+:\/)?\/*$/)))
          return E;
        ++I;
      }
      return Array(I + 1).join("../") + E.substr(d.length + 1);
    }
    t.relative = a;
    var u = function() {
      var d = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in d);
    }();
    function l(d) {
      return d;
    }
    function h(d) {
      return f(d) ? "$" + d : d;
    }
    t.toSetString = u ? l : h;
    function p(d) {
      return f(d) ? d.slice(1) : d;
    }
    t.fromSetString = u ? l : p;
    function f(d) {
      if (!d)
        return !1;
      var E = d.length;
      if (E < 9 || d.charCodeAt(E - 1) !== 95 || d.charCodeAt(E - 2) !== 95 || d.charCodeAt(E - 3) !== 111 || d.charCodeAt(E - 4) !== 116 || d.charCodeAt(E - 5) !== 111 || d.charCodeAt(E - 6) !== 114 || d.charCodeAt(E - 7) !== 112 || d.charCodeAt(E - 8) !== 95 || d.charCodeAt(E - 9) !== 95)
        return !1;
      for (var I = E - 10; I >= 0; I--)
        if (d.charCodeAt(I) !== 36)
          return !1;
      return !0;
    }
    function g(d, E, I) {
      var R = v(d.source, E.source);
      return R !== 0 || (R = d.originalLine - E.originalLine, R !== 0) || (R = d.originalColumn - E.originalColumn, R !== 0 || I) || (R = d.generatedColumn - E.generatedColumn, R !== 0) || (R = d.generatedLine - E.generatedLine, R !== 0) ? R : v(d.name, E.name);
    }
    t.compareByOriginalPositions = g;
    function m(d, E, I) {
      var R = d.generatedLine - E.generatedLine;
      return R !== 0 || (R = d.generatedColumn - E.generatedColumn, R !== 0 || I) || (R = v(d.source, E.source), R !== 0) || (R = d.originalLine - E.originalLine, R !== 0) || (R = d.originalColumn - E.originalColumn, R !== 0) ? R : v(d.name, E.name);
    }
    t.compareByGeneratedPositionsDeflated = m;
    function v(d, E) {
      return d === E ? 0 : d === null ? 1 : E === null ? -1 : d > E ? 1 : -1;
    }
    function _(d, E) {
      var I = d.generatedLine - E.generatedLine;
      return I !== 0 || (I = d.generatedColumn - E.generatedColumn, I !== 0) || (I = v(d.source, E.source), I !== 0) || (I = d.originalLine - E.originalLine, I !== 0) || (I = d.originalColumn - E.originalColumn, I !== 0) ? I : v(d.name, E.name);
    }
    t.compareByGeneratedPositionsInflated = _;
    function T(d) {
      return JSON.parse(d.replace(/^\)]}'[^\n]*\n/, ""));
    }
    t.parseSourceMapInput = T;
    function y(d, E, I) {
      if (E = E || "", d && (d[d.length - 1] !== "/" && E[0] !== "/" && (d += "/"), E = d + E), I) {
        var R = i(I);
        if (!R)
          throw new Error("sourceMapURL could not be parsed");
        if (R.path) {
          var D = R.path.lastIndexOf("/");
          D >= 0 && (R.path = R.path.substring(0, D + 1));
        }
        E = c(s(R), E);
      }
      return o(E);
    }
    t.computeSourceURL = y;
  }(Wr)), Wr;
}
var Kr = {}, as;
function ra() {
  if (as) return Kr;
  as = 1;
  var t = jt(), e = Object.prototype.hasOwnProperty, r = typeof Map < "u";
  function n() {
    this._array = [], this._set = r ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
  }
  return n.fromArray = function(s, o) {
    for (var c = new n(), a = 0, u = s.length; a < u; a++)
      c.add(s[a], o);
    return c;
  }, n.prototype.size = function() {
    return r ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  }, n.prototype.add = function(s, o) {
    var c = r ? s : t.toSetString(s), a = r ? this.has(s) : e.call(this._set, c), u = this._array.length;
    (!a || o) && this._array.push(s), a || (r ? this._set.set(s, u) : this._set[c] = u);
  }, n.prototype.has = function(s) {
    if (r)
      return this._set.has(s);
    var o = t.toSetString(s);
    return e.call(this._set, o);
  }, n.prototype.indexOf = function(s) {
    if (r) {
      var o = this._set.get(s);
      if (o >= 0)
        return o;
    } else {
      var c = t.toSetString(s);
      if (e.call(this._set, c))
        return this._set[c];
    }
    throw new Error('"' + s + '" is not in the set.');
  }, n.prototype.at = function(s) {
    if (s >= 0 && s < this._array.length)
      return this._array[s];
    throw new Error("No element indexed by " + s);
  }, n.prototype.toArray = function() {
    return this._array.slice();
  }, Kr.ArraySet = n, Kr;
}
var Hr = {}, cs;
function mm() {
  if (cs) return Hr;
  cs = 1;
  var t = jt();
  function e(n, i) {
    var s = n.generatedLine, o = i.generatedLine, c = n.generatedColumn, a = i.generatedColumn;
    return o > s || o == s && a >= c || t.compareByGeneratedPositionsInflated(n, i) <= 0;
  }
  function r() {
    this._array = [], this._sorted = !0, this._last = { generatedLine: -1, generatedColumn: 0 };
  }
  return r.prototype.unsortedForEach = function(i, s) {
    this._array.forEach(i, s);
  }, r.prototype.add = function(i) {
    e(this._last, i) ? (this._last = i, this._array.push(i)) : (this._sorted = !1, this._array.push(i));
  }, r.prototype.toArray = function() {
    return this._sorted || (this._array.sort(t.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
  }, Hr.MappingList = r, Hr;
}
var us;
function na() {
  if (us) return Vr;
  us = 1;
  var t = ta(), e = jt(), r = ra().ArraySet, n = mm().MappingList;
  function i(s) {
    s || (s = {}), this._file = e.getArg(s, "file", null), this._sourceRoot = e.getArg(s, "sourceRoot", null), this._skipValidation = e.getArg(s, "skipValidation", !1), this._sources = new r(), this._names = new r(), this._mappings = new n(), this._sourcesContents = null;
  }
  return i.prototype._version = 3, i.fromSourceMap = function(o) {
    var c = o.sourceRoot, a = new i({
      file: o.file,
      sourceRoot: c
    });
    return o.eachMapping(function(u) {
      var l = {
        generated: {
          line: u.generatedLine,
          column: u.generatedColumn
        }
      };
      u.source != null && (l.source = u.source, c != null && (l.source = e.relative(c, l.source)), l.original = {
        line: u.originalLine,
        column: u.originalColumn
      }, u.name != null && (l.name = u.name)), a.addMapping(l);
    }), o.sources.forEach(function(u) {
      var l = u;
      c !== null && (l = e.relative(c, u)), a._sources.has(l) || a._sources.add(l);
      var h = o.sourceContentFor(u);
      h != null && a.setSourceContent(u, h);
    }), a;
  }, i.prototype.addMapping = function(o) {
    var c = e.getArg(o, "generated"), a = e.getArg(o, "original", null), u = e.getArg(o, "source", null), l = e.getArg(o, "name", null);
    this._skipValidation || this._validateMapping(c, a, u, l), u != null && (u = String(u), this._sources.has(u) || this._sources.add(u)), l != null && (l = String(l), this._names.has(l) || this._names.add(l)), this._mappings.add({
      generatedLine: c.line,
      generatedColumn: c.column,
      originalLine: a != null && a.line,
      originalColumn: a != null && a.column,
      source: u,
      name: l
    });
  }, i.prototype.setSourceContent = function(o, c) {
    var a = o;
    this._sourceRoot != null && (a = e.relative(this._sourceRoot, a)), c != null ? (this._sourcesContents || (this._sourcesContents = /* @__PURE__ */ Object.create(null)), this._sourcesContents[e.toSetString(a)] = c) : this._sourcesContents && (delete this._sourcesContents[e.toSetString(a)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
  }, i.prototype.applySourceMap = function(o, c, a) {
    var u = c;
    if (c == null) {
      if (o.file == null)
        throw new Error(
          `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
        );
      u = o.file;
    }
    var l = this._sourceRoot;
    l != null && (u = e.relative(l, u));
    var h = new r(), p = new r();
    this._mappings.unsortedForEach(function(f) {
      if (f.source === u && f.originalLine != null) {
        var g = o.originalPositionFor({
          line: f.originalLine,
          column: f.originalColumn
        });
        g.source != null && (f.source = g.source, a != null && (f.source = e.join(a, f.source)), l != null && (f.source = e.relative(l, f.source)), f.originalLine = g.line, f.originalColumn = g.column, g.name != null && (f.name = g.name));
      }
      var m = f.source;
      m != null && !h.has(m) && h.add(m);
      var v = f.name;
      v != null && !p.has(v) && p.add(v);
    }, this), this._sources = h, this._names = p, o.sources.forEach(function(f) {
      var g = o.sourceContentFor(f);
      g != null && (a != null && (f = e.join(a, f)), l != null && (f = e.relative(l, f)), this.setSourceContent(f, g));
    }, this);
  }, i.prototype._validateMapping = function(o, c, a, u) {
    if (c && typeof c.line != "number" && typeof c.column != "number")
      throw new Error(
        "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
      );
    if (!(o && "line" in o && "column" in o && o.line > 0 && o.column >= 0 && !c && !a && !u)) {
      if (o && "line" in o && "column" in o && c && "line" in c && "column" in c && o.line > 0 && o.column >= 0 && c.line > 0 && c.column >= 0 && a)
        return;
      throw new Error("Invalid mapping: " + JSON.stringify({
        generated: o,
        source: a,
        original: c,
        name: u
      }));
    }
  }, i.prototype._serializeMappings = function() {
    for (var o = 0, c = 1, a = 0, u = 0, l = 0, h = 0, p = "", f, g, m, v, _ = this._mappings.toArray(), T = 0, y = _.length; T < y; T++) {
      if (g = _[T], f = "", g.generatedLine !== c)
        for (o = 0; g.generatedLine !== c; )
          f += ";", c++;
      else if (T > 0) {
        if (!e.compareByGeneratedPositionsInflated(g, _[T - 1]))
          continue;
        f += ",";
      }
      f += t.encode(g.generatedColumn - o), o = g.generatedColumn, g.source != null && (v = this._sources.indexOf(g.source), f += t.encode(v - h), h = v, f += t.encode(g.originalLine - 1 - u), u = g.originalLine - 1, f += t.encode(g.originalColumn - a), a = g.originalColumn, g.name != null && (m = this._names.indexOf(g.name), f += t.encode(m - l), l = m)), p += f;
    }
    return p;
  }, i.prototype._generateSourcesContent = function(o, c) {
    return o.map(function(a) {
      if (!this._sourcesContents)
        return null;
      c != null && (a = e.relative(c, a));
      var u = e.toSetString(a);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, u) ? this._sourcesContents[u] : null;
    }, this);
  }, i.prototype.toJSON = function() {
    var o = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    return this._file != null && (o.file = this._file), this._sourceRoot != null && (o.sourceRoot = this._sourceRoot), this._sourcesContents && (o.sourcesContent = this._generateSourcesContent(o.sources, o.sourceRoot)), o;
  }, i.prototype.toString = function() {
    return JSON.stringify(this.toJSON());
  }, Vr.SourceMapGenerator = i, Vr;
}
var _t = {}, zr = {}, ls;
function gm() {
  return ls || (ls = 1, function(t) {
    t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2;
    function e(r, n, i, s, o, c) {
      var a = Math.floor((n - r) / 2) + r, u = o(i, s[a], !0);
      return u === 0 ? a : u > 0 ? n - a > 1 ? e(a, n, i, s, o, c) : c == t.LEAST_UPPER_BOUND ? n < s.length ? n : -1 : a : a - r > 1 ? e(r, a, i, s, o, c) : c == t.LEAST_UPPER_BOUND ? a : r < 0 ? -1 : r;
    }
    t.search = function(n, i, s, o) {
      if (i.length === 0)
        return -1;
      var c = e(
        -1,
        i.length,
        n,
        i,
        s,
        o || t.GREATEST_LOWER_BOUND
      );
      if (c < 0)
        return -1;
      for (; c - 1 >= 0 && s(i[c], i[c - 1], !0) === 0; )
        --c;
      return c;
    };
  }(zr)), zr;
}
var Yr = {}, hs;
function vm() {
  if (hs) return Yr;
  hs = 1;
  function t(n, i, s) {
    var o = n[i];
    n[i] = n[s], n[s] = o;
  }
  function e(n, i) {
    return Math.round(n + Math.random() * (i - n));
  }
  function r(n, i, s, o) {
    if (s < o) {
      var c = e(s, o), a = s - 1;
      t(n, c, o);
      for (var u = n[o], l = s; l < o; l++)
        i(n[l], u) <= 0 && (a += 1, t(n, a, l));
      t(n, a + 1, l);
      var h = a + 1;
      r(n, i, s, h - 1), r(n, i, h + 1, o);
    }
  }
  return Yr.quickSort = function(n, i) {
    r(n, i, 0, n.length - 1);
  }, Yr;
}
var fs;
function Em() {
  if (fs) return _t;
  fs = 1;
  var t = jt(), e = gm(), r = ra().ArraySet, n = ta(), i = vm().quickSort;
  function s(u, l) {
    var h = u;
    return typeof u == "string" && (h = t.parseSourceMapInput(u)), h.sections != null ? new a(h, l) : new o(h, l);
  }
  s.fromSourceMap = function(u, l) {
    return o.fromSourceMap(u, l);
  }, s.prototype._version = 3, s.prototype.__generatedMappings = null, Object.defineProperty(s.prototype, "_generatedMappings", {
    configurable: !0,
    enumerable: !0,
    get: function() {
      return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
    }
  }), s.prototype.__originalMappings = null, Object.defineProperty(s.prototype, "_originalMappings", {
    configurable: !0,
    enumerable: !0,
    get: function() {
      return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
    }
  }), s.prototype._charIsMappingSeparator = function(l, h) {
    var p = l.charAt(h);
    return p === ";" || p === ",";
  }, s.prototype._parseMappings = function(l, h) {
    throw new Error("Subclasses must implement _parseMappings");
  }, s.GENERATED_ORDER = 1, s.ORIGINAL_ORDER = 2, s.GREATEST_LOWER_BOUND = 1, s.LEAST_UPPER_BOUND = 2, s.prototype.eachMapping = function(l, h, p) {
    var f = h || null, g = p || s.GENERATED_ORDER, m;
    switch (g) {
      case s.GENERATED_ORDER:
        m = this._generatedMappings;
        break;
      case s.ORIGINAL_ORDER:
        m = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
    }
    var v = this.sourceRoot;
    m.map(function(_) {
      var T = _.source === null ? null : this._sources.at(_.source);
      return T = t.computeSourceURL(v, T, this._sourceMapURL), {
        source: T,
        generatedLine: _.generatedLine,
        generatedColumn: _.generatedColumn,
        originalLine: _.originalLine,
        originalColumn: _.originalColumn,
        name: _.name === null ? null : this._names.at(_.name)
      };
    }, this).forEach(l, f);
  }, s.prototype.allGeneratedPositionsFor = function(l) {
    var h = t.getArg(l, "line"), p = {
      source: t.getArg(l, "source"),
      originalLine: h,
      originalColumn: t.getArg(l, "column", 0)
    };
    if (p.source = this._findSourceIndex(p.source), p.source < 0)
      return [];
    var f = [], g = this._findMapping(
      p,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      t.compareByOriginalPositions,
      e.LEAST_UPPER_BOUND
    );
    if (g >= 0) {
      var m = this._originalMappings[g];
      if (l.column === void 0)
        for (var v = m.originalLine; m && m.originalLine === v; )
          f.push({
            line: t.getArg(m, "generatedLine", null),
            column: t.getArg(m, "generatedColumn", null),
            lastColumn: t.getArg(m, "lastGeneratedColumn", null)
          }), m = this._originalMappings[++g];
      else
        for (var _ = m.originalColumn; m && m.originalLine === h && m.originalColumn == _; )
          f.push({
            line: t.getArg(m, "generatedLine", null),
            column: t.getArg(m, "generatedColumn", null),
            lastColumn: t.getArg(m, "lastGeneratedColumn", null)
          }), m = this._originalMappings[++g];
    }
    return f;
  }, _t.SourceMapConsumer = s;
  function o(u, l) {
    var h = u;
    typeof u == "string" && (h = t.parseSourceMapInput(u));
    var p = t.getArg(h, "version"), f = t.getArg(h, "sources"), g = t.getArg(h, "names", []), m = t.getArg(h, "sourceRoot", null), v = t.getArg(h, "sourcesContent", null), _ = t.getArg(h, "mappings"), T = t.getArg(h, "file", null);
    if (p != this._version)
      throw new Error("Unsupported version: " + p);
    m && (m = t.normalize(m)), f = f.map(String).map(t.normalize).map(function(y) {
      return m && t.isAbsolute(m) && t.isAbsolute(y) ? t.relative(m, y) : y;
    }), this._names = r.fromArray(g.map(String), !0), this._sources = r.fromArray(f, !0), this._absoluteSources = this._sources.toArray().map(function(y) {
      return t.computeSourceURL(m, y, l);
    }), this.sourceRoot = m, this.sourcesContent = v, this._mappings = _, this._sourceMapURL = l, this.file = T;
  }
  o.prototype = Object.create(s.prototype), o.prototype.consumer = s, o.prototype._findSourceIndex = function(u) {
    var l = u;
    if (this.sourceRoot != null && (l = t.relative(this.sourceRoot, l)), this._sources.has(l))
      return this._sources.indexOf(l);
    var h;
    for (h = 0; h < this._absoluteSources.length; ++h)
      if (this._absoluteSources[h] == u)
        return h;
    return -1;
  }, o.fromSourceMap = function(l, h) {
    var p = Object.create(o.prototype), f = p._names = r.fromArray(l._names.toArray(), !0), g = p._sources = r.fromArray(l._sources.toArray(), !0);
    p.sourceRoot = l._sourceRoot, p.sourcesContent = l._generateSourcesContent(
      p._sources.toArray(),
      p.sourceRoot
    ), p.file = l._file, p._sourceMapURL = h, p._absoluteSources = p._sources.toArray().map(function(I) {
      return t.computeSourceURL(p.sourceRoot, I, h);
    });
    for (var m = l._mappings.toArray().slice(), v = p.__generatedMappings = [], _ = p.__originalMappings = [], T = 0, y = m.length; T < y; T++) {
      var d = m[T], E = new c();
      E.generatedLine = d.generatedLine, E.generatedColumn = d.generatedColumn, d.source && (E.source = g.indexOf(d.source), E.originalLine = d.originalLine, E.originalColumn = d.originalColumn, d.name && (E.name = f.indexOf(d.name)), _.push(E)), v.push(E);
    }
    return i(p.__originalMappings, t.compareByOriginalPositions), p;
  }, o.prototype._version = 3, Object.defineProperty(o.prototype, "sources", {
    get: function() {
      return this._absoluteSources.slice();
    }
  });
  function c() {
    this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
  }
  o.prototype._parseMappings = function(l, h) {
    for (var p = 1, f = 0, g = 0, m = 0, v = 0, _ = 0, T = l.length, y = 0, d = {}, E = {}, I = [], R = [], D, Q, F, L, w; y < T; )
      if (l.charAt(y) === ";")
        p++, y++, f = 0;
      else if (l.charAt(y) === ",")
        y++;
      else {
        for (D = new c(), D.generatedLine = p, L = y; L < T && !this._charIsMappingSeparator(l, L); L++)
          ;
        if (Q = l.slice(y, L), F = d[Q], F)
          y += Q.length;
        else {
          for (F = []; y < L; )
            n.decode(l, y, E), w = E.value, y = E.rest, F.push(w);
          if (F.length === 2)
            throw new Error("Found a source, but no line and column");
          if (F.length === 3)
            throw new Error("Found a source and line, but no column");
          d[Q] = F;
        }
        D.generatedColumn = f + F[0], f = D.generatedColumn, F.length > 1 && (D.source = v + F[1], v += F[1], D.originalLine = g + F[2], g = D.originalLine, D.originalLine += 1, D.originalColumn = m + F[3], m = D.originalColumn, F.length > 4 && (D.name = _ + F[4], _ += F[4])), R.push(D), typeof D.originalLine == "number" && I.push(D);
      }
    i(R, t.compareByGeneratedPositionsDeflated), this.__generatedMappings = R, i(I, t.compareByOriginalPositions), this.__originalMappings = I;
  }, o.prototype._findMapping = function(l, h, p, f, g, m) {
    if (l[p] <= 0)
      throw new TypeError("Line must be greater than or equal to 1, got " + l[p]);
    if (l[f] < 0)
      throw new TypeError("Column must be greater than or equal to 0, got " + l[f]);
    return e.search(l, h, g, m);
  }, o.prototype.computeColumnSpans = function() {
    for (var l = 0; l < this._generatedMappings.length; ++l) {
      var h = this._generatedMappings[l];
      if (l + 1 < this._generatedMappings.length) {
        var p = this._generatedMappings[l + 1];
        if (h.generatedLine === p.generatedLine) {
          h.lastGeneratedColumn = p.generatedColumn - 1;
          continue;
        }
      }
      h.lastGeneratedColumn = 1 / 0;
    }
  }, o.prototype.originalPositionFor = function(l) {
    var h = {
      generatedLine: t.getArg(l, "line"),
      generatedColumn: t.getArg(l, "column")
    }, p = this._findMapping(
      h,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      t.compareByGeneratedPositionsDeflated,
      t.getArg(l, "bias", s.GREATEST_LOWER_BOUND)
    );
    if (p >= 0) {
      var f = this._generatedMappings[p];
      if (f.generatedLine === h.generatedLine) {
        var g = t.getArg(f, "source", null);
        g !== null && (g = this._sources.at(g), g = t.computeSourceURL(this.sourceRoot, g, this._sourceMapURL));
        var m = t.getArg(f, "name", null);
        return m !== null && (m = this._names.at(m)), {
          source: g,
          line: t.getArg(f, "originalLine", null),
          column: t.getArg(f, "originalColumn", null),
          name: m
        };
      }
    }
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }, o.prototype.hasContentsOfAllSources = function() {
    return this.sourcesContent ? this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(l) {
      return l == null;
    }) : !1;
  }, o.prototype.sourceContentFor = function(l, h) {
    if (!this.sourcesContent)
      return null;
    var p = this._findSourceIndex(l);
    if (p >= 0)
      return this.sourcesContent[p];
    var f = l;
    this.sourceRoot != null && (f = t.relative(this.sourceRoot, f));
    var g;
    if (this.sourceRoot != null && (g = t.urlParse(this.sourceRoot))) {
      var m = f.replace(/^file:\/\//, "");
      if (g.scheme == "file" && this._sources.has(m))
        return this.sourcesContent[this._sources.indexOf(m)];
      if ((!g.path || g.path == "/") && this._sources.has("/" + f))
        return this.sourcesContent[this._sources.indexOf("/" + f)];
    }
    if (h)
      return null;
    throw new Error('"' + f + '" is not in the SourceMap.');
  }, o.prototype.generatedPositionFor = function(l) {
    var h = t.getArg(l, "source");
    if (h = this._findSourceIndex(h), h < 0)
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    var p = {
      source: h,
      originalLine: t.getArg(l, "line"),
      originalColumn: t.getArg(l, "column")
    }, f = this._findMapping(
      p,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      t.compareByOriginalPositions,
      t.getArg(l, "bias", s.GREATEST_LOWER_BOUND)
    );
    if (f >= 0) {
      var g = this._originalMappings[f];
      if (g.source === p.source)
        return {
          line: t.getArg(g, "generatedLine", null),
          column: t.getArg(g, "generatedColumn", null),
          lastColumn: t.getArg(g, "lastGeneratedColumn", null)
        };
    }
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  }, _t.BasicSourceMapConsumer = o;
  function a(u, l) {
    var h = u;
    typeof u == "string" && (h = t.parseSourceMapInput(u));
    var p = t.getArg(h, "version"), f = t.getArg(h, "sections");
    if (p != this._version)
      throw new Error("Unsupported version: " + p);
    this._sources = new r(), this._names = new r();
    var g = {
      line: -1,
      column: 0
    };
    this._sections = f.map(function(m) {
      if (m.url)
        throw new Error("Support for url field in sections not implemented.");
      var v = t.getArg(m, "offset"), _ = t.getArg(v, "line"), T = t.getArg(v, "column");
      if (_ < g.line || _ === g.line && T < g.column)
        throw new Error("Section offsets must be ordered and non-overlapping.");
      return g = v, {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: _ + 1,
          generatedColumn: T + 1
        },
        consumer: new s(t.getArg(m, "map"), l)
      };
    });
  }
  return a.prototype = Object.create(s.prototype), a.prototype.constructor = s, a.prototype._version = 3, Object.defineProperty(a.prototype, "sources", {
    get: function() {
      for (var u = [], l = 0; l < this._sections.length; l++)
        for (var h = 0; h < this._sections[l].consumer.sources.length; h++)
          u.push(this._sections[l].consumer.sources[h]);
      return u;
    }
  }), a.prototype.originalPositionFor = function(l) {
    var h = {
      generatedLine: t.getArg(l, "line"),
      generatedColumn: t.getArg(l, "column")
    }, p = e.search(
      h,
      this._sections,
      function(g, m) {
        var v = g.generatedLine - m.generatedOffset.generatedLine;
        return v || g.generatedColumn - m.generatedOffset.generatedColumn;
      }
    ), f = this._sections[p];
    return f ? f.consumer.originalPositionFor({
      line: h.generatedLine - (f.generatedOffset.generatedLine - 1),
      column: h.generatedColumn - (f.generatedOffset.generatedLine === h.generatedLine ? f.generatedOffset.generatedColumn - 1 : 0),
      bias: l.bias
    }) : {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }, a.prototype.hasContentsOfAllSources = function() {
    return this._sections.every(function(l) {
      return l.consumer.hasContentsOfAllSources();
    });
  }, a.prototype.sourceContentFor = function(l, h) {
    for (var p = 0; p < this._sections.length; p++) {
      var f = this._sections[p], g = f.consumer.sourceContentFor(l, !0);
      if (g)
        return g;
    }
    if (h)
      return null;
    throw new Error('"' + l + '" is not in the SourceMap.');
  }, a.prototype.generatedPositionFor = function(l) {
    for (var h = 0; h < this._sections.length; h++) {
      var p = this._sections[h];
      if (p.consumer._findSourceIndex(t.getArg(l, "source")) !== -1) {
        var f = p.consumer.generatedPositionFor(l);
        if (f) {
          var g = {
            line: f.line + (p.generatedOffset.generatedLine - 1),
            column: f.column + (p.generatedOffset.generatedLine === f.line ? p.generatedOffset.generatedColumn - 1 : 0)
          };
          return g;
        }
      }
    }
    return {
      line: null,
      column: null
    };
  }, a.prototype._parseMappings = function(l, h) {
    this.__generatedMappings = [], this.__originalMappings = [];
    for (var p = 0; p < this._sections.length; p++)
      for (var f = this._sections[p], g = f.consumer._generatedMappings, m = 0; m < g.length; m++) {
        var v = g[m], _ = f.consumer._sources.at(v.source);
        _ = t.computeSourceURL(f.consumer.sourceRoot, _, this._sourceMapURL), this._sources.add(_), _ = this._sources.indexOf(_);
        var T = null;
        v.name && (T = f.consumer._names.at(v.name), this._names.add(T), T = this._names.indexOf(T));
        var y = {
          source: _,
          generatedLine: v.generatedLine + (f.generatedOffset.generatedLine - 1),
          generatedColumn: v.generatedColumn + (f.generatedOffset.generatedLine === v.generatedLine ? f.generatedOffset.generatedColumn - 1 : 0),
          originalLine: v.originalLine,
          originalColumn: v.originalColumn,
          name: T
        };
        this.__generatedMappings.push(y), typeof y.originalLine == "number" && this.__originalMappings.push(y);
      }
    i(this.__generatedMappings, t.compareByGeneratedPositionsDeflated), i(this.__originalMappings, t.compareByOriginalPositions);
  }, _t.IndexedSourceMapConsumer = a, _t;
}
var qr = {}, ps;
function Tm() {
  if (ps) return qr;
  ps = 1;
  var t = na().SourceMapGenerator, e = jt(), r = /(\r?\n)/, n = 10, i = "$$$isSourceNode$$$";
  function s(o, c, a, u, l) {
    this.children = [], this.sourceContents = {}, this.line = o ?? null, this.column = c ?? null, this.source = a ?? null, this.name = l ?? null, this[i] = !0, u != null && this.add(u);
  }
  return s.fromStringWithSourceMap = function(c, a, u) {
    var l = new s(), h = c.split(r), p = 0, f = function() {
      var T = d(), y = d() || "";
      return T + y;
      function d() {
        return p < h.length ? h[p++] : void 0;
      }
    }, g = 1, m = 0, v = null;
    return a.eachMapping(function(T) {
      if (v !== null)
        if (g < T.generatedLine)
          _(v, f()), g++, m = 0;
        else {
          var y = h[p] || "", d = y.substr(0, T.generatedColumn - m);
          h[p] = y.substr(T.generatedColumn - m), m = T.generatedColumn, _(v, d), v = T;
          return;
        }
      for (; g < T.generatedLine; )
        l.add(f()), g++;
      if (m < T.generatedColumn) {
        var y = h[p] || "";
        l.add(y.substr(0, T.generatedColumn)), h[p] = y.substr(T.generatedColumn), m = T.generatedColumn;
      }
      v = T;
    }, this), p < h.length && (v && _(v, f()), l.add(h.splice(p).join(""))), a.sources.forEach(function(T) {
      var y = a.sourceContentFor(T);
      y != null && (u != null && (T = e.join(u, T)), l.setSourceContent(T, y));
    }), l;
    function _(T, y) {
      if (T === null || T.source === void 0)
        l.add(y);
      else {
        var d = u ? e.join(u, T.source) : T.source;
        l.add(new s(
          T.originalLine,
          T.originalColumn,
          d,
          y,
          T.name
        ));
      }
    }
  }, s.prototype.add = function(c) {
    if (Array.isArray(c))
      c.forEach(function(a) {
        this.add(a);
      }, this);
    else if (c[i] || typeof c == "string")
      c && this.children.push(c);
    else
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + c
      );
    return this;
  }, s.prototype.prepend = function(c) {
    if (Array.isArray(c))
      for (var a = c.length - 1; a >= 0; a--)
        this.prepend(c[a]);
    else if (c[i] || typeof c == "string")
      this.children.unshift(c);
    else
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + c
      );
    return this;
  }, s.prototype.walk = function(c) {
    for (var a, u = 0, l = this.children.length; u < l; u++)
      a = this.children[u], a[i] ? a.walk(c) : a !== "" && c(a, {
        source: this.source,
        line: this.line,
        column: this.column,
        name: this.name
      });
  }, s.prototype.join = function(c) {
    var a, u, l = this.children.length;
    if (l > 0) {
      for (a = [], u = 0; u < l - 1; u++)
        a.push(this.children[u]), a.push(c);
      a.push(this.children[u]), this.children = a;
    }
    return this;
  }, s.prototype.replaceRight = function(c, a) {
    var u = this.children[this.children.length - 1];
    return u[i] ? u.replaceRight(c, a) : typeof u == "string" ? this.children[this.children.length - 1] = u.replace(c, a) : this.children.push("".replace(c, a)), this;
  }, s.prototype.setSourceContent = function(c, a) {
    this.sourceContents[e.toSetString(c)] = a;
  }, s.prototype.walkSourceContents = function(c) {
    for (var a = 0, u = this.children.length; a < u; a++)
      this.children[a][i] && this.children[a].walkSourceContents(c);
    for (var l = Object.keys(this.sourceContents), a = 0, u = l.length; a < u; a++)
      c(e.fromSetString(l[a]), this.sourceContents[l[a]]);
  }, s.prototype.toString = function() {
    var c = "";
    return this.walk(function(a) {
      c += a;
    }), c;
  }, s.prototype.toStringWithSourceMap = function(c) {
    var a = {
      code: "",
      line: 1,
      column: 0
    }, u = new t(c), l = !1, h = null, p = null, f = null, g = null;
    return this.walk(function(m, v) {
      a.code += m, v.source !== null && v.line !== null && v.column !== null ? ((h !== v.source || p !== v.line || f !== v.column || g !== v.name) && u.addMapping({
        source: v.source,
        original: {
          line: v.line,
          column: v.column
        },
        generated: {
          line: a.line,
          column: a.column
        },
        name: v.name
      }), h = v.source, p = v.line, f = v.column, g = v.name, l = !0) : l && (u.addMapping({
        generated: {
          line: a.line,
          column: a.column
        }
      }), h = null, l = !1);
      for (var _ = 0, T = m.length; _ < T; _++)
        m.charCodeAt(_) === n ? (a.line++, a.column = 0, _ + 1 === T ? (h = null, l = !1) : l && u.addMapping({
          source: v.source,
          original: {
            line: v.line,
            column: v.column
          },
          generated: {
            line: a.line,
            column: a.column
          },
          name: v.name
        })) : a.column++;
    }), this.walkSourceContents(function(m, v) {
      u.setSourceContent(m, v);
    }), { code: a.code, map: u };
  }, qr.SourceNode = s, qr;
}
var ds;
function ms() {
  return ds || (ds = 1, yt.SourceMapGenerator = na().SourceMapGenerator, yt.SourceMapConsumer = Em().SourceMapConsumer, yt.SourceNode = Tm().SourceNode), yt;
}
var Xr = { exports: {} }, gs;
function ym() {
  return gs || (gs = 1, function(t) {
    (function(e) {
      function r(i) {
        return typeof i == "function" ? i : typeof Buffer == "function" ? function(o) {
          //!! Deliberately using an API that's deprecated in node.js because
          //!! this file is for browsers and we expect them to cope with it.
          //!! Discussion: github.com/node-browser-compat/atob/pull/9
          return new Buffer(o, "base64").toString("binary");
        } : typeof e.base64js == "object" ? function(o) {
          var c = e.base64js.b64ToByteArray(o);
          return Array.prototype.map.call(c, function(a) {
            return String.fromCharCode(a);
          }).join("");
        } : function() {
          throw new Error("You're probably in an old browser or an iOS webworker. It might help to include beatgammit's base64-js.");
        };
      }
      var n = r(e.atob);
      e.atob = n, t && t.exports && (t.exports = n);
    })(window);
  }(Xr)), Xr.exports;
}
const _m = {}, Am = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: _m
}, Symbol.toStringTag, { value: "Module" })), mr = /* @__PURE__ */ cm(Am);
var Qr, vs;
function Sm() {
  if (vs) return Qr;
  vs = 1;
  var t = "%[a-f0-9]{2}", e = new RegExp("(" + t + ")|([^%]+?)", "gi"), r = new RegExp("(" + t + ")+", "gi");
  function n(o, c) {
    try {
      return [decodeURIComponent(o.join(""))];
    } catch {
    }
    if (o.length === 1)
      return o;
    c = c || 1;
    var a = o.slice(0, c), u = o.slice(c);
    return Array.prototype.concat.call([], n(a), n(u));
  }
  function i(o) {
    try {
      return decodeURIComponent(o);
    } catch {
      for (var c = o.match(e) || [], a = 1; a < c.length; a++)
        o = n(c, a).join(""), c = o.match(e) || [];
      return o;
    }
  }
  function s(o) {
    for (var c = {
      "%FE%FF": "��",
      "%FF%FE": "��"
    }, a = r.exec(o); a; ) {
      try {
        c[a[0]] = decodeURIComponent(a[0]);
      } catch {
        var u = i(a[0]);
        u !== a[0] && (c[a[0]] = u);
      }
      a = r.exec(o);
    }
    c["%C2"] = "�";
    for (var l = Object.keys(c), h = 0; h < l.length; h++) {
      var p = l[h];
      o = o.replace(new RegExp(p, "g"), c[p]);
    }
    return o;
  }
  return Qr = function(o) {
    if (typeof o != "string")
      throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof o + "`");
    try {
      return o = o.replace(/\+/g, " "), decodeURIComponent(o);
    } catch {
      return s(o);
    }
  }, Qr;
}
var Jr, Es;
function Rm() {
  if (Es) return Jr;
  Es = 1;
  var t = ym(), e = mr, r = mr, n = Sm();
  function i() {
    return Array.prototype.reduce.call(arguments, function(L, w) {
      return e.resolve(L, w);
    });
  }
  function s(L) {
    return r.sep === "\\" ? L.replace(/\\/g, "/").replace(/^[a-z]:\/?/i, "/") : L;
  }
  function o(L) {
    return n(L.replace(/\+/g, "%2B"));
  }
  function c(L, w, x) {
    setImmediate(function() {
      L(w, x);
    });
  }
  function a(L, w) {
    try {
      return JSON.parse(L.replace(/^\)\]\}'/, ""));
    } catch (x) {
      throw x.sourceMapData = w, x;
    }
  }
  function u(L, w, x) {
    var N = o(w);
    try {
      return String(L(N));
    } catch (O) {
      throw O.sourceMapData = x, O;
    }
  }
  var l = /[#@] sourceMappingURL=([^\s'"]*)/, h = RegExp(
    `(?:/\\*(?:\\s*\r?
(?://)?)?(?:` + l.source + ")\\s*\\*/|//(?:" + l.source + "))\\s*"
  );
  function p(L) {
    var w = L.match(h);
    return w ? w[1] || w[2] || "" : null;
  }
  function f(L, w, x, N) {
    var O;
    try {
      O = d(L, w);
    } catch (U) {
      return c(N, U);
    }
    if (!O || O.map)
      return c(N, null, O);
    var $ = o(O.url);
    x($, function(U, G) {
      if (U)
        return U.sourceMapData = O, N(U);
      O.map = String(G);
      try {
        O.map = a(O.map, O);
      } catch (S) {
        return N(S);
      }
      N(null, O);
    });
  }
  function g(L, w, x) {
    var N = d(L, w);
    return !N || N.map || (N.map = u(x, N.url, N), N.map = a(N.map, N)), N;
  }
  var m = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/, v = /^(?:application|text)\/json$/, _ = "utf-8";
  function T(L) {
    for (var w = t(L), x = w.length, N = new Uint8Array(x), O = 0; O < x; O++)
      N[O] = w.charCodeAt(O);
    return N;
  }
  function y(L) {
    if (typeof TextDecoder > "u" || typeof Uint8Array > "u")
      return t(L);
    var w = T(L), x = new TextDecoder(_, { fatal: !0 });
    return x.decode(w);
  }
  function d(L, w) {
    w = s(w);
    var x = p(L);
    if (!x)
      return null;
    var N = x.match(m);
    if (N) {
      var O = N[1] || "text/plain", $ = N[2] || "", U = N[3] || "", G = {
        sourceMappingURL: x,
        url: null,
        sourcesRelativeTo: w,
        map: U
      };
      if (!v.test(O)) {
        var S = new Error("Unuseful data uri mime type: " + O);
        throw S.sourceMapData = G, S;
      }
      try {
        G.map = a(
          $ === ";base64" ? y(U) : decodeURIComponent(U),
          G
        );
      } catch (M) {
        throw M.sourceMapData = G, M;
      }
      return G;
    }
    var A = i(w, x);
    return {
      sourceMappingURL: x,
      url: A,
      sourcesRelativeTo: A,
      map: null
    };
  }
  function E(L, w, x, N, O) {
    typeof N == "function" && (O = N, N = {});
    var $ = L.sources ? L.sources.length : 0, U = {
      sourcesResolved: [],
      sourcesContent: []
    };
    if ($ === 0) {
      c(O, null, U);
      return;
    }
    var G = function() {
      $--, $ === 0 && O(null, U);
    };
    D(L, w, N, function(S, A, M) {
      if (U.sourcesResolved[M] = S, typeof A == "string")
        U.sourcesContent[M] = A, c(G, null);
      else {
        var B = o(S);
        x(B, function(se, te) {
          U.sourcesContent[M] = se || String(te), G();
        });
      }
    });
  }
  function I(L, w, x, N) {
    var O = {
      sourcesResolved: [],
      sourcesContent: []
    };
    return !L.sources || L.sources.length === 0 || D(L, w, N, function($, U, G) {
      if (O.sourcesResolved[G] = $, x !== null)
        if (typeof U == "string")
          O.sourcesContent[G] = U;
        else {
          var S = o($);
          try {
            O.sourcesContent[G] = String(x(S));
          } catch (A) {
            O.sourcesContent[G] = A;
          }
        }
    }), O;
  }
  var R = /\/?$/;
  function D(L, w, x, N) {
    x = x || {}, w = s(w);
    for (var O, $, U, G = 0, S = L.sources.length; G < S; G++)
      U = null, typeof x.sourceRoot == "string" ? U = x.sourceRoot : typeof L.sourceRoot == "string" && x.sourceRoot !== !1 && (U = L.sourceRoot), U === null || U === "" ? O = i(w, L.sources[G]) : O = i(w, U.replace(R, "/"), L.sources[G]), $ = (L.sourcesContent || [])[G], N(O, $, G);
  }
  function Q(L, w, x, N, O) {
    if (typeof N == "function" && (O = N, N = {}), L === null) {
      var $ = w, U = {
        sourceMappingURL: null,
        url: $,
        sourcesRelativeTo: $,
        map: null
      }, G = o($);
      x(G, function(A, M) {
        if (A)
          return A.sourceMapData = U, O(A);
        U.map = String(M);
        try {
          U.map = a(U.map, U);
        } catch (B) {
          return O(B);
        }
        S(U);
      });
    } else
      f(L, w, x, function(A, M) {
        if (A)
          return O(A);
        if (!M)
          return O(null, null);
        S(M);
      });
    function S(A) {
      E(A.map, A.sourcesRelativeTo, x, N, function(M, B) {
        if (M)
          return O(M);
        A.sourcesResolved = B.sourcesResolved, A.sourcesContent = B.sourcesContent, O(null, A);
      });
    }
  }
  function F(L, w, x, N) {
    var O;
    if (L === null) {
      var $ = w;
      O = {
        sourceMappingURL: null,
        url: $,
        sourcesRelativeTo: $,
        map: null
      }, O.map = u(x, $, O), O.map = a(O.map, O);
    } else if (O = g(L, w, x), !O)
      return null;
    var U = I(O.map, O.sourcesRelativeTo, x, N);
    return O.sourcesResolved = U.sourcesResolved, O.sourcesContent = U.sourcesContent, O;
  }
  return Jr = {
    resolveSourceMap: f,
    resolveSourceMapSync: g,
    resolveSources: E,
    resolveSourcesSync: I,
    resolve: Q,
    resolveSync: F,
    parseMapToJSON: a
  }, Jr;
}
var Ts;
function Om() {
  return Ts || (Ts = 1, function(t, e) {
    var r = ms().SourceMapGenerator, n = ms().SourceMapConsumer, i = Rm(), s = mr, o = mr;
    t.exports = a;
    const c = function(u) {
      return o.sep === "\\" ? u.replace(/\\/g, "/").replace(/^[a-z]:\/?/i, "/") : u;
    };
    function a(u) {
      u._comment = u.comment, u.map = new r(), u.position = { line: 1, column: 1 }, u.files = {};
      for (var l in e) u[l] = e[l];
    }
    e.updatePosition = function(u) {
      var l = u.match(/\n/g);
      l && (this.position.line += l.length);
      var h = u.lastIndexOf(`
`);
      this.position.column = ~h ? u.length - h : this.position.column + u.length;
    }, e.emit = function(u, l) {
      if (l) {
        var h = c(l.source || "source.css");
        this.map.addMapping({
          source: h,
          generated: {
            line: this.position.line,
            column: Math.max(this.position.column - 1, 0)
          },
          original: {
            line: l.start.line,
            column: l.start.column - 1
          }
        }), this.addFile(h, l);
      }
      return this.updatePosition(u), u;
    }, e.addFile = function(u, l) {
      typeof l.content == "string" && (Object.prototype.hasOwnProperty.call(this.files, u) || (this.files[u] = l.content));
    }, e.applySourceMaps = function() {
      Object.keys(this.files).forEach(function(u) {
        var l = this.files[u];
        if (this.map.setSourceContent(u, l), this.options.inputSourcemaps !== !1) {
          var h = i.resolveSync(
            l,
            u,
            s.readFileSync
          );
          if (h) {
            var p = new n(h.map), f = h.sourcesRelativeTo;
            this.map.applySourceMap(p, u, c(o.dirname(f)));
          }
        }
      }, this);
    }, e.comment = function(u) {
      return /^# sourceMappingURL=/.test(u.comment) ? this.emit("", u.position) : this._comment(u);
    };
  }(Ht, Ht.exports)), Ht.exports;
}
var Lm = hm, Im = pm, Cm = function(t, e) {
  e = e || {};
  var r = e.compress ? new Lm(e) : new Im(e);
  if (e.sourcemap) {
    var n = Om();
    n(r);
    var s = r.compile(t);
    r.applySourceMaps();
    var i = e.sourcemap === "generator" ? r.map : r.map.toJSON();
    return { code: s, map: i };
  }
  var s = r.compile(t);
  return s;
};
dr.parse = um;
dr.stringify = Cm;
const Mm = 2;
let Zr = 0;
function bm(t) {
  return t.type !== "linebreak" ? (Zr = 0, !0) : (Zr++, Zr <= Mm);
}
function Nm(t) {
  return t.replace(/{{--(?![\s\n\r\t])/g, "{{-- ").replace(new RegExp("(?<![\\s\\n\\r\\t])--}}", "g"), " --}}");
}
function en(t) {
  const e = /{{{[^{}]*}}}/g, r = "__TRIPLE_CURLY__", n = [];
  return t = t.replace(e, (i) => {
    const s = `${r}${n.length}`;
    return n.push(i), s;
  }), t = t.replace(/{{\s*/g, "{{ ").replace(/\s*}}/g, " }}"), n.forEach((i, s) => {
    t = t.replace(`${r}${s}`, i);
  }), t;
}
function tn(t) {
  return t.replace(/{{{\s*/g, "{{{ ").replace(/\s*}}}/g, " }}}");
}
function km(t, e, r, n) {
  const i = /<style\b[^>]*>([\s\S]*?)<\/style>/gi, s = /{{.*?}}/g, o = /{{{.*?}}}/g;
  return t.value.replace(i, (a, u) => {
    let l = [], h = 0;
    u = u.replace(
      o,
      (m) => {
        const v = `__SAFE_MUSTACHE_TAG_${h++}__;`;
        return l.push(m), v;
      }
    ), u = u.replace(
      s,
      (m) => {
        const v = `__MUSTACHE_TAG_${h++}__;`;
        return l.push(m), v;
      }
    );
    const p = dr.parse(u), g = dr.stringify(p, { indent: n }).replace(/__MUSTACHE_TAG_\d+__;/g, (m) => {
      const v = parseInt(m.match(/\d+/)[0], 10);
      return l[v];
    }).replace(/__SAFE_MUSTACHE_TAG_\d+__;/g, (m) => {
      const v = parseInt(m.match(/\d+/)[0], 10);
      return l[v];
    });
    return `${e}<style>
${g.split(`
`).map((m) => `${r}${m}`).join(`
`)}
${e}</style>`;
  });
}
function Pm(t, e, r, n) {
  const i = /<script\b([^>]*)>([\s\S]*?)<\/script>/i, s = /{{.*?}}/g, o = /{{{.*?}}}/g, c = t.value.match(i);
  if (!c)
    throw new Error("Invalid <script> tag format");
  const [a, u, l] = c;
  let h = [], p = 0, f = l.replace(o, (v) => {
    const _ = `__SAFE_MUSTACHE_TAG_${p++}__`;
    return h.push(v), _;
  }).replace(s, (v) => {
    const _ = `__MUSTACHE_TAG_${p++}__`;
    return h.push(v), _;
  });
  const g = aa.minify(
    {
      "file1.js": f
    },
    {
      compress: !1,
      keep_fnames: !0,
      mangle: !1,
      output: {
        beautify: !0,
        comments: "all",
        indent_level: e
      }
    }
  );
  if (g.error)
    throw new Error(JSON.stringify(g.error));
  const m = g.code.replace(/__SAFE_MUSTACHE_TAG_\d+__/g, (v) => {
    const _ = parseInt(v.match(/\d+/)[0], 10);
    return h[_];
  }).replace(/__MUSTACHE_TAG_\d+__/g, (v) => {
    const _ = parseInt(v.match(/\d+/)[0], 10);
    return h[_];
  });
  return `${r}<script${u}>
${m.split(`
`).map((v) => `${n}${v}`).join(`
`)}
${r}<\/script>`;
}
function ia(t) {
  const e = t.match(/^\s*/);
  return e ? e[0].length : 0;
}
function wm(t, e, r) {
  return `${e}${t.value.split(`
`).map((n, i) => {
    if (i === 0)
      return `${n.trim()}`;
    if (i === t.value.split(`
`).length - 1)
      return `${e}${n.trim()}`;
    const s = ia(n);
    return `${" ".repeat(Math.max(e.length, s))}${n.trim()}`;
  }).join(`
`).replace(/[^\S\r\n]+$/g, "")}${r ? `
` : ""}`;
}
class xm {
  constructor(e) {
    et(this, "level");
    et(this, "useTabs");
    et(this, "printWidth");
    et(this, "tabWidth");
    et(this, "singleAttributePerLine");
    et(this, "inlineTags", /* @__PURE__ */ new Set([
      "a",
      "abbr",
      "acronym",
      "b",
      "bdi",
      "bdo",
      "big",
      "br",
      "button",
      "cite",
      "code",
      "data",
      "dfn",
      "em",
      "i",
      "img",
      "input",
      "kbd",
      "label",
      "mark",
      "meter",
      "q",
      "ruby",
      "rp",
      "rt",
      "s",
      "samp",
      "select",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "textarea",
      "time",
      "u",
      "var",
      "wbr",
      "feFuncR",
      "feFuncG",
      "feFuncB",
      "feFuncA"
    ]));
    this.level = 0, this.useTabs = e.useTabs ?? !1, this.printWidth = e.printWidth ?? 80, this.tabWidth = e.tabWidth ?? 4, this.singleAttributePerLine = e.singleAttributePerLine ?? !1;
  }
  isInlineTag(e) {
    return this.inlineTags.has(e);
  }
  getIndent(e, r = "none") {
    const n = e !== void 0 ? Math.max(e, 0) : this.level;
    return this.adjustIndentLevel(r), `${this.useTabs ? "	" : " ".repeat(this.tabWidth * n)}`;
  }
  adjustIndentLevel(e) {
    e === "increase" ? this.level++ : e === "decrease" && this.level--;
  }
  formatMultilineValue(e, r, n = !0) {
    return e.split(`
`).map((i, s, o) => {
      if (s === 0)
        return `${n ? r : ""}${i.trim()}`;
      if (s === o.length - 1) return `${r}${i.trim()}`;
      const c = ia(i);
      return `${" ".repeat(Math.max(r.length, c))}${i.trim()}`;
    }).join(`
`);
  }
  formatAttributes(e, r = "") {
    return e.map(
      (n) => n.attributeValue ? `${r}${n.attributeName}=${tn(en(n.attributeValue)).trim()}` : `${r}${n.attributeName.trim()}`
    ).join(r ? `
` : " ");
  }
  formatEdgeSafeMustacheProps(e, r = "") {
    return e.map(
      (n) => `${r}${tn(n.value).trim()}`
    ).join(r ? `
` : " ");
  }
  formatEdgeMustacheProps(e, r = "") {
    return e.map((n) => `${r}${en(n.value).trim()}`).join(r ? `
` : " ");
  }
  formatEdgeTagProps(e, r = "") {
    return e.map((n) => `${r}${n.value.trim()}`).join(r ? `
` : " ");
  }
  formatComments(e, r = "") {
    return e.map((n) => `${r}${n.value}`).join(r ? `
` : " ");
  }
  printDocumentNode(e) {
    return this.level = 0, e.children.filter(bm).map(
      (r, n, i) => this.handlePrint(r, i[n - 1], i[n + 1])
    ).join("");
  }
  printDTDNode(e) {
    return `${this.getIndent()}${e.value}`;
  }
  printStandardNode(e) {
    const r = e.type === "scriptlet";
    return `${this.formatMultilineValue(e.value, r ? "" : this.getIndent())}`;
  }
  printScriptElementNode(e) {
    return `${Pm(e, this.tabWidth, this.getIndent(), this.getIndent(this.level + 1))}`;
  }
  printStyleElementNode(e) {
    return `${km(e, this.getIndent(), this.getIndent(this.level + 1), this.getIndent(1))}`;
  }
  printEdgeComment(e) {
    return `${this.formatMultilineValue(Nm(e.value.trim()), this.getIndent())}`;
  }
  printEdgeMustacheNode(e, r, n) {
    const i = !((r == null ? void 0 : r.type) === "htmlText" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache" || ((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName)), s = !((n == null ? void 0 : n.type) === "htmlText" || (n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache" || ((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName));
    let o = `${i ? this.getIndent() : ""}`;
    const c = e.type === "edgeSafeMustache" ? tn(e.value) : en(e.value);
    return o += s ? c.replace(/[\r\n]+/g, "").trimEnd() + `
` : c, o;
  }
  printOpeningNode(e, r, n) {
    let i = this.formatAttributes(e.attributes), s = this.formatEdgeTagProps(e.edgeTagProps), o = this.formatEdgeSafeMustacheProps(
      e.edgeSafeMustaches
    ), c = this.formatEdgeMustacheProps(e.edgeMustaches), a = this.formatComments(e.comments);
    const u = `${i} ${o} ${c} ${s} ${a}`.length, l = this.getIndent(this.level + 1), h = this.getIndent(
      void 0,
      e.type === "openingTag" ? "increase" : "none"
    ), p = this.getIndent(
      e.type === "openingTag" ? this.level - 1 : this.level
    ), f = !this.isInlineTag(e.tagName) && (n == null ? void 0 : n.type) !== "linebreak", g = !(((r == null ? void 0 : r.type) === "htmlText" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache") && this.isInlineTag(e.tagName));
    if (u > this.printWidth || this.singleAttributePerLine) {
      const v = e.type == "voidTag" ? "/>" : ">";
      i = this.formatAttributes(e.attributes, l), s = this.formatEdgeTagProps(e.edgeTagProps, l), o = this.formatEdgeSafeMustacheProps(
        e.edgeSafeMustaches,
        l
      ), c = this.formatEdgeMustacheProps(
        e.edgeMustaches,
        l
      ), a = this.formatComments(e.comments, l);
      const _ = u - 2 > 0 ? `
${p}` : "";
      return `${g ? h : ""}<${e.tagName}${i ? `
${i}` : ""}${c ? `
${c}` : ""}${o ? `
${o}` : ""}${s ? `
${this.formatMultilineValue(s, l)}` : ""}${a ? `
${this.formatMultilineValue(a, l)}` : ""}${_}${v}${f ? `
` : ""}`;
    }
    const m = e.type == "voidTag" ? " />" : ">";
    return `${g ? h : ""}<${e.tagName}${i ? ` ${i}` : ""}${c ? ` ${c}` : ""}${o ? ` ${o}` : ""}${s ? ` ${this.formatMultilineValue(s, "")}` : ""}${a ? ` ${this.formatMultilineValue(a, "")}` : ""}${m}${f ? `
` : ""}`;
  }
  printClosingNode(e, r, n) {
    const i = !this.isInlineTag(e.tagName) || (r == null ? void 0 : r.type) === "linebreak" || (r == null ? void 0 : r.type) === "edgeTag", s = (r == null ? void 0 : r.type) !== "linebreak" && (r == null ? void 0 : r.type) === "closingTag" && this.isInlineTag(r.tagName) && !this.isInlineTag(e.tagName), o = !this.isInlineTag(e.tagName) && (n == null ? void 0 : n.type) !== "linebreak" && !(((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName));
    return `${s ? `
` : ""}${i ? this.getIndent(this.level - 1, "decrease") : this.getIndent(0, "decrease")}</${e.tagName}>${o ? `
` : ""}`;
  }
  printEdgeTagNode(e, r) {
    var o, c;
    let n = "none", i = this.level;
    e.value.includes("@end") ? (n = "decrease", i--) : e.value.includes("@else") ? i-- : e.value.includes("@!") || e.value.includes("@let") || e.value.includes("@svg") || e.value.includes("@assign") || e.value.includes("@inject") || e.value.includes("@eval") || e.value.includes("@debugger") || e.value.includes("@newError") || e.value.includes("@vite") || e.value.includes("@inertia") || e.value.includes("@stack") || e.value.includes("@dd") || e.value.includes("@dump") || (o = e.value.match(/^@include\(.*/)) != null && o.length || (c = e.value.match(/^@includeIf\(.*/)) != null && c.length || !e.value.includes("(") ? n = "none" : n = "increase";
    const s = (r == null ? void 0 : r.type) !== "linebreak" && !e.value.includes(`
`);
    return wm(
      e,
      this.getIndent(i, n),
      s
    );
  }
  printHtmlTextNode(e, r, n) {
    const i = !((r == null ? void 0 : r.type) === "scriptlet" || (r == null ? void 0 : r.type) === "edgeMustache" || (r == null ? void 0 : r.type) === "edgeSafeMustache" || (r == null ? void 0 : r.type) === "edgeEscapedMustache" || ((r == null ? void 0 : r.type) === "openingTag" || (r == null ? void 0 : r.type) === "voidTag" || (r == null ? void 0 : r.type) === "closingTag") && this.isInlineTag(r.tagName)), s = !((n == null ? void 0 : n.type) === "edgeMustache" || (n == null ? void 0 : n.type) === "edgeSafeMustache" || (n == null ? void 0 : n.type) === "edgeEscapedMustache" || (n == null ? void 0 : n.type) === "htmlText" || ((n == null ? void 0 : n.type) === "openingTag" || (n == null ? void 0 : n.type) === "voidTag" || (n == null ? void 0 : n.type) === "closingTag") && this.isInlineTag(n.tagName) || (n == null ? void 0 : n.type) === "scriptlet"), o = i ? this.getIndent() + e.value : e.value;
    return s ? `${o.trimEnd()}
` : o;
  }
  printLineBreak(e) {
    return e.value;
  }
  handlePrint(e, r, n) {
    switch (e.type) {
      case "document":
        return this.printDocumentNode(e);
      case "dtd":
        return this.printDTDNode(e);
      case "htmlComment":
      case "htmlConditionalComment":
      case "cdata":
      case "scriptlet":
        return this.printStandardNode(e);
      case "scriptElement":
        return this.printScriptElementNode(e);
      case "styleElement":
        return this.printStyleElementNode(e);
      case "edgeComment":
        return this.printEdgeComment(e);
      case "edgeMustache":
      case "edgeEscapedMustache":
      case "edgeSafeMustache":
        return this.printEdgeMustacheNode(e, r, n);
      case "openingTag":
      case "voidTag":
        return this.printOpeningNode(e, r, n);
      case "closingTag":
        return this.printClosingNode(e, r, n);
      case "edgeTag":
        return this.printEdgeTagNode(e, n);
      case "htmlText":
        return this.printHtmlTextNode(e, r, n);
      case "linebreak":
        return this.printLineBreak(e);
      default:
        return "";
    }
  }
}
function Um(t, e) {
  const r = t.getNode();
  return new xm(e).handlePrint(r, void 0, void 0);
}
const jm = [
  {
    name: "EdgeJS",
    parsers: ["edgejs"],
    extensions: [".edge"],
    tmScope: "text.html.edge",
    aceMode: "html",
    linguistLanguageId: 460509620,
    vscodeLanguageIds: ["edge"]
  }
], $m = {
  edgejs: {
    parse(t) {
      return am(t);
    },
    astFormat: "edgejs",
    locStart(t) {
      return t.start;
    },
    locEnd(t) {
      return t.end;
    }
  }
}, Gm = {
  edgejs: {
    print: Um
  }
}, Bm = {
  useTabs: !1,
  tabWidth: 4,
  printWidth: 80,
  singleAttributePerLine: !1
}, Vm = {};
export {
  Bm as defaultOptions,
  jm as languages,
  Vm as options,
  $m as parsers,
  Gm as printers
};
