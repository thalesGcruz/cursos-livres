/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { CreateInvoiceRequest } from '../models/createInvoiceRequest';
import { GetInvoiceResponse } from '../models/getInvoiceResponse';
import { ListInvoicesResponse } from '../models/listInvoicesResponse';
import { UpdateInvoiceStatusRequest } from '../models/updateInvoiceStatusRequest';
import { UpdateMetadataRequest } from '../models/updateMetadataRequest';
import { BaseController } from './baseController';
export declare class InvoicesController extends BaseController {
    /**
     * Updates the metadata from an invoice
     *
     * @param invoiceId       The invoice id
     * @param request         Request for updating the invoice metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateInvoiceMetadata(invoiceId: string, request: UpdateMetadataRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetInvoiceResponse>>;
    /**
     * @param subscriptionId  Subscription Id
     * @return Response from the API call
     */
    getPartialInvoice(subscriptionId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetInvoiceResponse>>;
    /**
     * Cancels an invoice
     *
     * @param invoiceId       Invoice id
     * @param idempotencyKey
     * @return Response from the API call
     */
    cancelInvoice(invoiceId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetInvoiceResponse>>;
    /**
     * Create an Invoice
     *
     * @param subscriptionId  Subscription Id
     * @param cycleId         Cycle Id
     * @param request
     * @param idempotencyKey
     * @return Response from the API call
     */
    createInvoice(subscriptionId: string, cycleId: string, request?: CreateInvoiceRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetInvoiceResponse>>;
    /**
     * Gets all invoices
     *
     * @param page              Page number
     * @param size              Page size
     * @param code              Filter for Invoice's code
     * @param customerId        Filter for Invoice's customer id
     * @param subscriptionId    Filter for Invoice's subscription id
     * @param createdSince      Filter for Invoice's creation date start range
     * @param createdUntil      Filter for Invoices creation date end range
     * @param status            Filter for Invoice's status
     * @param dueSince          Filter for Invoice's due date start range
     * @param dueUntil          Filter for Invoice's due date end range
     * @param customerDocument
     * @return Response from the API call
     */
    getInvoices(page?: number, size?: number, code?: string, customerId?: string, subscriptionId?: string, createdSince?: string, createdUntil?: string, status?: string, dueSince?: string, dueUntil?: string, customerDocument?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListInvoicesResponse>>;
    /**
     * Gets an invoice
     *
     * @param invoiceId  Invoice Id
     * @return Response from the API call
     */
    getInvoice(invoiceId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetInvoiceResponse>>;
    /**
     * Updates the status from an invoice
     *
     * @param invoiceId       Invoice Id
     * @param request         Request for updating an invoice's status
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateInvoiceStatus(invoiceId: string, request: UpdateInvoiceStatusRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetInvoiceResponse>>;
}
