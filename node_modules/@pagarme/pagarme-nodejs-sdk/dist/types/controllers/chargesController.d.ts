/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { CreateCancelChargeRequest } from '../models/createCancelChargeRequest';
import { CreateCaptureChargeRequest } from '../models/createCaptureChargeRequest';
import { CreateChargeRequest } from '../models/createChargeRequest';
import { CreateConfirmPaymentRequest } from '../models/createConfirmPaymentRequest';
import { GetChargeResponse } from '../models/getChargeResponse';
import { GetChargesSummaryResponse } from '../models/getChargesSummaryResponse';
import { ListChargesResponse } from '../models/listChargesResponse';
import { ListChargeTransactionsResponse } from '../models/listChargeTransactionsResponse';
import { UpdateChargeCardRequest } from '../models/updateChargeCardRequest';
import { UpdateChargeDueDateRequest } from '../models/updateChargeDueDateRequest';
import { UpdateChargePaymentMethodRequest } from '../models/updateChargePaymentMethodRequest';
import { UpdateMetadataRequest } from '../models/updateMetadataRequest';
import { BaseController } from './baseController';
export declare class ChargesController extends BaseController {
    /**
     * Updates the metadata from a charge
     *
     * @param chargeId        The charge id
     * @param request         Request for updating the charge metadata
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateChargeMetadata(chargeId: string, request: UpdateMetadataRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * Updates a charge's payment method
     *
     * @param chargeId        Charge id
     * @param request         Request for updating the payment method from a
     *                                                                   charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateChargePaymentMethod(chargeId: string, request: UpdateChargePaymentMethodRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * @param chargeId  Charge Id
     * @param page      Page number
     * @param size      Page size
     * @return Response from the API call
     */
    getChargeTransactions(chargeId: string, page?: number, size?: number, requestOptions?: RequestOptions): Promise<ApiResponse<ListChargeTransactionsResponse>>;
    /**
     * Updates the due date from a charge
     *
     * @param chargeId        Charge Id
     * @param request         Request for updating the due date
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateChargeDueDate(chargeId: string, request: UpdateChargeDueDateRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * Lists all charges
     *
     * @param page           Page number
     * @param size           Page size
     * @param code           Filter for charge's code
     * @param status         Filter for charge's status
     * @param paymentMethod  Filter for charge's payment method
     * @param customerId     Filter for charge's customer id
     * @param orderId        Filter for charge's order id
     * @param createdSince   Filter for the beginning of the range for charge's creation
     * @param createdUntil   Filter for the end of the range for charge's creation
     * @return Response from the API call
     */
    getCharges(page?: number, size?: number, code?: string, status?: string, paymentMethod?: string, customerId?: string, orderId?: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<ListChargesResponse>>;
    /**
     * Captures a charge
     *
     * @param chargeId        Charge id
     * @param request         Request for capturing a charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    captureCharge(chargeId: string, request?: CreateCaptureChargeRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * Updates the card from a charge
     *
     * @param chargeId        Charge id
     * @param request         Request for updating a charge's card
     * @param idempotencyKey
     * @return Response from the API call
     */
    updateChargeCard(chargeId: string, request: UpdateChargeCardRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * Get a charge from its id
     *
     * @param chargeId  Charge id
     * @return Response from the API call
     */
    getCharge(chargeId: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * @param status
     * @param createdSince
     * @param createdUntil
     * @return Response from the API call
     */
    getChargesSummary(status: string, createdSince?: string, createdUntil?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargesSummaryResponse>>;
    /**
     * Retries a charge
     *
     * @param chargeId        Charge id
     * @param idempotencyKey
     * @return Response from the API call
     */
    retryCharge(chargeId: string, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * Cancel a charge
     *
     * @param chargeId        Charge id
     * @param request         Request for cancelling a charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    cancelCharge(chargeId: string, request?: CreateCancelChargeRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * Creates a new charge
     *
     * @param request         Request for creating a charge
     * @param idempotencyKey
     * @return Response from the API call
     */
    createCharge(request: CreateChargeRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
    /**
     * @param chargeId
     * @param request         Request for confirm payment
     * @param idempotencyKey
     * @return Response from the API call
     */
    confirmPayment(chargeId: string, request?: CreateConfirmPaymentRequest, idempotencyKey?: string, requestOptions?: RequestOptions): Promise<ApiResponse<GetChargeResponse>>;
}
